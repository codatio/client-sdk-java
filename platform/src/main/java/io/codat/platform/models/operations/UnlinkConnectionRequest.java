/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.platform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.platform.utils.SpeakeasyMetadata;
import io.codat.platform.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class UnlinkConnectionRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends io.codat.platform.models.shared.UpdateConnectionStatus> updateConnectionStatus;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * Unique identifier for a connection.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectionId")
    private String connectionId;

    @JsonCreator
    public UnlinkConnectionRequest(
            Optional<? extends io.codat.platform.models.shared.UpdateConnectionStatus> updateConnectionStatus,
            String companyId,
            String connectionId) {
        Utils.checkNotNull(updateConnectionStatus, "updateConnectionStatus");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(connectionId, "connectionId");
        this.updateConnectionStatus = updateConnectionStatus;
        this.companyId = companyId;
        this.connectionId = connectionId;
    }
    
    public UnlinkConnectionRequest(
            String companyId,
            String connectionId) {
        this(Optional.empty(), companyId, connectionId);
    }

    @JsonIgnore
    public Optional<? extends io.codat.platform.models.shared.UpdateConnectionStatus> updateConnectionStatus() {
        return updateConnectionStatus;
    }

    /**
     * Unique identifier for a company.
     */
    @JsonIgnore
    public String companyId() {
        return companyId;
    }

    /**
     * Unique identifier for a connection.
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UnlinkConnectionRequest withUpdateConnectionStatus(io.codat.platform.models.shared.UpdateConnectionStatus updateConnectionStatus) {
        Utils.checkNotNull(updateConnectionStatus, "updateConnectionStatus");
        this.updateConnectionStatus = Optional.ofNullable(updateConnectionStatus);
        return this;
    }

    public UnlinkConnectionRequest withUpdateConnectionStatus(Optional<? extends io.codat.platform.models.shared.UpdateConnectionStatus> updateConnectionStatus) {
        Utils.checkNotNull(updateConnectionStatus, "updateConnectionStatus");
        this.updateConnectionStatus = updateConnectionStatus;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public UnlinkConnectionRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Unique identifier for a connection.
     */
    public UnlinkConnectionRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnlinkConnectionRequest other = (UnlinkConnectionRequest) o;
        return 
            java.util.Objects.deepEquals(this.updateConnectionStatus, other.updateConnectionStatus) &&
            java.util.Objects.deepEquals(this.companyId, other.companyId) &&
            java.util.Objects.deepEquals(this.connectionId, other.connectionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            updateConnectionStatus,
            companyId,
            connectionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnlinkConnectionRequest.class,
                "updateConnectionStatus", updateConnectionStatus,
                "companyId", companyId,
                "connectionId", connectionId);
    }
    
    public final static class Builder {
 
        private Optional<? extends io.codat.platform.models.shared.UpdateConnectionStatus> updateConnectionStatus = Optional.empty();
 
        private String companyId;
 
        private String connectionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder updateConnectionStatus(io.codat.platform.models.shared.UpdateConnectionStatus updateConnectionStatus) {
            Utils.checkNotNull(updateConnectionStatus, "updateConnectionStatus");
            this.updateConnectionStatus = Optional.ofNullable(updateConnectionStatus);
            return this;
        }

        public Builder updateConnectionStatus(Optional<? extends io.codat.platform.models.shared.UpdateConnectionStatus> updateConnectionStatus) {
            Utils.checkNotNull(updateConnectionStatus, "updateConnectionStatus");
            this.updateConnectionStatus = updateConnectionStatus;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Unique identifier for a connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }
        
        public UnlinkConnectionRequest build() {
            return new UnlinkConnectionRequest(
                updateConnectionStatus,
                companyId,
                connectionId);
        }
    }
}

