/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.platform.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.platform.utils.SpeakeasyMetadata;
import io.codat.platform.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;


public class DeleteApiKeyRequest {

    /**
     * Unique identifier for api key.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=apiKeyId")
    private String apiKeyId;

    public DeleteApiKeyRequest(
            String apiKeyId) {
        Utils.checkNotNull(apiKeyId, "apiKeyId");
        this.apiKeyId = apiKeyId;
    }

    /**
     * Unique identifier for api key.
     */
    public String apiKeyId() {
        return apiKeyId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for api key.
     */
    public DeleteApiKeyRequest withApiKeyId(String apiKeyId) {
        Utils.checkNotNull(apiKeyId, "apiKeyId");
        this.apiKeyId = apiKeyId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeleteApiKeyRequest other = (DeleteApiKeyRequest) o;
        return 
            java.util.Objects.deepEquals(this.apiKeyId, other.apiKeyId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            apiKeyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeleteApiKeyRequest.class,
                "apiKeyId", apiKeyId);
    }
    
    public final static class Builder {
 
        private String apiKeyId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for api key.
         */
        public Builder apiKeyId(String apiKeyId) {
            Utils.checkNotNull(apiKeyId, "apiKeyId");
            this.apiKeyId = apiKeyId;
            return this;
        }
        
        public DeleteApiKeyRequest build() {
            return new DeleteApiKeyRequest(
                apiKeyId);
        }
    }
}

