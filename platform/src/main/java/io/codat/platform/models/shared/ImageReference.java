/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ImageReference - Image reference.
 */

public class ImageReference {

    /**
     * Alternative text when image is not available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alt")
    private Optional<String> alt;

    /**
     * Source URL for image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("src")
    private Optional<String> src;

    @JsonCreator
    public ImageReference(
            @JsonProperty("alt") Optional<String> alt,
            @JsonProperty("src") Optional<String> src) {
        Utils.checkNotNull(alt, "alt");
        Utils.checkNotNull(src, "src");
        this.alt = alt;
        this.src = src;
    }
    
    public ImageReference() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Alternative text when image is not available.
     */
    @JsonIgnore
    public Optional<String> alt() {
        return alt;
    }

    /**
     * Source URL for image.
     */
    @JsonIgnore
    public Optional<String> src() {
        return src;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Alternative text when image is not available.
     */
    public ImageReference withAlt(String alt) {
        Utils.checkNotNull(alt, "alt");
        this.alt = Optional.ofNullable(alt);
        return this;
    }

    /**
     * Alternative text when image is not available.
     */
    public ImageReference withAlt(Optional<String> alt) {
        Utils.checkNotNull(alt, "alt");
        this.alt = alt;
        return this;
    }

    /**
     * Source URL for image.
     */
    public ImageReference withSrc(String src) {
        Utils.checkNotNull(src, "src");
        this.src = Optional.ofNullable(src);
        return this;
    }

    /**
     * Source URL for image.
     */
    public ImageReference withSrc(Optional<String> src) {
        Utils.checkNotNull(src, "src");
        this.src = src;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImageReference other = (ImageReference) o;
        return 
            Objects.deepEquals(this.alt, other.alt) &&
            Objects.deepEquals(this.src, other.src);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            alt,
            src);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ImageReference.class,
                "alt", alt,
                "src", src);
    }
    
    public final static class Builder {
 
        private Optional<String> alt = Optional.empty();
 
        private Optional<String> src = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Alternative text when image is not available.
         */
        public Builder alt(String alt) {
            Utils.checkNotNull(alt, "alt");
            this.alt = Optional.ofNullable(alt);
            return this;
        }

        /**
         * Alternative text when image is not available.
         */
        public Builder alt(Optional<String> alt) {
            Utils.checkNotNull(alt, "alt");
            this.alt = alt;
            return this;
        }

        /**
         * Source URL for image.
         */
        public Builder src(String src) {
            Utils.checkNotNull(src, "src");
            this.src = Optional.ofNullable(src);
            return this;
        }

        /**
         * Source URL for image.
         */
        public Builder src(Optional<String> src) {
            Utils.checkNotNull(src, "src");
            this.src = src;
            return this;
        }
        
        public ImageReference build() {
            return new ImageReference(
                alt,
                src);
        }
    }
}

