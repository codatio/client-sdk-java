/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.operations;

import io.codat.platform.models.shared.CompanyRequestBody;
import io.codat.platform.models.shared.ConnectionManagementAllowedOrigins;
import io.codat.platform.models.shared.CreateApiKey;
import io.codat.platform.models.shared.CreateRule;
import io.codat.platform.models.shared.Profile;
import io.codat.platform.models.shared.WebhookConsumerPrototype;
import io.codat.platform.utils.Options;
import java.lang.Exception;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallCreateApiKey {
        CreateApiKeyResponse createApiKey(
            Optional<? extends CreateApiKey> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteApiKey {
        DeleteApiKeyResponse deleteApiKey(
            DeleteApiKeyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetProfile {
        GetProfileResponse getProfile(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetProfileSyncSettings {
        GetProfileSyncSettingsResponse getSyncSettings(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListApiKeys {
        ListApiKeysResponse listApiKeys(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateProfile {
        UpdateProfileResponse updateProfile(
            Optional<? extends Profile> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateProfileSyncSettings {
        UpdateProfileSyncSettingsResponse updateSyncSettings(
            Optional<? extends UpdateProfileSyncSettingsRequestBody> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAddProduct {
        AddProductResponse addProduct(
            AddProductRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateCompany {
        CreateCompanyResponse create(
            Optional<? extends CompanyRequestBody> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteCompany {
        DeleteCompanyResponse delete(
            DeleteCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompany {
        GetCompanyResponse get(
            GetCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompanyAccessToken {
        GetCompanyAccessTokenResponse getAccessToken(
            GetCompanyAccessTokenRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListCompanies {
        ListCompaniesResponse list(
            ListCompaniesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRemoveProduct {
        RemoveProductResponse removeProduct(
            RemoveProductRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateCompany {
        UpdateCompanyResponse update(
            UpdateCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetConnectionManagementAccessToken {
        GetConnectionManagementAccessTokenResponse getAccessToken(
            GetConnectionManagementAccessTokenRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetConnectionManagementCorsSettings {
        GetConnectionManagementCorsSettingsResponse get(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSetConnectionManagementCorsSettings {
        SetConnectionManagementCorsSettingsResponse set(
            Optional<? extends ConnectionManagementAllowedOrigins> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateConnection {
        CreateConnectionResponse create(
            CreateConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteConnection {
        DeleteConnectionResponse delete(
            DeleteConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetConnection {
        GetConnectionResponse get(
            GetConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListConnections {
        ListConnectionsResponse list(
            ListConnectionsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUnlinkConnection {
        UnlinkConnectionResponse unlink(
            UnlinkConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateConnectionAuthorization {
        UpdateConnectionAuthorizationResponse updateAuthorization(
            UpdateConnectionAuthorizationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConfigureCustomDataType {
        ConfigureCustomDataTypeResponse configure(
            ConfigureCustomDataTypeRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCustomDataTypeConfiguration {
        GetCustomDataTypeConfigurationResponse getConfiguration(
            GetCustomDataTypeConfigurationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListCustomDataTypeRecords {
        ListCustomDataTypeRecordsResponse list(
            ListCustomDataTypeRecordsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRefreshCustomDataType {
        RefreshCustomDataTypeResponse refresh(
            RefreshCustomDataTypeRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCreateUpdateModelOptionsByDataType {
        GetCreateUpdateModelOptionsByDataTypeResponse getModelOptions(
            GetCreateUpdateModelOptionsByDataTypeRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPushOperation {
        GetPushOperationResponse getOperation(
            GetPushOperationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompanyPushHistory {
        GetCompanyPushHistoryResponse listOperations(
            GetCompanyPushHistoryRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRefreshCompanyData {
        RefreshCompanyDataResponse all(
            RefreshCompanyDataRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRefreshDataType {
        RefreshDataTypeResponse byDataType(
            RefreshDataTypeRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompanyDataStatus {
        GetCompanyDataStatusResponse get(
            GetCompanyDataStatusRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPullOperation {
        GetPullOperationResponse getPullOperation(
            GetPullOperationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListPullOperations {
        ListPullOperationsResponse listPullOperations(
            ListPullOperationsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetIntegration {
        GetIntegrationResponse get(
            GetIntegrationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetIntegrationsBranding {
        GetIntegrationsBrandingResponse getBranding(
            GetIntegrationsBrandingRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListIntegrations {
        ListIntegrationsResponse list(
            ListIntegrationsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallConfigureSupplementalData {
        ConfigureSupplementalDataResponse configure(
            ConfigureSupplementalDataRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSupplementalDataConfiguration {
        GetSupplementalDataConfigurationResponse getConfiguration(
            GetSupplementalDataConfigurationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateRule {
        CreateRuleResponse create(
            Optional<? extends CreateRule> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateWebhookConsumer {
        CreateWebhookConsumerResponse createConsumer(
            Optional<? extends WebhookConsumerPrototype> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteWebhookConsumer {
        DeleteWebhookConsumerResponse deleteConsumer(
            DeleteWebhookConsumerRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetWebhook {
        GetWebhookResponse get(
            GetWebhookRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListRules {
        ListRulesResponse list(
            ListRulesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListWebhookConsumers {
        ListWebhookConsumersResponse listConsumers(
            Optional<Options> options) throws Exception;
    }


}
