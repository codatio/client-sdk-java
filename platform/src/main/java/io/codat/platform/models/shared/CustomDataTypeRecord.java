/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class CustomDataTypeRecord {

    /**
     * Values from the source system for the properties defined in the custom data type configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<? extends Map<String, Content>> content;

    /**
     * Unique identifier of the record.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<? extends ModifiedDate> modifiedDate;

    @JsonCreator
    public CustomDataTypeRecord(
            @JsonProperty("content") Optional<? extends Map<String, Content>> content,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("modifiedDate") Optional<? extends ModifiedDate> modifiedDate) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.content = content;
        this.id = id;
        this.modifiedDate = modifiedDate;
    }
    
    public CustomDataTypeRecord() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Values from the source system for the properties defined in the custom data type configuration.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Content>> content() {
        return (Optional<Map<String, Content>>) content;
    }

    /**
     * Unique identifier of the record.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ModifiedDate> modifiedDate() {
        return (Optional<ModifiedDate>) modifiedDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Values from the source system for the properties defined in the custom data type configuration.
     */
    public CustomDataTypeRecord withContent(Map<String, Content> content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    /**
     * Values from the source system for the properties defined in the custom data type configuration.
     */
    public CustomDataTypeRecord withContent(Optional<? extends Map<String, Content>> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * Unique identifier of the record.
     */
    public CustomDataTypeRecord withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier of the record.
     */
    public CustomDataTypeRecord withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CustomDataTypeRecord withModifiedDate(ModifiedDate modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }

    public CustomDataTypeRecord withModifiedDate(Optional<? extends ModifiedDate> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CustomDataTypeRecord other = (CustomDataTypeRecord) o;
        return 
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.modifiedDate, other.modifiedDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            content,
            id,
            modifiedDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CustomDataTypeRecord.class,
                "content", content,
                "id", id,
                "modifiedDate", modifiedDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, Content>> content = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends ModifiedDate> modifiedDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Values from the source system for the properties defined in the custom data type configuration.
         */
        public Builder content(Map<String, Content> content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * Values from the source system for the properties defined in the custom data type configuration.
         */
        public Builder content(Optional<? extends Map<String, Content>> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        /**
         * Unique identifier of the record.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier of the record.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder modifiedDate(ModifiedDate modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        public Builder modifiedDate(Optional<? extends ModifiedDate> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }
        
        public CustomDataTypeRecord build() {
            return new CustomDataTypeRecord(
                content,
                id,
                modifiedDate);
        }
    }
}

