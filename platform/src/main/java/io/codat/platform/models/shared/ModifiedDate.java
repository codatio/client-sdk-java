/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class ModifiedDate {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<String> modifiedDate;

    @JsonCreator
    public ModifiedDate(
            @JsonProperty("modifiedDate") Optional<String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
    }
    
    public ModifiedDate() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> modifiedDate() {
        return modifiedDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ModifiedDate withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }

    public ModifiedDate withModifiedDate(Optional<String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ModifiedDate other = (ModifiedDate) o;
        return 
            Objects.deepEquals(this.modifiedDate, other.modifiedDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            modifiedDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ModifiedDate.class,
                "modifiedDate", modifiedDate);
    }
    
    public final static class Builder {
 
        private Optional<String> modifiedDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        public Builder modifiedDate(Optional<String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }
        
        public ModifiedDate build() {
            return new ModifiedDate(
                modifiedDate);
        }
    }
}

