/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.platform.models.shared.SyncSetting;
import io.codat.platform.utils.LazySingletonValue;
import io.codat.platform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * UpdateProfileSyncSettingsRequestBody - Include a `syncSetting` object for each data type.
 * `syncFromWindow`, `syncFromUTC` &amp; `monthsToSync` only need to be included if you wish to set a value for them.
 */

public class UpdateProfileSyncSettingsRequestBody {

    /**
     * Unique identifier for your client in Codat.
     */
    @JsonProperty("clientId")
    private String clientId;

    /**
     * Set to `True` if you want to override default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overridesDefaults")
    private Optional<Boolean> overridesDefaults;

    @JsonProperty("settings")
    private List<SyncSetting> settings;

    @JsonCreator
    public UpdateProfileSyncSettingsRequestBody(
            @JsonProperty("clientId") String clientId,
            @JsonProperty("overridesDefaults") Optional<Boolean> overridesDefaults,
            @JsonProperty("settings") List<SyncSetting> settings) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(overridesDefaults, "overridesDefaults");
        Utils.checkNotNull(settings, "settings");
        this.clientId = clientId;
        this.overridesDefaults = overridesDefaults;
        this.settings = settings;
    }
    
    public UpdateProfileSyncSettingsRequestBody(
            String clientId,
            List<SyncSetting> settings) {
        this(clientId, Optional.empty(), settings);
    }

    /**
     * Unique identifier for your client in Codat.
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * Set to `True` if you want to override default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    @JsonIgnore
    public Optional<Boolean> overridesDefaults() {
        return overridesDefaults;
    }

    @JsonIgnore
    public List<SyncSetting> settings() {
        return settings;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for your client in Codat.
     */
    public UpdateProfileSyncSettingsRequestBody withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * Set to `True` if you want to override default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    public UpdateProfileSyncSettingsRequestBody withOverridesDefaults(boolean overridesDefaults) {
        Utils.checkNotNull(overridesDefaults, "overridesDefaults");
        this.overridesDefaults = Optional.ofNullable(overridesDefaults);
        return this;
    }

    /**
     * Set to `True` if you want to override default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    public UpdateProfileSyncSettingsRequestBody withOverridesDefaults(Optional<Boolean> overridesDefaults) {
        Utils.checkNotNull(overridesDefaults, "overridesDefaults");
        this.overridesDefaults = overridesDefaults;
        return this;
    }

    public UpdateProfileSyncSettingsRequestBody withSettings(List<SyncSetting> settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = settings;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateProfileSyncSettingsRequestBody other = (UpdateProfileSyncSettingsRequestBody) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.overridesDefaults, other.overridesDefaults) &&
            Objects.deepEquals(this.settings, other.settings);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            overridesDefaults,
            settings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateProfileSyncSettingsRequestBody.class,
                "clientId", clientId,
                "overridesDefaults", overridesDefaults,
                "settings", settings);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private Optional<Boolean> overridesDefaults;
 
        private List<SyncSetting> settings;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for your client in Codat.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * Set to `True` if you want to override default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
         */
        public Builder overridesDefaults(boolean overridesDefaults) {
            Utils.checkNotNull(overridesDefaults, "overridesDefaults");
            this.overridesDefaults = Optional.ofNullable(overridesDefaults);
            return this;
        }

        /**
         * Set to `True` if you want to override default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
         */
        public Builder overridesDefaults(Optional<Boolean> overridesDefaults) {
            Utils.checkNotNull(overridesDefaults, "overridesDefaults");
            this.overridesDefaults = overridesDefaults;
            return this;
        }

        public Builder settings(List<SyncSetting> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = settings;
            return this;
        }
        
        public UpdateProfileSyncSettingsRequestBody build() {
            if (overridesDefaults == null) {
                overridesDefaults = _SINGLETON_VALUE_OverridesDefaults.value();
            }            return new UpdateProfileSyncSettingsRequestBody(
                clientId,
                overridesDefaults,
                settings);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_OverridesDefaults =
                new LazySingletonValue<>(
                        "overridesDefaults",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

