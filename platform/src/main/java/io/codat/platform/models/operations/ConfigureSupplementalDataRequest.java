/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.platform.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.platform.utils.SpeakeasyMetadata;
import io.codat.platform.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ConfigureSupplementalDataRequest {

    /**
     * The configuration for the specified platform and data type.
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends io.codat.platform.models.shared.SupplementalDataConfiguration> supplementalDataConfiguration;

    /**
     * Supported supplemental data data type.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=dataType")
    private DataType dataType;

    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=platformKey")
    private String platformKey;

    @JsonCreator
    public ConfigureSupplementalDataRequest(
            Optional<? extends io.codat.platform.models.shared.SupplementalDataConfiguration> supplementalDataConfiguration,
            DataType dataType,
            String platformKey) {
        Utils.checkNotNull(supplementalDataConfiguration, "supplementalDataConfiguration");
        Utils.checkNotNull(dataType, "dataType");
        Utils.checkNotNull(platformKey, "platformKey");
        this.supplementalDataConfiguration = supplementalDataConfiguration;
        this.dataType = dataType;
        this.platformKey = platformKey;
    }
    
    public ConfigureSupplementalDataRequest(
            DataType dataType,
            String platformKey) {
        this(Optional.empty(), dataType, platformKey);
    }

    /**
     * The configuration for the specified platform and data type.
     */
    @JsonIgnore
    public Optional<? extends io.codat.platform.models.shared.SupplementalDataConfiguration> supplementalDataConfiguration() {
        return supplementalDataConfiguration;
    }

    /**
     * Supported supplemental data data type.
     */
    @JsonIgnore
    public DataType dataType() {
        return dataType;
    }

    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    @JsonIgnore
    public String platformKey() {
        return platformKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The configuration for the specified platform and data type.
     */
    public ConfigureSupplementalDataRequest withSupplementalDataConfiguration(io.codat.platform.models.shared.SupplementalDataConfiguration supplementalDataConfiguration) {
        Utils.checkNotNull(supplementalDataConfiguration, "supplementalDataConfiguration");
        this.supplementalDataConfiguration = Optional.ofNullable(supplementalDataConfiguration);
        return this;
    }

    /**
     * The configuration for the specified platform and data type.
     */
    public ConfigureSupplementalDataRequest withSupplementalDataConfiguration(Optional<? extends io.codat.platform.models.shared.SupplementalDataConfiguration> supplementalDataConfiguration) {
        Utils.checkNotNull(supplementalDataConfiguration, "supplementalDataConfiguration");
        this.supplementalDataConfiguration = supplementalDataConfiguration;
        return this;
    }

    /**
     * Supported supplemental data data type.
     */
    public ConfigureSupplementalDataRequest withDataType(DataType dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = dataType;
        return this;
    }

    /**
     * A unique 4-letter key to represent a platform in each integration.
     */
    public ConfigureSupplementalDataRequest withPlatformKey(String platformKey) {
        Utils.checkNotNull(platformKey, "platformKey");
        this.platformKey = platformKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConfigureSupplementalDataRequest other = (ConfigureSupplementalDataRequest) o;
        return 
            java.util.Objects.deepEquals(this.supplementalDataConfiguration, other.supplementalDataConfiguration) &&
            java.util.Objects.deepEquals(this.dataType, other.dataType) &&
            java.util.Objects.deepEquals(this.platformKey, other.platformKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            supplementalDataConfiguration,
            dataType,
            platformKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConfigureSupplementalDataRequest.class,
                "supplementalDataConfiguration", supplementalDataConfiguration,
                "dataType", dataType,
                "platformKey", platformKey);
    }
    
    public final static class Builder {
 
        private Optional<? extends io.codat.platform.models.shared.SupplementalDataConfiguration> supplementalDataConfiguration = Optional.empty();
 
        private DataType dataType;
 
        private String platformKey;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The configuration for the specified platform and data type.
         */
        public Builder supplementalDataConfiguration(io.codat.platform.models.shared.SupplementalDataConfiguration supplementalDataConfiguration) {
            Utils.checkNotNull(supplementalDataConfiguration, "supplementalDataConfiguration");
            this.supplementalDataConfiguration = Optional.ofNullable(supplementalDataConfiguration);
            return this;
        }

        /**
         * The configuration for the specified platform and data type.
         */
        public Builder supplementalDataConfiguration(Optional<? extends io.codat.platform.models.shared.SupplementalDataConfiguration> supplementalDataConfiguration) {
            Utils.checkNotNull(supplementalDataConfiguration, "supplementalDataConfiguration");
            this.supplementalDataConfiguration = supplementalDataConfiguration;
            return this;
        }

        /**
         * Supported supplemental data data type.
         */
        public Builder dataType(DataType dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = dataType;
            return this;
        }

        /**
         * A unique 4-letter key to represent a platform in each integration.
         */
        public Builder platformKey(String platformKey) {
            Utils.checkNotNull(platformKey, "platformKey");
            this.platformKey = platformKey;
            return this;
        }
        
        public ConfigureSupplementalDataRequest build() {
            return new ConfigureSupplementalDataRequest(
                supplementalDataConfiguration,
                dataType,
                platformKey);
        }
    }
}

