/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class WebhookNotifier {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<String>> emails;

    /**
     * The URI the webhook service will use to post events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook")
    private Optional<String> webhook;

    @JsonCreator
    public WebhookNotifier(
            @JsonProperty("emails") Optional<? extends List<String>> emails,
            @JsonProperty("webhook") Optional<String> webhook) {
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(webhook, "webhook");
        this.emails = emails;
        this.webhook = webhook;
    }
    
    public WebhookNotifier() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> emails() {
        return (Optional<List<String>>) emails;
    }

    /**
     * The URI the webhook service will use to post events.
     */
    @JsonIgnore
    public Optional<String> webhook() {
        return webhook;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WebhookNotifier withEmails(List<String> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public WebhookNotifier withEmails(Optional<? extends List<String>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    /**
     * The URI the webhook service will use to post events.
     */
    public WebhookNotifier withWebhook(String webhook) {
        Utils.checkNotNull(webhook, "webhook");
        this.webhook = Optional.ofNullable(webhook);
        return this;
    }

    /**
     * The URI the webhook service will use to post events.
     */
    public WebhookNotifier withWebhook(Optional<String> webhook) {
        Utils.checkNotNull(webhook, "webhook");
        this.webhook = webhook;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookNotifier other = (WebhookNotifier) o;
        return 
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.webhook, other.webhook);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            emails,
            webhook);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookNotifier.class,
                "emails", emails,
                "webhook", webhook);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> emails = Optional.empty();
 
        private Optional<String> webhook = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder emails(List<String> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<String>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        /**
         * The URI the webhook service will use to post events.
         */
        public Builder webhook(String webhook) {
            Utils.checkNotNull(webhook, "webhook");
            this.webhook = Optional.ofNullable(webhook);
            return this;
        }

        /**
         * The URI the webhook service will use to post events.
         */
        public Builder webhook(Optional<String> webhook) {
            Utils.checkNotNull(webhook, "webhook");
            this.webhook = webhook;
            return this;
        }
        
        public WebhookNotifier build() {
            return new WebhookNotifier(
                emails,
                webhook);
        }
    }
}

