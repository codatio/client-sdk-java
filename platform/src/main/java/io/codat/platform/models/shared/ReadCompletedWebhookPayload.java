/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ReadCompletedWebhookPayload {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataTypes")
    private Optional<? extends List<DataTypes>> dataTypes;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedFromDate")
    private Optional<String> modifiedFromDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceCompany")
    private Optional<? extends CompanyReference> referenceCompany;

    @JsonCreator
    public ReadCompletedWebhookPayload(
            @JsonProperty("dataTypes") Optional<? extends List<DataTypes>> dataTypes,
            @JsonProperty("modifiedFromDate") Optional<String> modifiedFromDate,
            @JsonProperty("referenceCompany") Optional<? extends CompanyReference> referenceCompany) {
        Utils.checkNotNull(dataTypes, "dataTypes");
        Utils.checkNotNull(modifiedFromDate, "modifiedFromDate");
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.dataTypes = dataTypes;
        this.modifiedFromDate = modifiedFromDate;
        this.referenceCompany = referenceCompany;
    }
    
    public ReadCompletedWebhookPayload() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DataTypes>> dataTypes() {
        return (Optional<List<DataTypes>>) dataTypes;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> modifiedFromDate() {
        return modifiedFromDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyReference> referenceCompany() {
        return (Optional<CompanyReference>) referenceCompany;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ReadCompletedWebhookPayload withDataTypes(List<DataTypes> dataTypes) {
        Utils.checkNotNull(dataTypes, "dataTypes");
        this.dataTypes = Optional.ofNullable(dataTypes);
        return this;
    }

    public ReadCompletedWebhookPayload withDataTypes(Optional<? extends List<DataTypes>> dataTypes) {
        Utils.checkNotNull(dataTypes, "dataTypes");
        this.dataTypes = dataTypes;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ReadCompletedWebhookPayload withModifiedFromDate(String modifiedFromDate) {
        Utils.checkNotNull(modifiedFromDate, "modifiedFromDate");
        this.modifiedFromDate = Optional.ofNullable(modifiedFromDate);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ReadCompletedWebhookPayload withModifiedFromDate(Optional<String> modifiedFromDate) {
        Utils.checkNotNull(modifiedFromDate, "modifiedFromDate");
        this.modifiedFromDate = modifiedFromDate;
        return this;
    }

    public ReadCompletedWebhookPayload withReferenceCompany(CompanyReference referenceCompany) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.referenceCompany = Optional.ofNullable(referenceCompany);
        return this;
    }

    public ReadCompletedWebhookPayload withReferenceCompany(Optional<? extends CompanyReference> referenceCompany) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.referenceCompany = referenceCompany;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReadCompletedWebhookPayload other = (ReadCompletedWebhookPayload) o;
        return 
            Objects.deepEquals(this.dataTypes, other.dataTypes) &&
            Objects.deepEquals(this.modifiedFromDate, other.modifiedFromDate) &&
            Objects.deepEquals(this.referenceCompany, other.referenceCompany);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dataTypes,
            modifiedFromDate,
            referenceCompany);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReadCompletedWebhookPayload.class,
                "dataTypes", dataTypes,
                "modifiedFromDate", modifiedFromDate,
                "referenceCompany", referenceCompany);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<DataTypes>> dataTypes = Optional.empty();
 
        private Optional<String> modifiedFromDate = Optional.empty();
 
        private Optional<? extends CompanyReference> referenceCompany = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dataTypes(List<DataTypes> dataTypes) {
            Utils.checkNotNull(dataTypes, "dataTypes");
            this.dataTypes = Optional.ofNullable(dataTypes);
            return this;
        }

        public Builder dataTypes(Optional<? extends List<DataTypes>> dataTypes) {
            Utils.checkNotNull(dataTypes, "dataTypes");
            this.dataTypes = dataTypes;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder modifiedFromDate(String modifiedFromDate) {
            Utils.checkNotNull(modifiedFromDate, "modifiedFromDate");
            this.modifiedFromDate = Optional.ofNullable(modifiedFromDate);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder modifiedFromDate(Optional<String> modifiedFromDate) {
            Utils.checkNotNull(modifiedFromDate, "modifiedFromDate");
            this.modifiedFromDate = modifiedFromDate;
            return this;
        }

        public Builder referenceCompany(CompanyReference referenceCompany) {
            Utils.checkNotNull(referenceCompany, "referenceCompany");
            this.referenceCompany = Optional.ofNullable(referenceCompany);
            return this;
        }

        public Builder referenceCompany(Optional<? extends CompanyReference> referenceCompany) {
            Utils.checkNotNull(referenceCompany, "referenceCompany");
            this.referenceCompany = referenceCompany;
            return this;
        }
        
        public ReadCompletedWebhookPayload build() {
            return new ReadCompletedWebhookPayload(
                dataTypes,
                modifiedFromDate,
                referenceCompany);
        }
    }
}

