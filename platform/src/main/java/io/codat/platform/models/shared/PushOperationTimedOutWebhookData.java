/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class PushOperationTimedOutWebhookData {

    /**
     * Available data types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataType")
    private Optional<? extends DataType> dataType;

    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushOperationGuid")
    private Optional<String> pushOperationGuid;

    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushOperationKey")
    private Optional<String> pushOperationKey;

    @JsonCreator
    public PushOperationTimedOutWebhookData(
            @JsonProperty("dataType") Optional<? extends DataType> dataType,
            @JsonProperty("pushOperationGuid") Optional<String> pushOperationGuid,
            @JsonProperty("pushOperationKey") Optional<String> pushOperationKey) {
        Utils.checkNotNull(dataType, "dataType");
        Utils.checkNotNull(pushOperationGuid, "pushOperationGuid");
        Utils.checkNotNull(pushOperationKey, "pushOperationKey");
        this.dataType = dataType;
        this.pushOperationGuid = pushOperationGuid;
        this.pushOperationKey = pushOperationKey;
    }
    
    public PushOperationTimedOutWebhookData() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Available data types
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataType> dataType() {
        return (Optional<DataType>) dataType;
    }

    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    @JsonIgnore
    public Optional<String> pushOperationGuid() {
        return pushOperationGuid;
    }

    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    @JsonIgnore
    public Optional<String> pushOperationKey() {
        return pushOperationKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Available data types
     */
    public PushOperationTimedOutWebhookData withDataType(DataType dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = Optional.ofNullable(dataType);
        return this;
    }

    /**
     * Available data types
     */
    public PushOperationTimedOutWebhookData withDataType(Optional<? extends DataType> dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = dataType;
        return this;
    }

    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    public PushOperationTimedOutWebhookData withPushOperationGuid(String pushOperationGuid) {
        Utils.checkNotNull(pushOperationGuid, "pushOperationGuid");
        this.pushOperationGuid = Optional.ofNullable(pushOperationGuid);
        return this;
    }

    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    public PushOperationTimedOutWebhookData withPushOperationGuid(Optional<String> pushOperationGuid) {
        Utils.checkNotNull(pushOperationGuid, "pushOperationGuid");
        this.pushOperationGuid = pushOperationGuid;
        return this;
    }

    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    public PushOperationTimedOutWebhookData withPushOperationKey(String pushOperationKey) {
        Utils.checkNotNull(pushOperationKey, "pushOperationKey");
        this.pushOperationKey = Optional.ofNullable(pushOperationKey);
        return this;
    }

    /**
     * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
     */
    public PushOperationTimedOutWebhookData withPushOperationKey(Optional<String> pushOperationKey) {
        Utils.checkNotNull(pushOperationKey, "pushOperationKey");
        this.pushOperationKey = pushOperationKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PushOperationTimedOutWebhookData other = (PushOperationTimedOutWebhookData) o;
        return 
            Objects.deepEquals(this.dataType, other.dataType) &&
            Objects.deepEquals(this.pushOperationGuid, other.pushOperationGuid) &&
            Objects.deepEquals(this.pushOperationKey, other.pushOperationKey);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dataType,
            pushOperationGuid,
            pushOperationKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PushOperationTimedOutWebhookData.class,
                "dataType", dataType,
                "pushOperationGuid", pushOperationGuid,
                "pushOperationKey", pushOperationKey);
    }
    
    public final static class Builder {
 
        private Optional<? extends DataType> dataType = Optional.empty();
 
        private Optional<String> pushOperationGuid = Optional.empty();
 
        private Optional<String> pushOperationKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Available data types
         */
        public Builder dataType(DataType dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = Optional.ofNullable(dataType);
            return this;
        }

        /**
         * Available data types
         */
        public Builder dataType(Optional<? extends DataType> dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = dataType;
            return this;
        }

        /**
         * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
         */
        public Builder pushOperationGuid(String pushOperationGuid) {
            Utils.checkNotNull(pushOperationGuid, "pushOperationGuid");
            this.pushOperationGuid = Optional.ofNullable(pushOperationGuid);
            return this;
        }

        /**
         * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
         */
        public Builder pushOperationGuid(Optional<String> pushOperationGuid) {
            Utils.checkNotNull(pushOperationGuid, "pushOperationGuid");
            this.pushOperationGuid = pushOperationGuid;
            return this;
        }

        /**
         * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
         */
        public Builder pushOperationKey(String pushOperationKey) {
            Utils.checkNotNull(pushOperationKey, "pushOperationKey");
            this.pushOperationKey = Optional.ofNullable(pushOperationKey);
            return this;
        }

        /**
         * A unique identifier generated by Codat to represent this single push operation. This identifier can be used to track the status of the push, and should be persisted.
         */
        public Builder pushOperationKey(Optional<String> pushOperationKey) {
            Utils.checkNotNull(pushOperationKey, "pushOperationKey");
            this.pushOperationKey = pushOperationKey;
            return this;
        }
        
        public PushOperationTimedOutWebhookData build() {
            return new PushOperationTimedOutWebhookData(
                dataType,
                pushOperationGuid,
                pushOperationKey);
        }
    }
}

