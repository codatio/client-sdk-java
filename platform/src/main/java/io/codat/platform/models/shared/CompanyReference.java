/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class CompanyReference {

    /**
     * Additional information about the company. This can be used to store foreign IDs, references, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * A collection of links for the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    private Optional<? extends CompanyReferenceLinks> links;

    /**
     * The name of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * A collection of user-defined key-value pairs that store custom metadata against the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends Map<String, String>> tags;

    @JsonCreator
    public CompanyReference(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("links") Optional<? extends CompanyReferenceLinks> links,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("tags") Optional<? extends Map<String, String>> tags) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(links, "links");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(tags, "tags");
        this.description = description;
        this.id = id;
        this.links = links;
        this.name = name;
        this.tags = tags;
    }
    
    public CompanyReference() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Additional information about the company. This can be used to store foreign IDs, references, etc.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * A collection of links for the company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyReferenceLinks> links() {
        return (Optional<CompanyReferenceLinks>) links;
    }

    /**
     * The name of the company
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * A collection of user-defined key-value pairs that store custom metadata against the company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> tags() {
        return (Optional<Map<String, String>>) tags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Additional information about the company. This can be used to store foreign IDs, references, etc.
     */
    public CompanyReference withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Additional information about the company. This can be used to store foreign IDs, references, etc.
     */
    public CompanyReference withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    public CompanyReference withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    public CompanyReference withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A collection of links for the company.
     */
    public CompanyReference withLinks(CompanyReferenceLinks links) {
        Utils.checkNotNull(links, "links");
        this.links = Optional.ofNullable(links);
        return this;
    }

    /**
     * A collection of links for the company.
     */
    public CompanyReference withLinks(Optional<? extends CompanyReferenceLinks> links) {
        Utils.checkNotNull(links, "links");
        this.links = links;
        return this;
    }

    /**
     * The name of the company
     */
    public CompanyReference withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the company
     */
    public CompanyReference withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * A collection of user-defined key-value pairs that store custom metadata against the company.
     */
    public CompanyReference withTags(Map<String, String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    /**
     * A collection of user-defined key-value pairs that store custom metadata against the company.
     */
    public CompanyReference withTags(Optional<? extends Map<String, String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyReference other = (CompanyReference) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.links, other.links) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.tags, other.tags);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            id,
            links,
            name,
            tags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyReference.class,
                "description", description,
                "id", id,
                "links", links,
                "name", name,
                "tags", tags);
    }
    
    public final static class Builder {
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends CompanyReferenceLinks> links = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends Map<String, String>> tags = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Additional information about the company. This can be used to store foreign IDs, references, etc.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Additional information about the company. This can be used to store foreign IDs, references, etc.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Unique identifier for your SMB in Codat.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier for your SMB in Codat.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A collection of links for the company.
         */
        public Builder links(CompanyReferenceLinks links) {
            Utils.checkNotNull(links, "links");
            this.links = Optional.ofNullable(links);
            return this;
        }

        /**
         * A collection of links for the company.
         */
        public Builder links(Optional<? extends CompanyReferenceLinks> links) {
            Utils.checkNotNull(links, "links");
            this.links = links;
            return this;
        }

        /**
         * The name of the company
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the company
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * A collection of user-defined key-value pairs that store custom metadata against the company.
         */
        public Builder tags(Map<String, String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        /**
         * A collection of user-defined key-value pairs that store custom metadata against the company.
         */
        public Builder tags(Optional<? extends Map<String, String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }
        
        public CompanyReference build() {
            return new CompanyReference(
                description,
                id,
                links,
                name,
                tags);
        }
    }
}

