/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.platform.utils.LazySingletonValue;
import io.codat.platform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * WebhookConsumer - ï»¿A webhook consumer is an HTTP endpoint that developers can configure to subscribe to Codat's supported event types.
 * 
 * See our documentation for more details on [Codat's webhook service](https://docs.codat.io/using-the-api/webhooks/overview).
 * 
 */

public class WebhookConsumer {

    /**
     * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyId")
    private JsonNullable<String> companyId;

    /**
     * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    private JsonNullable<Boolean> disabled;

    /**
     * An array of event types the webhook consumer subscribes to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTypes")
    private Optional<? extends List<String>> eventTypes;

    /**
     * Unique identifier for the webhook consumer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The URL that will consume webhook events dispatched by Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public WebhookConsumer(
            @JsonProperty("companyId") JsonNullable<String> companyId,
            @JsonProperty("disabled") JsonNullable<Boolean> disabled,
            @JsonProperty("eventTypes") Optional<? extends List<String>> eventTypes,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(disabled, "disabled");
        Utils.checkNotNull(eventTypes, "eventTypes");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(url, "url");
        this.companyId = companyId;
        this.disabled = disabled;
        this.eventTypes = eventTypes;
        this.id = id;
        this.url = url;
    }
    
    public WebhookConsumer() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
     */
    @JsonIgnore
    public JsonNullable<Boolean> disabled() {
        return disabled;
    }

    /**
     * An array of event types the webhook consumer subscribes to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> eventTypes() {
        return (Optional<List<String>>) eventTypes;
    }

    /**
     * Unique identifier for the webhook consumer.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The URL that will consume webhook events dispatched by Codat.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
     */
    public WebhookConsumer withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
     */
    public WebhookConsumer withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
     */
    public WebhookConsumer withDisabled(boolean disabled) {
        Utils.checkNotNull(disabled, "disabled");
        this.disabled = JsonNullable.of(disabled);
        return this;
    }

    /**
     * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
     */
    public WebhookConsumer withDisabled(JsonNullable<Boolean> disabled) {
        Utils.checkNotNull(disabled, "disabled");
        this.disabled = disabled;
        return this;
    }

    /**
     * An array of event types the webhook consumer subscribes to.
     */
    public WebhookConsumer withEventTypes(List<String> eventTypes) {
        Utils.checkNotNull(eventTypes, "eventTypes");
        this.eventTypes = Optional.ofNullable(eventTypes);
        return this;
    }

    /**
     * An array of event types the webhook consumer subscribes to.
     */
    public WebhookConsumer withEventTypes(Optional<? extends List<String>> eventTypes) {
        Utils.checkNotNull(eventTypes, "eventTypes");
        this.eventTypes = eventTypes;
        return this;
    }

    /**
     * Unique identifier for the webhook consumer.
     */
    public WebhookConsumer withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier for the webhook consumer.
     */
    public WebhookConsumer withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The URL that will consume webhook events dispatched by Codat.
     */
    public WebhookConsumer withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The URL that will consume webhook events dispatched by Codat.
     */
    public WebhookConsumer withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookConsumer other = (WebhookConsumer) o;
        return 
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.disabled, other.disabled) &&
            Objects.deepEquals(this.eventTypes, other.eventTypes) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyId,
            disabled,
            eventTypes,
            id,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookConsumer.class,
                "companyId", companyId,
                "disabled", disabled,
                "eventTypes", eventTypes,
                "id", id,
                "url", url);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private JsonNullable<Boolean> disabled;
 
        private Optional<? extends List<String>> eventTypes = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> url = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * Unique identifier of the company to indicate company-specific events. The associated webhook consumer will receive events only for the specified ID.
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
         */
        public Builder disabled(boolean disabled) {
            Utils.checkNotNull(disabled, "disabled");
            this.disabled = JsonNullable.of(disabled);
            return this;
        }

        /**
         * Flag that enables or disables the endpoint from receiving events. Disabled when set to `true`.
         */
        public Builder disabled(JsonNullable<Boolean> disabled) {
            Utils.checkNotNull(disabled, "disabled");
            this.disabled = disabled;
            return this;
        }

        /**
         * An array of event types the webhook consumer subscribes to.
         */
        public Builder eventTypes(List<String> eventTypes) {
            Utils.checkNotNull(eventTypes, "eventTypes");
            this.eventTypes = Optional.ofNullable(eventTypes);
            return this;
        }

        /**
         * An array of event types the webhook consumer subscribes to.
         */
        public Builder eventTypes(Optional<? extends List<String>> eventTypes) {
            Utils.checkNotNull(eventTypes, "eventTypes");
            this.eventTypes = eventTypes;
            return this;
        }

        /**
         * Unique identifier for the webhook consumer.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier for the webhook consumer.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The URL that will consume webhook events dispatched by Codat.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The URL that will consume webhook events dispatched by Codat.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public WebhookConsumer build() {
            if (disabled == null) {
                disabled = _SINGLETON_VALUE_Disabled.value();
            }            return new WebhookConsumer(
                companyId,
                disabled,
                eventTypes,
                id,
                url);
        }

        private static final LazySingletonValue<JsonNullable<Boolean>> _SINGLETON_VALUE_Disabled =
                new LazySingletonValue<>(
                        "disabled",
                        "false",
                        new TypeReference<JsonNullable<Boolean>>() {});
    }
}

