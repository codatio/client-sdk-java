/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class SupplementalDataConfiguration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalDataConfig")
    private Optional<? extends Map<String, SupplementalDataSourceConfiguration>> supplementalDataConfig;

    @JsonCreator
    public SupplementalDataConfiguration(
            @JsonProperty("supplementalDataConfig") Optional<? extends Map<String, SupplementalDataSourceConfiguration>> supplementalDataConfig) {
        Utils.checkNotNull(supplementalDataConfig, "supplementalDataConfig");
        this.supplementalDataConfig = supplementalDataConfig;
    }
    
    public SupplementalDataConfiguration() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, SupplementalDataSourceConfiguration>> supplementalDataConfig() {
        return (Optional<Map<String, SupplementalDataSourceConfiguration>>) supplementalDataConfig;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SupplementalDataConfiguration withSupplementalDataConfig(Map<String, SupplementalDataSourceConfiguration> supplementalDataConfig) {
        Utils.checkNotNull(supplementalDataConfig, "supplementalDataConfig");
        this.supplementalDataConfig = Optional.ofNullable(supplementalDataConfig);
        return this;
    }

    public SupplementalDataConfiguration withSupplementalDataConfig(Optional<? extends Map<String, SupplementalDataSourceConfiguration>> supplementalDataConfig) {
        Utils.checkNotNull(supplementalDataConfig, "supplementalDataConfig");
        this.supplementalDataConfig = supplementalDataConfig;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupplementalDataConfiguration other = (SupplementalDataConfiguration) o;
        return 
            Objects.deepEquals(this.supplementalDataConfig, other.supplementalDataConfig);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            supplementalDataConfig);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SupplementalDataConfiguration.class,
                "supplementalDataConfig", supplementalDataConfig);
    }
    
    public final static class Builder {
 
        private Optional<? extends Map<String, SupplementalDataSourceConfiguration>> supplementalDataConfig = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder supplementalDataConfig(Map<String, SupplementalDataSourceConfiguration> supplementalDataConfig) {
            Utils.checkNotNull(supplementalDataConfig, "supplementalDataConfig");
            this.supplementalDataConfig = Optional.ofNullable(supplementalDataConfig);
            return this;
        }

        public Builder supplementalDataConfig(Optional<? extends Map<String, SupplementalDataSourceConfiguration>> supplementalDataConfig) {
            Utils.checkNotNull(supplementalDataConfig, "supplementalDataConfig");
            this.supplementalDataConfig = supplementalDataConfig;
            return this;
        }
        
        public SupplementalDataConfiguration build() {
            return new SupplementalDataConfiguration(
                supplementalDataConfig);
        }
    }
}

