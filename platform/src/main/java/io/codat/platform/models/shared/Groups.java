/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class Groups {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<Group>> results;

    @JsonCreator
    public Groups(
            @JsonProperty("results") Optional<? extends List<Group>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
    }
    
    public Groups() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Group>> results() {
        return (Optional<List<Group>>) results;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Groups withResults(List<Group> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public Groups withResults(Optional<? extends List<Group>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Groups other = (Groups) o;
        return 
            Objects.deepEquals(this.results, other.results);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            results);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Groups.class,
                "results", results);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Group>> results = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder results(List<Group> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends List<Group>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }
        
        public Groups build() {
            return new Groups(
                results);
        }
    }
}

