/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SyncSettings {

    /**
     * Unique identifier for your client in Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Optional<String> clientId;

    /**
     * Set to `True` if you want to override the default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overridesDefaults")
    private Optional<Boolean> overridesDefaults;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("settings")
    private Optional<? extends List<SyncSetting>> settings;

    @JsonCreator
    public SyncSettings(
            @JsonProperty("clientId") Optional<String> clientId,
            @JsonProperty("overridesDefaults") Optional<Boolean> overridesDefaults,
            @JsonProperty("settings") Optional<? extends List<SyncSetting>> settings) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(overridesDefaults, "overridesDefaults");
        Utils.checkNotNull(settings, "settings");
        this.clientId = clientId;
        this.overridesDefaults = overridesDefaults;
        this.settings = settings;
    }
    
    public SyncSettings() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for your client in Codat.
     */
    @JsonIgnore
    public Optional<String> clientId() {
        return clientId;
    }

    /**
     * Set to `True` if you want to override the default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    @JsonIgnore
    public Optional<Boolean> overridesDefaults() {
        return overridesDefaults;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SyncSetting>> settings() {
        return (Optional<List<SyncSetting>>) settings;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for your client in Codat.
     */
    public SyncSettings withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = Optional.ofNullable(clientId);
        return this;
    }

    /**
     * Unique identifier for your client in Codat.
     */
    public SyncSettings withClientId(Optional<String> clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * Set to `True` if you want to override the default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    public SyncSettings withOverridesDefaults(boolean overridesDefaults) {
        Utils.checkNotNull(overridesDefaults, "overridesDefaults");
        this.overridesDefaults = Optional.ofNullable(overridesDefaults);
        return this;
    }

    /**
     * Set to `True` if you want to override the default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
     */
    public SyncSettings withOverridesDefaults(Optional<Boolean> overridesDefaults) {
        Utils.checkNotNull(overridesDefaults, "overridesDefaults");
        this.overridesDefaults = overridesDefaults;
        return this;
    }

    public SyncSettings withSettings(List<SyncSetting> settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = Optional.ofNullable(settings);
        return this;
    }

    public SyncSettings withSettings(Optional<? extends List<SyncSetting>> settings) {
        Utils.checkNotNull(settings, "settings");
        this.settings = settings;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SyncSettings other = (SyncSettings) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.overridesDefaults, other.overridesDefaults) &&
            Objects.deepEquals(this.settings, other.settings);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            overridesDefaults,
            settings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SyncSettings.class,
                "clientId", clientId,
                "overridesDefaults", overridesDefaults,
                "settings", settings);
    }
    
    public final static class Builder {
 
        private Optional<String> clientId = Optional.empty();
 
        private Optional<Boolean> overridesDefaults = Optional.empty();
 
        private Optional<? extends List<SyncSetting>> settings = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for your client in Codat.
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = Optional.ofNullable(clientId);
            return this;
        }

        /**
         * Unique identifier for your client in Codat.
         */
        public Builder clientId(Optional<String> clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * Set to `True` if you want to override the default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
         */
        public Builder overridesDefaults(boolean overridesDefaults) {
            Utils.checkNotNull(overridesDefaults, "overridesDefaults");
            this.overridesDefaults = Optional.ofNullable(overridesDefaults);
            return this;
        }

        /**
         * Set to `True` if you want to override the default [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings).
         */
        public Builder overridesDefaults(Optional<Boolean> overridesDefaults) {
            Utils.checkNotNull(overridesDefaults, "overridesDefaults");
            this.overridesDefaults = overridesDefaults;
            return this;
        }

        public Builder settings(List<SyncSetting> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = Optional.ofNullable(settings);
            return this;
        }

        public Builder settings(Optional<? extends List<SyncSetting>> settings) {
            Utils.checkNotNull(settings, "settings");
            this.settings = settings;
            return this;
        }
        
        public SyncSettings build() {
            return new SyncSettings(
                clientId,
                overridesDefaults,
                settings);
        }
    }
}

