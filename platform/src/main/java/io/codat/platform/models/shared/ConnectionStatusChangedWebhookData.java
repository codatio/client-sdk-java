/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.platform.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.platform.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ConnectionStatusChangedWebhookData {

    /**
     * Unique identifier for a company's data connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataConnectionId")
    private Optional<? extends String> dataConnectionId;

    /**
     * The current authorization status of the data connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newStatus")
    private Optional<? extends DataConnectionStatus> newStatus;

    /**
     * The current authorization status of the data connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oldStatus")
    private Optional<? extends DataConnectionStatus> oldStatus;

    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformKey")
    private Optional<? extends String> platformKey;

    public ConnectionStatusChangedWebhookData(
            @JsonProperty("dataConnectionId") Optional<? extends String> dataConnectionId,
            @JsonProperty("newStatus") Optional<? extends DataConnectionStatus> newStatus,
            @JsonProperty("oldStatus") Optional<? extends DataConnectionStatus> oldStatus,
            @JsonProperty("platformKey") Optional<? extends String> platformKey) {
        Utils.checkNotNull(dataConnectionId, "dataConnectionId");
        Utils.checkNotNull(newStatus, "newStatus");
        Utils.checkNotNull(oldStatus, "oldStatus");
        Utils.checkNotNull(platformKey, "platformKey");
        this.dataConnectionId = dataConnectionId;
        this.newStatus = newStatus;
        this.oldStatus = oldStatus;
        this.platformKey = platformKey;
    }

    /**
     * Unique identifier for a company's data connection.
     */
    public Optional<? extends String> dataConnectionId() {
        return dataConnectionId;
    }

    /**
     * The current authorization status of the data connection.
     */
    public Optional<? extends DataConnectionStatus> newStatus() {
        return newStatus;
    }

    /**
     * The current authorization status of the data connection.
     */
    public Optional<? extends DataConnectionStatus> oldStatus() {
        return oldStatus;
    }

    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    public Optional<? extends String> platformKey() {
        return platformKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for a company's data connection.
     */
    public ConnectionStatusChangedWebhookData withDataConnectionId(String dataConnectionId) {
        Utils.checkNotNull(dataConnectionId, "dataConnectionId");
        this.dataConnectionId = Optional.ofNullable(dataConnectionId);
        return this;
    }

    /**
     * Unique identifier for a company's data connection.
     */
    public ConnectionStatusChangedWebhookData withDataConnectionId(Optional<? extends String> dataConnectionId) {
        Utils.checkNotNull(dataConnectionId, "dataConnectionId");
        this.dataConnectionId = dataConnectionId;
        return this;
    }

    /**
     * The current authorization status of the data connection.
     */
    public ConnectionStatusChangedWebhookData withNewStatus(DataConnectionStatus newStatus) {
        Utils.checkNotNull(newStatus, "newStatus");
        this.newStatus = Optional.ofNullable(newStatus);
        return this;
    }

    /**
     * The current authorization status of the data connection.
     */
    public ConnectionStatusChangedWebhookData withNewStatus(Optional<? extends DataConnectionStatus> newStatus) {
        Utils.checkNotNull(newStatus, "newStatus");
        this.newStatus = newStatus;
        return this;
    }

    /**
     * The current authorization status of the data connection.
     */
    public ConnectionStatusChangedWebhookData withOldStatus(DataConnectionStatus oldStatus) {
        Utils.checkNotNull(oldStatus, "oldStatus");
        this.oldStatus = Optional.ofNullable(oldStatus);
        return this;
    }

    /**
     * The current authorization status of the data connection.
     */
    public ConnectionStatusChangedWebhookData withOldStatus(Optional<? extends DataConnectionStatus> oldStatus) {
        Utils.checkNotNull(oldStatus, "oldStatus");
        this.oldStatus = oldStatus;
        return this;
    }

    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    public ConnectionStatusChangedWebhookData withPlatformKey(String platformKey) {
        Utils.checkNotNull(platformKey, "platformKey");
        this.platformKey = Optional.ofNullable(platformKey);
        return this;
    }

    /**
     * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
     */
    public ConnectionStatusChangedWebhookData withPlatformKey(Optional<? extends String> platformKey) {
        Utils.checkNotNull(platformKey, "platformKey");
        this.platformKey = platformKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectionStatusChangedWebhookData other = (ConnectionStatusChangedWebhookData) o;
        return 
            java.util.Objects.deepEquals(this.dataConnectionId, other.dataConnectionId) &&
            java.util.Objects.deepEquals(this.newStatus, other.newStatus) &&
            java.util.Objects.deepEquals(this.oldStatus, other.oldStatus) &&
            java.util.Objects.deepEquals(this.platformKey, other.platformKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dataConnectionId,
            newStatus,
            oldStatus,
            platformKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectionStatusChangedWebhookData.class,
                "dataConnectionId", dataConnectionId,
                "newStatus", newStatus,
                "oldStatus", oldStatus,
                "platformKey", platformKey);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> dataConnectionId = Optional.empty();
 
        private Optional<? extends DataConnectionStatus> newStatus = Optional.empty();
 
        private Optional<? extends DataConnectionStatus> oldStatus = Optional.empty();
 
        private Optional<? extends String> platformKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for a company's data connection.
         */
        public Builder dataConnectionId(String dataConnectionId) {
            Utils.checkNotNull(dataConnectionId, "dataConnectionId");
            this.dataConnectionId = Optional.ofNullable(dataConnectionId);
            return this;
        }

        /**
         * Unique identifier for a company's data connection.
         */
        public Builder dataConnectionId(Optional<? extends String> dataConnectionId) {
            Utils.checkNotNull(dataConnectionId, "dataConnectionId");
            this.dataConnectionId = dataConnectionId;
            return this;
        }

        /**
         * The current authorization status of the data connection.
         */
        public Builder newStatus(DataConnectionStatus newStatus) {
            Utils.checkNotNull(newStatus, "newStatus");
            this.newStatus = Optional.ofNullable(newStatus);
            return this;
        }

        /**
         * The current authorization status of the data connection.
         */
        public Builder newStatus(Optional<? extends DataConnectionStatus> newStatus) {
            Utils.checkNotNull(newStatus, "newStatus");
            this.newStatus = newStatus;
            return this;
        }

        /**
         * The current authorization status of the data connection.
         */
        public Builder oldStatus(DataConnectionStatus oldStatus) {
            Utils.checkNotNull(oldStatus, "oldStatus");
            this.oldStatus = Optional.ofNullable(oldStatus);
            return this;
        }

        /**
         * The current authorization status of the data connection.
         */
        public Builder oldStatus(Optional<? extends DataConnectionStatus> oldStatus) {
            Utils.checkNotNull(oldStatus, "oldStatus");
            this.oldStatus = oldStatus;
            return this;
        }

        /**
         * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
         */
        public Builder platformKey(String platformKey) {
            Utils.checkNotNull(platformKey, "platformKey");
            this.platformKey = Optional.ofNullable(platformKey);
            return this;
        }

        /**
         * A unique 4-letter key to represent a platform in each integration. View [accounting](https://docs.codat.io/integrations/accounting/overview#platform-keys), [banking](https://docs.codat.io/integrations/banking/overview#platform-keys), and [commerce](https://docs.codat.io/integrations/commerce/overview#platform-keys) platform keys.
         */
        public Builder platformKey(Optional<? extends String> platformKey) {
            Utils.checkNotNull(platformKey, "platformKey");
            this.platformKey = platformKey;
            return this;
        }
        
        public ConnectionStatusChangedWebhookData build() {
            return new ConnectionStatusChangedWebhookData(
                dataConnectionId,
                newStatus,
                oldStatus,
                platformKey);
        }
    }
}

