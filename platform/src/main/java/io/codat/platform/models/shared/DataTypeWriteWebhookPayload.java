/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class DataTypeWriteWebhookPayload {

    /**
     * Unique identifier for the uploaded attachment, null if no attachment uploaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachmentId")
    private JsonNullable<String> attachmentId;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completedOnDate")
    private Optional<String> completedOnDate;

    /**
     * Unique identifier for a company's data connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionId")
    private Optional<String> connectionId;

    /**
     * Unique identifier of the write request. This is also known as the push operation ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record")
    private Optional<? extends DataTypeWriteWebhookRecord> record;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceCompany")
    private Optional<? extends CompanyReference> referenceCompany;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedOnDate")
    private Optional<String> requestedOnDate;

    /**
     * The current status of the write request, which is the same as the push operation status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends WriteStatus> status;

    /**
     * Type of write request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends WriteType> type;

    @JsonCreator
    public DataTypeWriteWebhookPayload(
            @JsonProperty("attachmentId") JsonNullable<String> attachmentId,
            @JsonProperty("completedOnDate") Optional<String> completedOnDate,
            @JsonProperty("connectionId") Optional<String> connectionId,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("record") Optional<? extends DataTypeWriteWebhookRecord> record,
            @JsonProperty("referenceCompany") Optional<? extends CompanyReference> referenceCompany,
            @JsonProperty("requestedOnDate") Optional<String> requestedOnDate,
            @JsonProperty("status") Optional<? extends WriteStatus> status,
            @JsonProperty("type") Optional<? extends WriteType> type) {
        Utils.checkNotNull(attachmentId, "attachmentId");
        Utils.checkNotNull(completedOnDate, "completedOnDate");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(record, "record");
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        Utils.checkNotNull(requestedOnDate, "requestedOnDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(type, "type");
        this.attachmentId = attachmentId;
        this.completedOnDate = completedOnDate;
        this.connectionId = connectionId;
        this.id = id;
        this.record = record;
        this.referenceCompany = referenceCompany;
        this.requestedOnDate = requestedOnDate;
        this.status = status;
        this.type = type;
    }
    
    public DataTypeWriteWebhookPayload() {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for the uploaded attachment, null if no attachment uploaded.
     */
    @JsonIgnore
    public JsonNullable<String> attachmentId() {
        return attachmentId;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> completedOnDate() {
        return completedOnDate;
    }

    /**
     * Unique identifier for a company's data connection.
     */
    @JsonIgnore
    public Optional<String> connectionId() {
        return connectionId;
    }

    /**
     * Unique identifier of the write request. This is also known as the push operation ID.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataTypeWriteWebhookRecord> record() {
        return (Optional<DataTypeWriteWebhookRecord>) record;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyReference> referenceCompany() {
        return (Optional<CompanyReference>) referenceCompany;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> requestedOnDate() {
        return requestedOnDate;
    }

    /**
     * The current status of the write request, which is the same as the push operation status.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WriteStatus> status() {
        return (Optional<WriteStatus>) status;
    }

    /**
     * Type of write request.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WriteType> type() {
        return (Optional<WriteType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for the uploaded attachment, null if no attachment uploaded.
     */
    public DataTypeWriteWebhookPayload withAttachmentId(String attachmentId) {
        Utils.checkNotNull(attachmentId, "attachmentId");
        this.attachmentId = JsonNullable.of(attachmentId);
        return this;
    }

    /**
     * Unique identifier for the uploaded attachment, null if no attachment uploaded.
     */
    public DataTypeWriteWebhookPayload withAttachmentId(JsonNullable<String> attachmentId) {
        Utils.checkNotNull(attachmentId, "attachmentId");
        this.attachmentId = attachmentId;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public DataTypeWriteWebhookPayload withCompletedOnDate(String completedOnDate) {
        Utils.checkNotNull(completedOnDate, "completedOnDate");
        this.completedOnDate = Optional.ofNullable(completedOnDate);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public DataTypeWriteWebhookPayload withCompletedOnDate(Optional<String> completedOnDate) {
        Utils.checkNotNull(completedOnDate, "completedOnDate");
        this.completedOnDate = completedOnDate;
        return this;
    }

    /**
     * Unique identifier for a company's data connection.
     */
    public DataTypeWriteWebhookPayload withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = Optional.ofNullable(connectionId);
        return this;
    }

    /**
     * Unique identifier for a company's data connection.
     */
    public DataTypeWriteWebhookPayload withConnectionId(Optional<String> connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Unique identifier of the write request. This is also known as the push operation ID.
     */
    public DataTypeWriteWebhookPayload withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier of the write request. This is also known as the push operation ID.
     */
    public DataTypeWriteWebhookPayload withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public DataTypeWriteWebhookPayload withRecord(DataTypeWriteWebhookRecord record) {
        Utils.checkNotNull(record, "record");
        this.record = Optional.ofNullable(record);
        return this;
    }

    public DataTypeWriteWebhookPayload withRecord(Optional<? extends DataTypeWriteWebhookRecord> record) {
        Utils.checkNotNull(record, "record");
        this.record = record;
        return this;
    }

    public DataTypeWriteWebhookPayload withReferenceCompany(CompanyReference referenceCompany) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.referenceCompany = Optional.ofNullable(referenceCompany);
        return this;
    }

    public DataTypeWriteWebhookPayload withReferenceCompany(Optional<? extends CompanyReference> referenceCompany) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.referenceCompany = referenceCompany;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public DataTypeWriteWebhookPayload withRequestedOnDate(String requestedOnDate) {
        Utils.checkNotNull(requestedOnDate, "requestedOnDate");
        this.requestedOnDate = Optional.ofNullable(requestedOnDate);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public DataTypeWriteWebhookPayload withRequestedOnDate(Optional<String> requestedOnDate) {
        Utils.checkNotNull(requestedOnDate, "requestedOnDate");
        this.requestedOnDate = requestedOnDate;
        return this;
    }

    /**
     * The current status of the write request, which is the same as the push operation status.
     */
    public DataTypeWriteWebhookPayload withStatus(WriteStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The current status of the write request, which is the same as the push operation status.
     */
    public DataTypeWriteWebhookPayload withStatus(Optional<? extends WriteStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Type of write request.
     */
    public DataTypeWriteWebhookPayload withType(WriteType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Type of write request.
     */
    public DataTypeWriteWebhookPayload withType(Optional<? extends WriteType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataTypeWriteWebhookPayload other = (DataTypeWriteWebhookPayload) o;
        return 
            Objects.deepEquals(this.attachmentId, other.attachmentId) &&
            Objects.deepEquals(this.completedOnDate, other.completedOnDate) &&
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.record, other.record) &&
            Objects.deepEquals(this.referenceCompany, other.referenceCompany) &&
            Objects.deepEquals(this.requestedOnDate, other.requestedOnDate) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            attachmentId,
            completedOnDate,
            connectionId,
            id,
            record,
            referenceCompany,
            requestedOnDate,
            status,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataTypeWriteWebhookPayload.class,
                "attachmentId", attachmentId,
                "completedOnDate", completedOnDate,
                "connectionId", connectionId,
                "id", id,
                "record", record,
                "referenceCompany", referenceCompany,
                "requestedOnDate", requestedOnDate,
                "status", status,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> attachmentId = JsonNullable.undefined();
 
        private Optional<String> completedOnDate = Optional.empty();
 
        private Optional<String> connectionId = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends DataTypeWriteWebhookRecord> record = Optional.empty();
 
        private Optional<? extends CompanyReference> referenceCompany = Optional.empty();
 
        private Optional<String> requestedOnDate = Optional.empty();
 
        private Optional<? extends WriteStatus> status = Optional.empty();
 
        private Optional<? extends WriteType> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the uploaded attachment, null if no attachment uploaded.
         */
        public Builder attachmentId(String attachmentId) {
            Utils.checkNotNull(attachmentId, "attachmentId");
            this.attachmentId = JsonNullable.of(attachmentId);
            return this;
        }

        /**
         * Unique identifier for the uploaded attachment, null if no attachment uploaded.
         */
        public Builder attachmentId(JsonNullable<String> attachmentId) {
            Utils.checkNotNull(attachmentId, "attachmentId");
            this.attachmentId = attachmentId;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder completedOnDate(String completedOnDate) {
            Utils.checkNotNull(completedOnDate, "completedOnDate");
            this.completedOnDate = Optional.ofNullable(completedOnDate);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder completedOnDate(Optional<String> completedOnDate) {
            Utils.checkNotNull(completedOnDate, "completedOnDate");
            this.completedOnDate = completedOnDate;
            return this;
        }

        /**
         * Unique identifier for a company's data connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = Optional.ofNullable(connectionId);
            return this;
        }

        /**
         * Unique identifier for a company's data connection.
         */
        public Builder connectionId(Optional<String> connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * Unique identifier of the write request. This is also known as the push operation ID.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier of the write request. This is also known as the push operation ID.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder record(DataTypeWriteWebhookRecord record) {
            Utils.checkNotNull(record, "record");
            this.record = Optional.ofNullable(record);
            return this;
        }

        public Builder record(Optional<? extends DataTypeWriteWebhookRecord> record) {
            Utils.checkNotNull(record, "record");
            this.record = record;
            return this;
        }

        public Builder referenceCompany(CompanyReference referenceCompany) {
            Utils.checkNotNull(referenceCompany, "referenceCompany");
            this.referenceCompany = Optional.ofNullable(referenceCompany);
            return this;
        }

        public Builder referenceCompany(Optional<? extends CompanyReference> referenceCompany) {
            Utils.checkNotNull(referenceCompany, "referenceCompany");
            this.referenceCompany = referenceCompany;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder requestedOnDate(String requestedOnDate) {
            Utils.checkNotNull(requestedOnDate, "requestedOnDate");
            this.requestedOnDate = Optional.ofNullable(requestedOnDate);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder requestedOnDate(Optional<String> requestedOnDate) {
            Utils.checkNotNull(requestedOnDate, "requestedOnDate");
            this.requestedOnDate = requestedOnDate;
            return this;
        }

        /**
         * The current status of the write request, which is the same as the push operation status.
         */
        public Builder status(WriteStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The current status of the write request, which is the same as the push operation status.
         */
        public Builder status(Optional<? extends WriteStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Type of write request.
         */
        public Builder type(WriteType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Type of write request.
         */
        public Builder type(Optional<? extends WriteType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public DataTypeWriteWebhookPayload build() {
            return new DataTypeWriteWebhookPayload(
                attachmentId,
                completedOnDate,
                connectionId,
                id,
                record,
                referenceCompany,
                requestedOnDate,
                status,
                type);
        }
    }
}

