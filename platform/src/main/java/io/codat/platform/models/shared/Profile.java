/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.platform.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.platform.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Profile - Describes your Codat client instance
 */

public class Profile {

    /**
     * Alert or webhooks authorization header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alertAuthHeader")
    private Optional<? extends String> alertAuthHeader;

    /**
     * The API key for this Codat instance.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiKey")
    @Deprecated
    private Optional<? extends String> apiKey;

    /**
     * `True` if the company name has been confirmed.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confirmCompanyName")
    @Deprecated
    private Optional<? extends Boolean> confirmCompanyName;

    /**
     * Static url to your organization's icon.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconUrl")
    private Optional<? extends String> iconUrl;

    /**
     * Static url to your organization's logo.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logoUrl")
    private Optional<? extends String> logoUrl;

    /**
     * The name given to the instance.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The redirect URL pasted on to the SMB once Codat's [Hosted Link](https://docs.codat.io/auth-flow/authorize-hosted-link) has been completed by the SMB.
     */
    @JsonProperty("redirectUrl")
    private String redirectUrl;

    /**
     * A list of urls that are allowed to communicate with Codat. If empty any url is allowed to communicate with Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("whiteListUrls")
    private Optional<? extends java.util.List<String>> whiteListUrls;

    public Profile(
            @JsonProperty("alertAuthHeader") Optional<? extends String> alertAuthHeader,
            @JsonProperty("apiKey") Optional<? extends String> apiKey,
            @JsonProperty("confirmCompanyName") Optional<? extends Boolean> confirmCompanyName,
            @JsonProperty("iconUrl") Optional<? extends String> iconUrl,
            @JsonProperty("logoUrl") Optional<? extends String> logoUrl,
            @JsonProperty("name") String name,
            @JsonProperty("redirectUrl") String redirectUrl,
            @JsonProperty("whiteListUrls") Optional<? extends java.util.List<String>> whiteListUrls) {
        Utils.checkNotNull(alertAuthHeader, "alertAuthHeader");
        Utils.checkNotNull(apiKey, "apiKey");
        Utils.checkNotNull(confirmCompanyName, "confirmCompanyName");
        Utils.checkNotNull(iconUrl, "iconUrl");
        Utils.checkNotNull(logoUrl, "logoUrl");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        Utils.checkNotNull(whiteListUrls, "whiteListUrls");
        this.alertAuthHeader = alertAuthHeader;
        this.apiKey = apiKey;
        this.confirmCompanyName = confirmCompanyName;
        this.iconUrl = iconUrl;
        this.logoUrl = logoUrl;
        this.name = name;
        this.redirectUrl = redirectUrl;
        this.whiteListUrls = whiteListUrls;
    }

    /**
     * Alert or webhooks authorization header.
     */
    public Optional<? extends String> alertAuthHeader() {
        return alertAuthHeader;
    }

    /**
     * The API key for this Codat instance.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Optional<? extends String> apiKey() {
        return apiKey;
    }

    /**
     * `True` if the company name has been confirmed.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Optional<? extends Boolean> confirmCompanyName() {
        return confirmCompanyName;
    }

    /**
     * Static url to your organization's icon.
     */
    public Optional<? extends String> iconUrl() {
        return iconUrl;
    }

    /**
     * Static url to your organization's logo.
     */
    public Optional<? extends String> logoUrl() {
        return logoUrl;
    }

    /**
     * The name given to the instance.
     */
    public String name() {
        return name;
    }

    /**
     * The redirect URL pasted on to the SMB once Codat's [Hosted Link](https://docs.codat.io/auth-flow/authorize-hosted-link) has been completed by the SMB.
     */
    public String redirectUrl() {
        return redirectUrl;
    }

    /**
     * A list of urls that are allowed to communicate with Codat. If empty any url is allowed to communicate with Codat.
     */
    public Optional<? extends java.util.List<String>> whiteListUrls() {
        return whiteListUrls;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Alert or webhooks authorization header.
     */
    public Profile withAlertAuthHeader(String alertAuthHeader) {
        Utils.checkNotNull(alertAuthHeader, "alertAuthHeader");
        this.alertAuthHeader = Optional.ofNullable(alertAuthHeader);
        return this;
    }

    /**
     * Alert or webhooks authorization header.
     */
    public Profile withAlertAuthHeader(Optional<? extends String> alertAuthHeader) {
        Utils.checkNotNull(alertAuthHeader, "alertAuthHeader");
        this.alertAuthHeader = alertAuthHeader;
        return this;
    }

    /**
     * The API key for this Codat instance.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Profile withApiKey(String apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = Optional.ofNullable(apiKey);
        return this;
    }

    /**
     * The API key for this Codat instance.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Profile withApiKey(Optional<? extends String> apiKey) {
        Utils.checkNotNull(apiKey, "apiKey");
        this.apiKey = apiKey;
        return this;
    }

    /**
     * `True` if the company name has been confirmed.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Profile withConfirmCompanyName(boolean confirmCompanyName) {
        Utils.checkNotNull(confirmCompanyName, "confirmCompanyName");
        this.confirmCompanyName = Optional.ofNullable(confirmCompanyName);
        return this;
    }

    /**
     * `True` if the company name has been confirmed.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public Profile withConfirmCompanyName(Optional<? extends Boolean> confirmCompanyName) {
        Utils.checkNotNull(confirmCompanyName, "confirmCompanyName");
        this.confirmCompanyName = confirmCompanyName;
        return this;
    }

    /**
     * Static url to your organization's icon.
     */
    public Profile withIconUrl(String iconUrl) {
        Utils.checkNotNull(iconUrl, "iconUrl");
        this.iconUrl = Optional.ofNullable(iconUrl);
        return this;
    }

    /**
     * Static url to your organization's icon.
     */
    public Profile withIconUrl(Optional<? extends String> iconUrl) {
        Utils.checkNotNull(iconUrl, "iconUrl");
        this.iconUrl = iconUrl;
        return this;
    }

    /**
     * Static url to your organization's logo.
     */
    public Profile withLogoUrl(String logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = Optional.ofNullable(logoUrl);
        return this;
    }

    /**
     * Static url to your organization's logo.
     */
    public Profile withLogoUrl(Optional<? extends String> logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = logoUrl;
        return this;
    }

    /**
     * The name given to the instance.
     */
    public Profile withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The redirect URL pasted on to the SMB once Codat's [Hosted Link](https://docs.codat.io/auth-flow/authorize-hosted-link) has been completed by the SMB.
     */
    public Profile withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    /**
     * A list of urls that are allowed to communicate with Codat. If empty any url is allowed to communicate with Codat.
     */
    public Profile withWhiteListUrls(java.util.List<String> whiteListUrls) {
        Utils.checkNotNull(whiteListUrls, "whiteListUrls");
        this.whiteListUrls = Optional.ofNullable(whiteListUrls);
        return this;
    }

    /**
     * A list of urls that are allowed to communicate with Codat. If empty any url is allowed to communicate with Codat.
     */
    public Profile withWhiteListUrls(Optional<? extends java.util.List<String>> whiteListUrls) {
        Utils.checkNotNull(whiteListUrls, "whiteListUrls");
        this.whiteListUrls = whiteListUrls;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Profile other = (Profile) o;
        return 
            java.util.Objects.deepEquals(this.alertAuthHeader, other.alertAuthHeader) &&
            java.util.Objects.deepEquals(this.apiKey, other.apiKey) &&
            java.util.Objects.deepEquals(this.confirmCompanyName, other.confirmCompanyName) &&
            java.util.Objects.deepEquals(this.iconUrl, other.iconUrl) &&
            java.util.Objects.deepEquals(this.logoUrl, other.logoUrl) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.redirectUrl, other.redirectUrl) &&
            java.util.Objects.deepEquals(this.whiteListUrls, other.whiteListUrls);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            alertAuthHeader,
            apiKey,
            confirmCompanyName,
            iconUrl,
            logoUrl,
            name,
            redirectUrl,
            whiteListUrls);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Profile.class,
                "alertAuthHeader", alertAuthHeader,
                "apiKey", apiKey,
                "confirmCompanyName", confirmCompanyName,
                "iconUrl", iconUrl,
                "logoUrl", logoUrl,
                "name", name,
                "redirectUrl", redirectUrl,
                "whiteListUrls", whiteListUrls);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> alertAuthHeader = Optional.empty();
 
        @Deprecated
        private Optional<? extends String> apiKey = Optional.empty();
 
        @Deprecated
        private Optional<? extends Boolean> confirmCompanyName = Optional.empty();
 
        private Optional<? extends String> iconUrl = Optional.empty();
 
        private Optional<? extends String> logoUrl = Optional.empty();
 
        private String name;
 
        private String redirectUrl;
 
        private Optional<? extends java.util.List<String>> whiteListUrls = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Alert or webhooks authorization header.
         */
        public Builder alertAuthHeader(String alertAuthHeader) {
            Utils.checkNotNull(alertAuthHeader, "alertAuthHeader");
            this.alertAuthHeader = Optional.ofNullable(alertAuthHeader);
            return this;
        }

        /**
         * Alert or webhooks authorization header.
         */
        public Builder alertAuthHeader(Optional<? extends String> alertAuthHeader) {
            Utils.checkNotNull(alertAuthHeader, "alertAuthHeader");
            this.alertAuthHeader = alertAuthHeader;
            return this;
        }

        /**
         * The API key for this Codat instance.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder apiKey(String apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = Optional.ofNullable(apiKey);
            return this;
        }

        /**
         * The API key for this Codat instance.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder apiKey(Optional<? extends String> apiKey) {
            Utils.checkNotNull(apiKey, "apiKey");
            this.apiKey = apiKey;
            return this;
        }

        /**
         * `True` if the company name has been confirmed.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder confirmCompanyName(boolean confirmCompanyName) {
            Utils.checkNotNull(confirmCompanyName, "confirmCompanyName");
            this.confirmCompanyName = Optional.ofNullable(confirmCompanyName);
            return this;
        }

        /**
         * `True` if the company name has been confirmed.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder confirmCompanyName(Optional<? extends Boolean> confirmCompanyName) {
            Utils.checkNotNull(confirmCompanyName, "confirmCompanyName");
            this.confirmCompanyName = confirmCompanyName;
            return this;
        }

        /**
         * Static url to your organization's icon.
         */
        public Builder iconUrl(String iconUrl) {
            Utils.checkNotNull(iconUrl, "iconUrl");
            this.iconUrl = Optional.ofNullable(iconUrl);
            return this;
        }

        /**
         * Static url to your organization's icon.
         */
        public Builder iconUrl(Optional<? extends String> iconUrl) {
            Utils.checkNotNull(iconUrl, "iconUrl");
            this.iconUrl = iconUrl;
            return this;
        }

        /**
         * Static url to your organization's logo.
         */
        public Builder logoUrl(String logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = Optional.ofNullable(logoUrl);
            return this;
        }

        /**
         * Static url to your organization's logo.
         */
        public Builder logoUrl(Optional<? extends String> logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = logoUrl;
            return this;
        }

        /**
         * The name given to the instance.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The redirect URL pasted on to the SMB once Codat's [Hosted Link](https://docs.codat.io/auth-flow/authorize-hosted-link) has been completed by the SMB.
         */
        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * A list of urls that are allowed to communicate with Codat. If empty any url is allowed to communicate with Codat.
         */
        public Builder whiteListUrls(java.util.List<String> whiteListUrls) {
            Utils.checkNotNull(whiteListUrls, "whiteListUrls");
            this.whiteListUrls = Optional.ofNullable(whiteListUrls);
            return this;
        }

        /**
         * A list of urls that are allowed to communicate with Codat. If empty any url is allowed to communicate with Codat.
         */
        public Builder whiteListUrls(Optional<? extends java.util.List<String>> whiteListUrls) {
            Utils.checkNotNull(whiteListUrls, "whiteListUrls");
            this.whiteListUrls = whiteListUrls;
            return this;
        }
        
        public Profile build() {
            return new Profile(
                alertAuthHeader,
                apiKey,
                confirmCompanyName,
                iconUrl,
                logoUrl,
                name,
                redirectUrl,
                whiteListUrls);
        }
    }
}

