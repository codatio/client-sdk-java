/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.platform.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.platform.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class WebhookConsumers {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends java.util.List<WebhookConsumer>> results;

    @JsonCreator
    public WebhookConsumers(
            @JsonProperty("results") Optional<? extends java.util.List<WebhookConsumer>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
    }
    
    public WebhookConsumers() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<? extends java.util.List<WebhookConsumer>> results() {
        return results;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WebhookConsumers withResults(java.util.List<WebhookConsumer> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public WebhookConsumers withResults(Optional<? extends java.util.List<WebhookConsumer>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookConsumers other = (WebhookConsumers) o;
        return 
            java.util.Objects.deepEquals(this.results, other.results);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            results);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookConsumers.class,
                "results", results);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<WebhookConsumer>> results = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder results(java.util.List<WebhookConsumer> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends java.util.List<WebhookConsumer>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }
        
        public WebhookConsumers build() {
            return new WebhookConsumers(
                results);
        }
    }
}

