/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ConnectionWebhookPayload {

    /**
     * ﻿A connection represents a [company's](https://docs.codat.io/platform-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.
     * 
     * A company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:
     * 
     * - [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.
     * - [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.
     * - [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.
     * Any combination of accounting, banking, and commerce data connections is allowed.
     * 
     * Before you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection")
    private Optional<? extends Connection> connection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceCompany")
    private Optional<? extends CompanyReference> referenceCompany;

    @JsonCreator
    public ConnectionWebhookPayload(
            @JsonProperty("connection") Optional<? extends Connection> connection,
            @JsonProperty("referenceCompany") Optional<? extends CompanyReference> referenceCompany) {
        Utils.checkNotNull(connection, "connection");
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.connection = connection;
        this.referenceCompany = referenceCompany;
    }
    
    public ConnectionWebhookPayload() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * ﻿A connection represents a [company's](https://docs.codat.io/platform-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.
     * 
     * A company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:
     * 
     * - [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.
     * - [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.
     * - [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.
     * Any combination of accounting, banking, and commerce data connections is allowed.
     * 
     * Before you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Connection> connection() {
        return (Optional<Connection>) connection;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyReference> referenceCompany() {
        return (Optional<CompanyReference>) referenceCompany;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ﻿A connection represents a [company's](https://docs.codat.io/platform-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.
     * 
     * A company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:
     * 
     * - [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.
     * - [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.
     * - [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.
     * Any combination of accounting, banking, and commerce data connections is allowed.
     * 
     * Before you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).
     */
    public ConnectionWebhookPayload withConnection(Connection connection) {
        Utils.checkNotNull(connection, "connection");
        this.connection = Optional.ofNullable(connection);
        return this;
    }

    /**
     * ﻿A connection represents a [company's](https://docs.codat.io/platform-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.
     * 
     * A company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:
     * 
     * - [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.
     * - [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.
     * - [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.
     * Any combination of accounting, banking, and commerce data connections is allowed.
     * 
     * Before you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).
     */
    public ConnectionWebhookPayload withConnection(Optional<? extends Connection> connection) {
        Utils.checkNotNull(connection, "connection");
        this.connection = connection;
        return this;
    }

    public ConnectionWebhookPayload withReferenceCompany(CompanyReference referenceCompany) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.referenceCompany = Optional.ofNullable(referenceCompany);
        return this;
    }

    public ConnectionWebhookPayload withReferenceCompany(Optional<? extends CompanyReference> referenceCompany) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.referenceCompany = referenceCompany;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConnectionWebhookPayload other = (ConnectionWebhookPayload) o;
        return 
            Objects.deepEquals(this.connection, other.connection) &&
            Objects.deepEquals(this.referenceCompany, other.referenceCompany);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connection,
            referenceCompany);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConnectionWebhookPayload.class,
                "connection", connection,
                "referenceCompany", referenceCompany);
    }
    
    public final static class Builder {
 
        private Optional<? extends Connection> connection = Optional.empty();
 
        private Optional<? extends CompanyReference> referenceCompany = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ﻿A connection represents a [company's](https://docs.codat.io/platform-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.
         * 
         * A company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:
         * 
         * - [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.
         * - [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.
         * - [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.
         * Any combination of accounting, banking, and commerce data connections is allowed.
         * 
         * Before you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).
         */
        public Builder connection(Connection connection) {
            Utils.checkNotNull(connection, "connection");
            this.connection = Optional.ofNullable(connection);
            return this;
        }

        /**
         * ﻿A connection represents a [company's](https://docs.codat.io/platform-api#/schemas/Company) connection to a data source and allows you to synchronize data (pull and/or push) with that source.
         * 
         * A company can have multiple data connections depending on the type of data source it is connecting to. For example, a single company can link to:
         * 
         * - [Accounting data](https://docs.codat.io/accounting-api/overview) - 1 active connection.
         * - [Banking data](https://docs.codat.io/banking-api/overview) - Multiple active connections.
         * - [Commerce data](https://docs.codat.io/commerce-api/overview) - Multiple active connections.
         * Any combination of accounting, banking, and commerce data connections is allowed.
         * 
         * Before you can use a data connection to pull or push data, the company must grant you access to their business data by [linking the connection](https://docs.codat.io/auth-flow/overview).
         */
        public Builder connection(Optional<? extends Connection> connection) {
            Utils.checkNotNull(connection, "connection");
            this.connection = connection;
            return this;
        }

        public Builder referenceCompany(CompanyReference referenceCompany) {
            Utils.checkNotNull(referenceCompany, "referenceCompany");
            this.referenceCompany = Optional.ofNullable(referenceCompany);
            return this;
        }

        public Builder referenceCompany(Optional<? extends CompanyReference> referenceCompany) {
            Utils.checkNotNull(referenceCompany, "referenceCompany");
            this.referenceCompany = referenceCompany;
            return this;
        }
        
        public ConnectionWebhookPayload build() {
            return new ConnectionWebhookPayload(
                connection,
                referenceCompany);
        }
    }
}

