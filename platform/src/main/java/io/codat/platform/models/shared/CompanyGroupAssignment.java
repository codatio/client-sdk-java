/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CompanyGroupAssignment {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupId")
    private Optional<String> groupId;

    @JsonCreator
    public CompanyGroupAssignment(
            @JsonProperty("groupId") Optional<String> groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = groupId;
    }
    
    public CompanyGroupAssignment() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> groupId() {
        return groupId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CompanyGroupAssignment withGroupId(String groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = Optional.ofNullable(groupId);
        return this;
    }

    public CompanyGroupAssignment withGroupId(Optional<String> groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = groupId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyGroupAssignment other = (CompanyGroupAssignment) o;
        return 
            Objects.deepEquals(this.groupId, other.groupId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            groupId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyGroupAssignment.class,
                "groupId", groupId);
    }
    
    public final static class Builder {
 
        private Optional<String> groupId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder groupId(String groupId) {
            Utils.checkNotNull(groupId, "groupId");
            this.groupId = Optional.ofNullable(groupId);
            return this;
        }

        public Builder groupId(Optional<String> groupId) {
            Utils.checkNotNull(groupId, "groupId");
            this.groupId = groupId;
            return this;
        }
        
        public CompanyGroupAssignment build() {
            return new CompanyGroupAssignment(
                groupId);
        }
    }
}

