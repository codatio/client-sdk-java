/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * CompanyAccessToken - Details of the access token provisioned for a company.
 */

public class CompanyAccessToken {

    /**
     * The access token for the company.
     */
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * The number of seconds until the access token expires.
     */
    @JsonProperty("expiresIn")
    private long expiresIn;

    /**
     * The type of token.
     */
    @JsonProperty("tokenType")
    private String tokenType;

    @JsonCreator
    public CompanyAccessToken(
            @JsonProperty("accessToken") String accessToken,
            @JsonProperty("expiresIn") long expiresIn,
            @JsonProperty("tokenType") String tokenType) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(expiresIn, "expiresIn");
        Utils.checkNotNull(tokenType, "tokenType");
        this.accessToken = accessToken;
        this.expiresIn = expiresIn;
        this.tokenType = tokenType;
    }

    /**
     * The access token for the company.
     */
    @JsonIgnore
    public String accessToken() {
        return accessToken;
    }

    /**
     * The number of seconds until the access token expires.
     */
    @JsonIgnore
    public long expiresIn() {
        return expiresIn;
    }

    /**
     * The type of token.
     */
    @JsonIgnore
    public String tokenType() {
        return tokenType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The access token for the company.
     */
    public CompanyAccessToken withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The number of seconds until the access token expires.
     */
    public CompanyAccessToken withExpiresIn(long expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = expiresIn;
        return this;
    }

    /**
     * The type of token.
     */
    public CompanyAccessToken withTokenType(String tokenType) {
        Utils.checkNotNull(tokenType, "tokenType");
        this.tokenType = tokenType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyAccessToken other = (CompanyAccessToken) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.expiresIn, other.expiresIn) &&
            Objects.deepEquals(this.tokenType, other.tokenType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            expiresIn,
            tokenType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyAccessToken.class,
                "accessToken", accessToken,
                "expiresIn", expiresIn,
                "tokenType", tokenType);
    }
    
    public final static class Builder {
 
        private String accessToken;
 
        private Long expiresIn;
 
        private String tokenType;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The access token for the company.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The number of seconds until the access token expires.
         */
        public Builder expiresIn(long expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * The type of token.
         */
        public Builder tokenType(String tokenType) {
            Utils.checkNotNull(tokenType, "tokenType");
            this.tokenType = tokenType;
            return this;
        }
        
        public CompanyAccessToken build() {
            return new CompanyAccessToken(
                accessToken,
                expiresIn,
                tokenType);
        }
    }
}

