/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.platform.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * SupplementalDataSourceConfiguration - The client's defined name for the object.
 */

public class SupplementalDataSourceConfiguration {

    /**
     * The underlying endpoint of the source system which the configuration is targeting. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSource")
    private Optional<String> dataSource;

    /**
     * The additional properties that are required when pulling records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pullData")
    private Optional<? extends Map<String, String>> pullData;

    /**
     * The additional properties that are required to create and/or update records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushData")
    private Optional<? extends Map<String, String>> pushData;

    @JsonCreator
    public SupplementalDataSourceConfiguration(
            @JsonProperty("dataSource") Optional<String> dataSource,
            @JsonProperty("pullData") Optional<? extends Map<String, String>> pullData,
            @JsonProperty("pushData") Optional<? extends Map<String, String>> pushData) {
        Utils.checkNotNull(dataSource, "dataSource");
        Utils.checkNotNull(pullData, "pullData");
        Utils.checkNotNull(pushData, "pushData");
        this.dataSource = dataSource;
        this.pullData = pullData;
        this.pushData = pushData;
    }
    
    public SupplementalDataSourceConfiguration() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The underlying endpoint of the source system which the configuration is targeting. 
     */
    @JsonIgnore
    public Optional<String> dataSource() {
        return dataSource;
    }

    /**
     * The additional properties that are required when pulling records.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> pullData() {
        return (Optional<Map<String, String>>) pullData;
    }

    /**
     * The additional properties that are required to create and/or update records.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> pushData() {
        return (Optional<Map<String, String>>) pushData;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The underlying endpoint of the source system which the configuration is targeting. 
     */
    public SupplementalDataSourceConfiguration withDataSource(String dataSource) {
        Utils.checkNotNull(dataSource, "dataSource");
        this.dataSource = Optional.ofNullable(dataSource);
        return this;
    }

    /**
     * The underlying endpoint of the source system which the configuration is targeting. 
     */
    public SupplementalDataSourceConfiguration withDataSource(Optional<String> dataSource) {
        Utils.checkNotNull(dataSource, "dataSource");
        this.dataSource = dataSource;
        return this;
    }

    /**
     * The additional properties that are required when pulling records.
     */
    public SupplementalDataSourceConfiguration withPullData(Map<String, String> pullData) {
        Utils.checkNotNull(pullData, "pullData");
        this.pullData = Optional.ofNullable(pullData);
        return this;
    }

    /**
     * The additional properties that are required when pulling records.
     */
    public SupplementalDataSourceConfiguration withPullData(Optional<? extends Map<String, String>> pullData) {
        Utils.checkNotNull(pullData, "pullData");
        this.pullData = pullData;
        return this;
    }

    /**
     * The additional properties that are required to create and/or update records.
     */
    public SupplementalDataSourceConfiguration withPushData(Map<String, String> pushData) {
        Utils.checkNotNull(pushData, "pushData");
        this.pushData = Optional.ofNullable(pushData);
        return this;
    }

    /**
     * The additional properties that are required to create and/or update records.
     */
    public SupplementalDataSourceConfiguration withPushData(Optional<? extends Map<String, String>> pushData) {
        Utils.checkNotNull(pushData, "pushData");
        this.pushData = pushData;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupplementalDataSourceConfiguration other = (SupplementalDataSourceConfiguration) o;
        return 
            Objects.deepEquals(this.dataSource, other.dataSource) &&
            Objects.deepEquals(this.pullData, other.pullData) &&
            Objects.deepEquals(this.pushData, other.pushData);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dataSource,
            pullData,
            pushData);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SupplementalDataSourceConfiguration.class,
                "dataSource", dataSource,
                "pullData", pullData,
                "pushData", pushData);
    }
    
    public final static class Builder {
 
        private Optional<String> dataSource = Optional.empty();
 
        private Optional<? extends Map<String, String>> pullData = Optional.empty();
 
        private Optional<? extends Map<String, String>> pushData = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The underlying endpoint of the source system which the configuration is targeting. 
         */
        public Builder dataSource(String dataSource) {
            Utils.checkNotNull(dataSource, "dataSource");
            this.dataSource = Optional.ofNullable(dataSource);
            return this;
        }

        /**
         * The underlying endpoint of the source system which the configuration is targeting. 
         */
        public Builder dataSource(Optional<String> dataSource) {
            Utils.checkNotNull(dataSource, "dataSource");
            this.dataSource = dataSource;
            return this;
        }

        /**
         * The additional properties that are required when pulling records.
         */
        public Builder pullData(Map<String, String> pullData) {
            Utils.checkNotNull(pullData, "pullData");
            this.pullData = Optional.ofNullable(pullData);
            return this;
        }

        /**
         * The additional properties that are required when pulling records.
         */
        public Builder pullData(Optional<? extends Map<String, String>> pullData) {
            Utils.checkNotNull(pullData, "pullData");
            this.pullData = pullData;
            return this;
        }

        /**
         * The additional properties that are required to create and/or update records.
         */
        public Builder pushData(Map<String, String> pushData) {
            Utils.checkNotNull(pushData, "pushData");
            this.pushData = Optional.ofNullable(pushData);
            return this;
        }

        /**
         * The additional properties that are required to create and/or update records.
         */
        public Builder pushData(Optional<? extends Map<String, String>> pushData) {
            Utils.checkNotNull(pushData, "pushData");
            this.pushData = pushData;
            return this;
        }
        
        public SupplementalDataSourceConfiguration build() {
            return new SupplementalDataSourceConfiguration(
                dataSource,
                pullData,
                pushData);
        }
    }
}

