/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.platform.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.platform.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class BrandingImage {

    /**
     * Image reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private Optional<? extends ImageReference> image;

    public BrandingImage(
            @JsonProperty("image") Optional<? extends ImageReference> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
    }

    /**
     * Image reference.
     */
    public Optional<? extends ImageReference> image() {
        return image;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Image reference.
     */
    public BrandingImage withImage(ImageReference image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }
    
    /**
     * Image reference.
     */
    public BrandingImage withImage(Optional<? extends ImageReference> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BrandingImage other = (BrandingImage) o;
        return 
            java.util.Objects.deepEquals(this.image, other.image);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            image);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BrandingImage.class,
                "image", image);
    }
    
    public final static class Builder {
 
        private Optional<? extends ImageReference> image = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Image reference.
         */
        public Builder image(ImageReference image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }
        
        /**
         * Image reference.
         */
        public Builder image(Optional<? extends ImageReference> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }        
        
        public BrandingImage build() {
            return new BrandingImage(
                image);
        }
    }
}

