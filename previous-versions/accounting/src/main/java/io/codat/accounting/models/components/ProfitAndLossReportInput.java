/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ProfitAndLossReportInput - &gt; **Language tip:** Profit and loss statement is also referred to as **income statement** under US GAAP (Generally Accepted Accounting Principles).
 * 
 * &gt; View the coverage for profit and loss in the &lt;a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&amp;dataType=profitAndLoss" target="_blank"&gt;Data coverage explorer&lt;/a&gt;.
 * 
 * ## Overview
 * 
 * The purpose of a profit and loss report is to present the financial performance of a company over a specified time period.
 * 
 * A profit and loss report shows a company's total income and expenses for a specified period of time and whether a profit or loss has been made.
 * 
 * &gt; **Profit and loss or balance sheet?**  
 * &gt; Profit and loss reports summarise the total revenue, expenses, and profit or loss over a specified time period. A balance sheet report presents all assets, liability, and equity for a given date.
 * 
 * 
 * **Structure of this report**  
 * This report will reflect the structure and line descriptions that the business has set in their own accounting software.
 * 
 * **History**  
 * By default, Codat pulls (up to) 24 months of profit and loss history for a company. You can adjust this to fetch more history, where available, by updating the `monthsToSync` value for `profitAndLoss` on the [data type settings endpoint](https://docs.codat.io/codat-api#/operations/post-profile-syncSettings).
 * 
 * **Want to pull this in a standardised structure?**  
 * Our [Enhanced Financials](https://docs.codat.io/lending/features/financial-statements-overview) endpoints provide the same report under standardized headings, allowing you to pull it in the same format for all of your business customers.
 */

public class ProfitAndLossReportInput {

    /**
     * Base currency of the company in which the profit and loss report is presented.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earliestAvailableMonth")
    private Optional<String> earliestAvailableMonth;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mostRecentAvailableMonth")
    private Optional<String> mostRecentAvailableMonth;

    /**
     * The basis of a report.
     */
    @JsonProperty("reportBasis")
    private ReportBasis reportBasis;

    /**
     * An array of profit and loss reports.
     */
    @JsonProperty("reports")
    private List<ProfitAndLossReport> reports;

    @JsonCreator
    public ProfitAndLossReportInput(
            @JsonProperty("currency") String currency,
            @JsonProperty("earliestAvailableMonth") Optional<String> earliestAvailableMonth,
            @JsonProperty("mostRecentAvailableMonth") Optional<String> mostRecentAvailableMonth,
            @JsonProperty("reportBasis") ReportBasis reportBasis,
            @JsonProperty("reports") List<ProfitAndLossReport> reports) {
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(earliestAvailableMonth, "earliestAvailableMonth");
        Utils.checkNotNull(mostRecentAvailableMonth, "mostRecentAvailableMonth");
        Utils.checkNotNull(reportBasis, "reportBasis");
        Utils.checkNotNull(reports, "reports");
        this.currency = currency;
        this.earliestAvailableMonth = earliestAvailableMonth;
        this.mostRecentAvailableMonth = mostRecentAvailableMonth;
        this.reportBasis = reportBasis;
        this.reports = reports;
    }
    
    public ProfitAndLossReportInput(
            String currency,
            ReportBasis reportBasis,
            List<ProfitAndLossReport> reports) {
        this(currency, Optional.empty(), Optional.empty(), reportBasis, reports);
    }

    /**
     * Base currency of the company in which the profit and loss report is presented.
     */
    @JsonIgnore
    public String currency() {
        return currency;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> earliestAvailableMonth() {
        return earliestAvailableMonth;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> mostRecentAvailableMonth() {
        return mostRecentAvailableMonth;
    }

    /**
     * The basis of a report.
     */
    @JsonIgnore
    public ReportBasis reportBasis() {
        return reportBasis;
    }

    /**
     * An array of profit and loss reports.
     */
    @JsonIgnore
    public List<ProfitAndLossReport> reports() {
        return reports;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Base currency of the company in which the profit and loss report is presented.
     */
    public ProfitAndLossReportInput withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ProfitAndLossReportInput withEarliestAvailableMonth(String earliestAvailableMonth) {
        Utils.checkNotNull(earliestAvailableMonth, "earliestAvailableMonth");
        this.earliestAvailableMonth = Optional.ofNullable(earliestAvailableMonth);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ProfitAndLossReportInput withEarliestAvailableMonth(Optional<String> earliestAvailableMonth) {
        Utils.checkNotNull(earliestAvailableMonth, "earliestAvailableMonth");
        this.earliestAvailableMonth = earliestAvailableMonth;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ProfitAndLossReportInput withMostRecentAvailableMonth(String mostRecentAvailableMonth) {
        Utils.checkNotNull(mostRecentAvailableMonth, "mostRecentAvailableMonth");
        this.mostRecentAvailableMonth = Optional.ofNullable(mostRecentAvailableMonth);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ProfitAndLossReportInput withMostRecentAvailableMonth(Optional<String> mostRecentAvailableMonth) {
        Utils.checkNotNull(mostRecentAvailableMonth, "mostRecentAvailableMonth");
        this.mostRecentAvailableMonth = mostRecentAvailableMonth;
        return this;
    }

    /**
     * The basis of a report.
     */
    public ProfitAndLossReportInput withReportBasis(ReportBasis reportBasis) {
        Utils.checkNotNull(reportBasis, "reportBasis");
        this.reportBasis = reportBasis;
        return this;
    }

    /**
     * An array of profit and loss reports.
     */
    public ProfitAndLossReportInput withReports(List<ProfitAndLossReport> reports) {
        Utils.checkNotNull(reports, "reports");
        this.reports = reports;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProfitAndLossReportInput other = (ProfitAndLossReportInput) o;
        return 
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.earliestAvailableMonth, other.earliestAvailableMonth) &&
            Objects.deepEquals(this.mostRecentAvailableMonth, other.mostRecentAvailableMonth) &&
            Objects.deepEquals(this.reportBasis, other.reportBasis) &&
            Objects.deepEquals(this.reports, other.reports);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            currency,
            earliestAvailableMonth,
            mostRecentAvailableMonth,
            reportBasis,
            reports);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProfitAndLossReportInput.class,
                "currency", currency,
                "earliestAvailableMonth", earliestAvailableMonth,
                "mostRecentAvailableMonth", mostRecentAvailableMonth,
                "reportBasis", reportBasis,
                "reports", reports);
    }
    
    public final static class Builder {
 
        private String currency;
 
        private Optional<String> earliestAvailableMonth = Optional.empty();
 
        private Optional<String> mostRecentAvailableMonth = Optional.empty();
 
        private ReportBasis reportBasis;
 
        private List<ProfitAndLossReport> reports;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Base currency of the company in which the profit and loss report is presented.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder earliestAvailableMonth(String earliestAvailableMonth) {
            Utils.checkNotNull(earliestAvailableMonth, "earliestAvailableMonth");
            this.earliestAvailableMonth = Optional.ofNullable(earliestAvailableMonth);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder earliestAvailableMonth(Optional<String> earliestAvailableMonth) {
            Utils.checkNotNull(earliestAvailableMonth, "earliestAvailableMonth");
            this.earliestAvailableMonth = earliestAvailableMonth;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder mostRecentAvailableMonth(String mostRecentAvailableMonth) {
            Utils.checkNotNull(mostRecentAvailableMonth, "mostRecentAvailableMonth");
            this.mostRecentAvailableMonth = Optional.ofNullable(mostRecentAvailableMonth);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder mostRecentAvailableMonth(Optional<String> mostRecentAvailableMonth) {
            Utils.checkNotNull(mostRecentAvailableMonth, "mostRecentAvailableMonth");
            this.mostRecentAvailableMonth = mostRecentAvailableMonth;
            return this;
        }

        /**
         * The basis of a report.
         */
        public Builder reportBasis(ReportBasis reportBasis) {
            Utils.checkNotNull(reportBasis, "reportBasis");
            this.reportBasis = reportBasis;
            return this;
        }

        /**
         * An array of profit and loss reports.
         */
        public Builder reports(List<ProfitAndLossReport> reports) {
            Utils.checkNotNull(reports, "reports");
            this.reports = reports;
            return this;
        }
        
        public ProfitAndLossReportInput build() {
            return new ProfitAndLossReportInput(
                currency,
                earliestAvailableMonth,
                mostRecentAvailableMonth,
                reportBasis,
                reports);
        }
    }
}

