/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting;

import io.codat.accounting.models.operations.SDKMethodInterfaces.*;
import io.codat.accounting.utils.HTTPClient;
import io.codat.accounting.utils.RetryConfig;
import io.codat.accounting.utils.SpeakeasyHTTPClient;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

/**
 * Accounting API: &gt; ### New to Codat?
 * &gt;
 * &gt; Our Accounting API reference is relevant only to our existing clients.
 * &gt; Please reach out to your Codat contact so that we can find the right product for you.
 * 
 * A flexible API for pulling accounting data, normalized and aggregated from 20 accounting integrations.
 * 
 * Standardize how you connect to your customersâ€™ accounting software. View, create, update, and delete data in the same way for all the leading accounting software.
 * 
 * &lt;!-- Start Codat Tags Table --&gt;
 * ## Endpoints
 * 
 * | Endpoints | Description |
 * | :- |:- |
 * | Accounts | Access standardized Accounts from linked accounting software. |
 * | Account transactions | Access standardized Account transactions from linked accounting software. |
 * | Bank accounts | Access standardized Bank accounts from linked accounting software. |
 * | Bank account transactions | Access standardized Bank transactions for bank accounts from linked accounting software. |
 * | Bills | Access standardized Bills from linked accounting software. |
 * | Bill credit notes | Access standardized Bill credit notes from linked accounting software. |
 * | Bill payments | Access standardized Bill payments from linked accounting software. |
 * | Credit notes | Access standardized Credit notes from linked accounting software. |
 * | Customers | Access standardized Customers from linked accounting software. |
 * | Direct costs | Access standardized Direct costs from linked accounting software. |
 * | Direct incomes | Access standardized Direct incomes from linked accounting software. |
 * | Company info | Access standardized Company info from linked accounting software. |
 * | Invoices | Access standardized Invoices from linked accounting software. |
 * | Item receipts | Access standardized Item receipts from linked accounting software. |
 * | Items | Access standardized Items from linked accounting software. |
 * | Journals | Access standardized Journals from linked accounting software. |
 * | Journal entries | Access standardized Journal entries from linked accounting software. |
 * | Payments | Access standardized Payments from linked accounting software. |
 * | Payment methods | Access standardized Payment methods from linked accounting software. |
 * | Purchase orders | Access standardized Purchase orders from linked accounting software. |
 * | Sales orders | Access standardized Sales orders from linked accounting software. |
 * | Suppliers | Access standardized Suppliers from linked accounting software. |
 * | Tax rates | Access standardized Tax rates from linked accounting software. |
 * | Tracking categories | Access standardized Tracking categories from linked accounting software. |
 * | Transfers | Access standardized Transfers from linked accounting software. |
 * | Reports | Access standardized Reports from linked accounting software. |
 * &lt;!-- End Codat Tags Table --&gt;
 * 
 * [Read more...](https://docs.codat.io/accounting-api/overview)
 * 
 * [See our OpenAPI spec](https://github.com/codatio/oas)
 */
public class CodatAccounting {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * Production
         */
        "https://api.codat.io",
    };

    /**
     * Access standardized Account transactions from linked accounting software.
     */
    private final AccountTransactions accountTransactions;

    /**
     * Access standardized Bank accounts from linked accounting software.
     */
    private final BankAccounts bankAccounts;

    /**
     * Access standardized Bank transactions for bank accounts from linked accounting software.
     */
    private final BankAccountTransactions bankAccountTransactions;

    /**
     * Access standardized Bills from linked accounting software.
     */
    private final Bills bills;

    /**
     * Access standardized Customers from linked accounting software.
     */
    private final Customers customers;

    /**
     * Access standardized Direct costs from linked accounting software.
     */
    private final DirectCosts directCosts;

    /**
     * Access standardized Direct incomes from linked accounting software.
     */
    private final DirectIncomes directIncomes;

    /**
     * Access standardized Invoices from linked accounting software.
     */
    private final Invoices invoices;

    /**
     * Access standardized Item receipts from linked accounting software.
     */
    private final ItemReceipts itemReceipts;

    /**
     * Access standardized Payments from linked accounting software.
     */
    private final Payments payments;

    /**
     * Access standardized Purchase orders from linked accounting software.
     */
    private final PurchaseOrders purchaseOrders;

    /**
     * Access standardized Suppliers from linked accounting software.
     */
    private final Suppliers suppliers;

    /**
     * Access standardized Transfers from linked accounting software.
     */
    private final Transfers transfers;

    /**
     * Access standardized Bill credit notes from linked accounting software.
     */
    private final BillCreditNotes billCreditNotes;

    /**
     * Access standardized Bill payments from linked accounting software.
     */
    private final BillPayments billPayments;

    /**
     * Access standardized Accounts from linked accounting software.
     */
    private final Accounts accounts;

    /**
     * Access standardized Credit notes from linked accounting software.
     */
    private final CreditNotes creditNotes;

    /**
     * Access standardized Items from linked accounting software.
     */
    private final Items items;

    /**
     * Access standardized Journal entries from linked accounting software.
     */
    private final JournalEntries journalEntries;

    /**
     * Access standardized Journals from linked accounting software.
     */
    private final Journals journals;

    /**
     * Access standardized Reports from linked accounting software.
     */
    private final Reports reports;

    /**
     * Access standardized Company info from linked accounting software.
     */
    private final CompanyInfo companyInfo;

    /**
     * Access standardized Payment methods from linked accounting software.
     */
    private final PaymentMethods paymentMethods;

    /**
     * Access standardized Sales orders from linked accounting software.
     */
    private final SalesOrders salesOrders;

    /**
     * Access standardized Tax rates from linked accounting software.
     */
    private final TaxRates taxRates;

    /**
     * Access standardized Tracking categories from linked accounting software.
     */
    private final TrackingCategories trackingCategories;

    /**
     * Access standardized Account transactions from linked accounting software.
     */
    public AccountTransactions accountTransactions() {
        return accountTransactions;
    }

    /**
     * Access standardized Bank accounts from linked accounting software.
     */
    public BankAccounts bankAccounts() {
        return bankAccounts;
    }

    /**
     * Access standardized Bank transactions for bank accounts from linked accounting software.
     */
    public BankAccountTransactions bankAccountTransactions() {
        return bankAccountTransactions;
    }

    /**
     * Access standardized Bills from linked accounting software.
     */
    public Bills bills() {
        return bills;
    }

    /**
     * Access standardized Customers from linked accounting software.
     */
    public Customers customers() {
        return customers;
    }

    /**
     * Access standardized Direct costs from linked accounting software.
     */
    public DirectCosts directCosts() {
        return directCosts;
    }

    /**
     * Access standardized Direct incomes from linked accounting software.
     */
    public DirectIncomes directIncomes() {
        return directIncomes;
    }

    /**
     * Access standardized Invoices from linked accounting software.
     */
    public Invoices invoices() {
        return invoices;
    }

    /**
     * Access standardized Item receipts from linked accounting software.
     */
    public ItemReceipts itemReceipts() {
        return itemReceipts;
    }

    /**
     * Access standardized Payments from linked accounting software.
     */
    public Payments payments() {
        return payments;
    }

    /**
     * Access standardized Purchase orders from linked accounting software.
     */
    public PurchaseOrders purchaseOrders() {
        return purchaseOrders;
    }

    /**
     * Access standardized Suppliers from linked accounting software.
     */
    public Suppliers suppliers() {
        return suppliers;
    }

    /**
     * Access standardized Transfers from linked accounting software.
     */
    public Transfers transfers() {
        return transfers;
    }

    /**
     * Access standardized Bill credit notes from linked accounting software.
     */
    public BillCreditNotes billCreditNotes() {
        return billCreditNotes;
    }

    /**
     * Access standardized Bill payments from linked accounting software.
     */
    public BillPayments billPayments() {
        return billPayments;
    }

    /**
     * Access standardized Accounts from linked accounting software.
     */
    public Accounts accounts() {
        return accounts;
    }

    /**
     * Access standardized Credit notes from linked accounting software.
     */
    public CreditNotes creditNotes() {
        return creditNotes;
    }

    /**
     * Access standardized Items from linked accounting software.
     */
    public Items items() {
        return items;
    }

    /**
     * Access standardized Journal entries from linked accounting software.
     */
    public JournalEntries journalEntries() {
        return journalEntries;
    }

    /**
     * Access standardized Journals from linked accounting software.
     */
    public Journals journals() {
        return journals;
    }

    /**
     * Access standardized Reports from linked accounting software.
     */
    public Reports reports() {
        return reports;
    }

    /**
     * Access standardized Company info from linked accounting software.
     */
    public CompanyInfo companyInfo() {
        return companyInfo;
    }

    /**
     * Access standardized Payment methods from linked accounting software.
     */
    public PaymentMethods paymentMethods() {
        return paymentMethods;
    }

    /**
     * Access standardized Sales orders from linked accounting software.
     */
    public SalesOrders salesOrders() {
        return salesOrders;
    }

    /**
     * Access standardized Tax rates from linked accounting software.
     */
    public TaxRates taxRates() {
        return taxRates;
    }

    /**
     * Access standardized Tracking categories from linked accounting software.
     */
    public TrackingCategories trackingCategories() {
        return trackingCategories;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param authHeader The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder authHeader(String authHeader) {
            this.sdkConfiguration.securitySource = SecuritySource.of(io.codat.accounting.models.components.Security.builder()
              .authHeader(authHeader)
              .build());
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.sdkConfiguration.serverUrl = io.codat.accounting.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        // Visible for testing, will be accessed via reflection
        void _hooks(io.codat.accounting.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);    
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public CodatAccounting build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new CodatAccounting(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private CodatAccounting(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.accountTransactions = new AccountTransactions(sdkConfiguration);
        this.bankAccounts = new BankAccounts(sdkConfiguration);
        this.bankAccountTransactions = new BankAccountTransactions(sdkConfiguration);
        this.bills = new Bills(sdkConfiguration);
        this.customers = new Customers(sdkConfiguration);
        this.directCosts = new DirectCosts(sdkConfiguration);
        this.directIncomes = new DirectIncomes(sdkConfiguration);
        this.invoices = new Invoices(sdkConfiguration);
        this.itemReceipts = new ItemReceipts(sdkConfiguration);
        this.payments = new Payments(sdkConfiguration);
        this.purchaseOrders = new PurchaseOrders(sdkConfiguration);
        this.suppliers = new Suppliers(sdkConfiguration);
        this.transfers = new Transfers(sdkConfiguration);
        this.billCreditNotes = new BillCreditNotes(sdkConfiguration);
        this.billPayments = new BillPayments(sdkConfiguration);
        this.accounts = new Accounts(sdkConfiguration);
        this.creditNotes = new CreditNotes(sdkConfiguration);
        this.items = new Items(sdkConfiguration);
        this.journalEntries = new JournalEntries(sdkConfiguration);
        this.journals = new Journals(sdkConfiguration);
        this.reports = new Reports(sdkConfiguration);
        this.companyInfo = new CompanyInfo(sdkConfiguration);
        this.paymentMethods = new PaymentMethods(sdkConfiguration);
        this.salesOrders = new SalesOrders(sdkConfiguration);
        this.taxRates = new TaxRates(sdkConfiguration);
        this.trackingCategories = new TrackingCategories(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
