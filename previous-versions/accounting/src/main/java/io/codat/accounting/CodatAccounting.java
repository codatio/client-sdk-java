/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.accounting;

import io.codat.accounting.models.operations.SDKMethodInterfaces.*;
import io.codat.accounting.utils.HTTPClient;
import io.codat.accounting.utils.RetryConfig;
import io.codat.accounting.utils.SpeakeasyHTTPClient;
import io.codat.accounting.utils.Utils;
import java.io.InputStream;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Accounting API: &gt; ### New to Codat?
 * &gt;
 * &gt; Our Accounting API reference is relevant only to our existing clients.
 * &gt; Please reach out to your Codat contact so that we can find the right product for you.
 * 
 * A flexible API for pulling accounting data, normalized and aggregated from 20 accounting integrations.
 * 
 * Standardize how you connect to your customersâ€™ accounting software. View, create, update, and delete data in the same way for all the leading accounting platforms.
 * 
 * [Read more...](https://docs.codat.io/accounting-api/overview)
 * 
 * [See our OpenAPI spec](https://github.com/codatio/oas) 
 */
public class CodatAccounting {
    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * Production
         */
        "https://api.codat.io",
    };

    /**
     * Account transactions
     */
    private final AccountTransactions accountTransactions;

    /**
     * Bank accounts
     */
    private final BankAccounts bankAccounts;

    /**
     * Bank transactions for bank accounts
     */
    private final BankAccountTransactions bankAccountTransactions;

    /**
     * Bills
     */
    private final Bills bills;

    /**
     * Customers
     */
    private final Customers customers;

    /**
     * Direct costs
     */
    private final DirectCosts directCosts;

    /**
     * Direct incomes
     */
    private final DirectIncomes directIncomes;

    /**
     * Invoices
     */
    private final Invoices invoices;

    /**
     * Item receipts
     */
    private final ItemReceipts itemReceipts;

    /**
     * Purchase orders
     */
    private final PurchaseOrders purchaseOrders;

    /**
     * Suppliers
     */
    private final Suppliers suppliers;

    /**
     * Transfers
     */
    private final Transfers transfers;

    /**
     * Bill credit notes
     */
    private final BillCreditNotes billCreditNotes;

    /**
     * Bill payments
     */
    private final BillPayments billPayments;

    /**
     * Accounts
     */
    private final Accounts accounts;

    /**
     * Credit notes
     */
    private final CreditNotes creditNotes;

    /**
     * Items
     */
    private final Items items;

    /**
     * Journal entries
     */
    private final JournalEntries journalEntries;

    /**
     * Journals
     */
    private final Journals journals;

    /**
     * Payments
     */
    private final Payments payments;

    /**
     * Reports
     */
    private final Reports reports;

    /**
     * Company info
     */
    private final CompanyInfo companyInfo;

    /**
     * Payment methods
     */
    private final PaymentMethods paymentMethods;

    /**
     * Sales orders
     */
    private final SalesOrders salesOrders;

    /**
     * Tax rates
     */
    private final TaxRates taxRates;

    /**
     * Tracking categories
     */
    private final TrackingCategories trackingCategories;

    /**
     * Account transactions
     */
    public AccountTransactions accountTransactions() {
        return accountTransactions;
    }

    /**
     * Bank accounts
     */
    public BankAccounts bankAccounts() {
        return bankAccounts;
    }

    /**
     * Bank transactions for bank accounts
     */
    public BankAccountTransactions bankAccountTransactions() {
        return bankAccountTransactions;
    }

    /**
     * Bills
     */
    public Bills bills() {
        return bills;
    }

    /**
     * Customers
     */
    public Customers customers() {
        return customers;
    }

    /**
     * Direct costs
     */
    public DirectCosts directCosts() {
        return directCosts;
    }

    /**
     * Direct incomes
     */
    public DirectIncomes directIncomes() {
        return directIncomes;
    }

    /**
     * Invoices
     */
    public Invoices invoices() {
        return invoices;
    }

    /**
     * Item receipts
     */
    public ItemReceipts itemReceipts() {
        return itemReceipts;
    }

    /**
     * Purchase orders
     */
    public PurchaseOrders purchaseOrders() {
        return purchaseOrders;
    }

    /**
     * Suppliers
     */
    public Suppliers suppliers() {
        return suppliers;
    }

    /**
     * Transfers
     */
    public Transfers transfers() {
        return transfers;
    }

    /**
     * Bill credit notes
     */
    public BillCreditNotes billCreditNotes() {
        return billCreditNotes;
    }

    /**
     * Bill payments
     */
    public BillPayments billPayments() {
        return billPayments;
    }

    /**
     * Accounts
     */
    public Accounts accounts() {
        return accounts;
    }

    /**
     * Credit notes
     */
    public CreditNotes creditNotes() {
        return creditNotes;
    }

    /**
     * Items
     */
    public Items items() {
        return items;
    }

    /**
     * Journal entries
     */
    public JournalEntries journalEntries() {
        return journalEntries;
    }

    /**
     * Journals
     */
    public Journals journals() {
        return journals;
    }

    /**
     * Payments
     */
    public Payments payments() {
        return payments;
    }

    /**
     * Reports
     */
    public Reports reports() {
        return reports;
    }

    /**
     * Company info
     */
    public CompanyInfo companyInfo() {
        return companyInfo;
    }

    /**
     * Payment methods
     */
    public PaymentMethods paymentMethods() {
        return paymentMethods;
    }

    /**
     * Sales orders
     */
    public SalesOrders salesOrders() {
        return salesOrders;
    }

    /**
     * Tax rates
     */
    public TaxRates taxRates() {
        return taxRates;
    }

    /**
     * Tracking categories
     */
    public TrackingCategories trackingCategories() {
        return trackingCategories;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param authHeader The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder authHeader(String authHeader) {
            this.sdkConfiguration.securitySource = SecuritySource.of(io.codat.accounting.models.components.Security.builder()
              .authHeader(authHeader)
              .build());
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, java.util.Map<String, String> params) {
            this.sdkConfiguration.serverUrl = io.codat.accounting.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public CodatAccounting build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	    if (sdkConfiguration.securitySource == null) {
	    	sdkConfiguration.securitySource = SecuritySource.of(null);
	    }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new CodatAccounting(sdkConfiguration);
        }
    }

    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private CodatAccounting(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.accountTransactions = new AccountTransactions(sdkConfiguration);
        this.bankAccounts = new BankAccounts(sdkConfiguration);
        this.bankAccountTransactions = new BankAccountTransactions(sdkConfiguration);
        this.bills = new Bills(sdkConfiguration);
        this.customers = new Customers(sdkConfiguration);
        this.directCosts = new DirectCosts(sdkConfiguration);
        this.directIncomes = new DirectIncomes(sdkConfiguration);
        this.invoices = new Invoices(sdkConfiguration);
        this.itemReceipts = new ItemReceipts(sdkConfiguration);
        this.purchaseOrders = new PurchaseOrders(sdkConfiguration);
        this.suppliers = new Suppliers(sdkConfiguration);
        this.transfers = new Transfers(sdkConfiguration);
        this.billCreditNotes = new BillCreditNotes(sdkConfiguration);
        this.billPayments = new BillPayments(sdkConfiguration);
        this.accounts = new Accounts(sdkConfiguration);
        this.creditNotes = new CreditNotes(sdkConfiguration);
        this.items = new Items(sdkConfiguration);
        this.journalEntries = new JournalEntries(sdkConfiguration);
        this.journals = new Journals(sdkConfiguration);
        this.payments = new Payments(sdkConfiguration);
        this.reports = new Reports(sdkConfiguration);
        this.companyInfo = new CompanyInfo(sdkConfiguration);
        this.paymentMethods = new PaymentMethods(sdkConfiguration);
        this.salesOrders = new SalesOrders(sdkConfiguration);
        this.taxRates = new TaxRates(sdkConfiguration);
        this.trackingCategories = new TrackingCategories(sdkConfiguration);
    }





































































































































}
