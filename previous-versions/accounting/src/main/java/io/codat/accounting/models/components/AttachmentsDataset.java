/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class AttachmentsDataset {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    private JsonNullable<? extends List<Attachment>> attachments;

    @JsonCreator
    public AttachmentsDataset(
            @JsonProperty("attachments") JsonNullable<? extends List<Attachment>> attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = attachments;
    }
    
    public AttachmentsDataset() {
        this(JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Attachment>> attachments() {
        return (JsonNullable<List<Attachment>>) attachments;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AttachmentsDataset withAttachments(List<Attachment> attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = JsonNullable.of(attachments);
        return this;
    }

    public AttachmentsDataset withAttachments(JsonNullable<? extends List<Attachment>> attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = attachments;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AttachmentsDataset other = (AttachmentsDataset) o;
        return 
            Objects.deepEquals(this.attachments, other.attachments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            attachments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AttachmentsDataset.class,
                "attachments", attachments);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends List<Attachment>> attachments = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder attachments(List<Attachment> attachments) {
            Utils.checkNotNull(attachments, "attachments");
            this.attachments = JsonNullable.of(attachments);
            return this;
        }

        public Builder attachments(JsonNullable<? extends List<Attachment>> attachments) {
            Utils.checkNotNull(attachments, "attachments");
            this.attachments = attachments;
            return this;
        }
        
        public AttachmentsDataset build() {
            return new AttachmentsDataset(
                attachments);
        }
    }
}

