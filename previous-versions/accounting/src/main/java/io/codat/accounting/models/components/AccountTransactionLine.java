/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.accounting.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountTransactionLine {

    /**
     * Amount in the bill payment currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Double> amount;

    /**
     * Description of the account transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<? extends String> description;

    /**
     * Links an account transaction line to the underlying record that created it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordRef")
    private Optional<? extends AccountTransactionLineRecordRef> recordRef;

    public AccountTransactionLine(
            @JsonProperty("amount") Optional<? extends Double> amount,
            @JsonProperty("description") JsonNullable<? extends String> description,
            @JsonProperty("recordRef") Optional<? extends AccountTransactionLineRecordRef> recordRef) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(recordRef, "recordRef");
        this.amount = amount;
        this.description = description;
        this.recordRef = recordRef;
    }

    /**
     * Amount in the bill payment currency.
     */
    public Optional<? extends Double> amount() {
        return amount;
    }

    /**
     * Description of the account transaction.
     */
    public JsonNullable<? extends String> description() {
        return description;
    }

    /**
     * Links an account transaction line to the underlying record that created it.
     */
    public Optional<? extends AccountTransactionLineRecordRef> recordRef() {
        return recordRef;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Amount in the bill payment currency.
     */
    public AccountTransactionLine withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }
    
    /**
     * Amount in the bill payment currency.
     */
    public AccountTransactionLine withAmount(Optional<? extends Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Description of the account transaction.
     */
    public AccountTransactionLine withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Description of the account transaction.
     */
    public AccountTransactionLine withDescription(JsonNullable<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Links an account transaction line to the underlying record that created it.
     */
    public AccountTransactionLine withRecordRef(AccountTransactionLineRecordRef recordRef) {
        Utils.checkNotNull(recordRef, "recordRef");
        this.recordRef = Optional.ofNullable(recordRef);
        return this;
    }
    
    /**
     * Links an account transaction line to the underlying record that created it.
     */
    public AccountTransactionLine withRecordRef(Optional<? extends AccountTransactionLineRecordRef> recordRef) {
        Utils.checkNotNull(recordRef, "recordRef");
        this.recordRef = recordRef;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountTransactionLine other = (AccountTransactionLine) o;
        return 
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.recordRef, other.recordRef);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            amount,
            description,
            recordRef);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountTransactionLine.class,
                "amount", amount,
                "description", description,
                "recordRef", recordRef);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> amount = Optional.empty();
 
        private JsonNullable<? extends String> description = JsonNullable.undefined();
 
        private Optional<? extends AccountTransactionLineRecordRef> recordRef = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Amount in the bill payment currency.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }
        
        /**
         * Amount in the bill payment currency.
         */
        public Builder amount(Optional<? extends Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Description of the account transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Description of the account transaction.
         */
        public Builder description(JsonNullable<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Links an account transaction line to the underlying record that created it.
         */
        public Builder recordRef(AccountTransactionLineRecordRef recordRef) {
            Utils.checkNotNull(recordRef, "recordRef");
            this.recordRef = Optional.ofNullable(recordRef);
            return this;
        }
        
        /**
         * Links an account transaction line to the underlying record that created it.
         */
        public Builder recordRef(Optional<? extends AccountTransactionLineRecordRef> recordRef) {
            Utils.checkNotNull(recordRef, "recordRef");
            this.recordRef = recordRef;
            return this;
        }
        
        public AccountTransactionLine build() {
            return new AccountTransactionLine(
                amount,
                description,
                recordRef);
        }
    }
}

