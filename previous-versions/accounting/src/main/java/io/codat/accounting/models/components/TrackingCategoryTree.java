/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TrackingCategoryTree - The full structure of a specific tracking category including any child or subcategories.
 */

public class TrackingCategoryTree {

    /**
     * Boolean value indicating whether this category has SubCategories
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasChildren")
    private Optional<Boolean> hasChildren;

    /**
     * The identifier for the item, unique per tracking category
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends Metadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<String> modifiedDate;

    /**
     * The name of the tracking category
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The identifier for this item's immediate parent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentId")
    private JsonNullable<String> parentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<String> sourceModifiedDate;

    /**
     * Current state of the tracking category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    /**
     * A collection of subcategories that are nested beneath this category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subCategories")
    private JsonNullable<? extends List<TrackingCategoryTree>> subCategories;

    @JsonCreator
    public TrackingCategoryTree(
            @JsonProperty("hasChildren") Optional<Boolean> hasChildren,
            @JsonProperty("id") JsonNullable<String> id,
            @JsonProperty("metadata") Optional<? extends Metadata> metadata,
            @JsonProperty("modifiedDate") Optional<String> modifiedDate,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("parentId") JsonNullable<String> parentId,
            @JsonProperty("sourceModifiedDate") Optional<String> sourceModifiedDate,
            @JsonProperty("status") Optional<? extends Status> status,
            @JsonProperty("subCategories") JsonNullable<? extends List<TrackingCategoryTree>> subCategories) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(subCategories, "subCategories");
        this.hasChildren = hasChildren;
        this.id = id;
        this.metadata = metadata;
        this.modifiedDate = modifiedDate;
        this.name = name;
        this.parentId = parentId;
        this.sourceModifiedDate = sourceModifiedDate;
        this.status = status;
        this.subCategories = subCategories;
    }
    
    public TrackingCategoryTree() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Boolean value indicating whether this category has SubCategories
     */
    @JsonIgnore
    public Optional<Boolean> hasChildren() {
        return hasChildren;
    }

    /**
     * The identifier for the item, unique per tracking category
     */
    @JsonIgnore
    public JsonNullable<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Metadata> metadata() {
        return (Optional<Metadata>) metadata;
    }

    @JsonIgnore
    public Optional<String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * The name of the tracking category
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The identifier for this item's immediate parent
     */
    @JsonIgnore
    public JsonNullable<String> parentId() {
        return parentId;
    }

    @JsonIgnore
    public Optional<String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * Current state of the tracking category.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    /**
     * A collection of subcategories that are nested beneath this category.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TrackingCategoryTree>> subCategories() {
        return (JsonNullable<List<TrackingCategoryTree>>) subCategories;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Boolean value indicating whether this category has SubCategories
     */
    public TrackingCategoryTree withHasChildren(boolean hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = Optional.ofNullable(hasChildren);
        return this;
    }

    /**
     * Boolean value indicating whether this category has SubCategories
     */
    public TrackingCategoryTree withHasChildren(Optional<Boolean> hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = hasChildren;
        return this;
    }

    /**
     * The identifier for the item, unique per tracking category
     */
    public TrackingCategoryTree withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * The identifier for the item, unique per tracking category
     */
    public TrackingCategoryTree withId(JsonNullable<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public TrackingCategoryTree withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public TrackingCategoryTree withMetadata(Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public TrackingCategoryTree withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }

    public TrackingCategoryTree withModifiedDate(Optional<String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * The name of the tracking category
     */
    public TrackingCategoryTree withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The name of the tracking category
     */
    public TrackingCategoryTree withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The identifier for this item's immediate parent
     */
    public TrackingCategoryTree withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = JsonNullable.of(parentId);
        return this;
    }

    /**
     * The identifier for this item's immediate parent
     */
    public TrackingCategoryTree withParentId(JsonNullable<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    public TrackingCategoryTree withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }

    public TrackingCategoryTree withSourceModifiedDate(Optional<String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * Current state of the tracking category.
     */
    public TrackingCategoryTree withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Current state of the tracking category.
     */
    public TrackingCategoryTree withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * A collection of subcategories that are nested beneath this category.
     */
    public TrackingCategoryTree withSubCategories(List<TrackingCategoryTree> subCategories) {
        Utils.checkNotNull(subCategories, "subCategories");
        this.subCategories = JsonNullable.of(subCategories);
        return this;
    }

    /**
     * A collection of subcategories that are nested beneath this category.
     */
    public TrackingCategoryTree withSubCategories(JsonNullable<? extends List<TrackingCategoryTree>> subCategories) {
        Utils.checkNotNull(subCategories, "subCategories");
        this.subCategories = subCategories;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TrackingCategoryTree other = (TrackingCategoryTree) o;
        return 
            Objects.deepEquals(this.hasChildren, other.hasChildren) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.parentId, other.parentId) &&
            Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.subCategories, other.subCategories);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            hasChildren,
            id,
            metadata,
            modifiedDate,
            name,
            parentId,
            sourceModifiedDate,
            status,
            subCategories);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TrackingCategoryTree.class,
                "hasChildren", hasChildren,
                "id", id,
                "metadata", metadata,
                "modifiedDate", modifiedDate,
                "name", name,
                "parentId", parentId,
                "sourceModifiedDate", sourceModifiedDate,
                "status", status,
                "subCategories", subCategories);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> hasChildren = Optional.empty();
 
        private JsonNullable<String> id = JsonNullable.undefined();
 
        private Optional<? extends Metadata> metadata = Optional.empty();
 
        private Optional<String> modifiedDate = Optional.empty();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> parentId = JsonNullable.undefined();
 
        private Optional<String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends Status> status = Optional.empty();
 
        private JsonNullable<? extends List<TrackingCategoryTree>> subCategories = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Boolean value indicating whether this category has SubCategories
         */
        public Builder hasChildren(boolean hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = Optional.ofNullable(hasChildren);
            return this;
        }

        /**
         * Boolean value indicating whether this category has SubCategories
         */
        public Builder hasChildren(Optional<Boolean> hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = hasChildren;
            return this;
        }

        /**
         * The identifier for the item, unique per tracking category
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * The identifier for the item, unique per tracking category
         */
        public Builder id(JsonNullable<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        public Builder modifiedDate(Optional<String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * The name of the tracking category
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The name of the tracking category
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The identifier for this item's immediate parent
         */
        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * The identifier for this item's immediate parent
         */
        public Builder parentId(JsonNullable<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(Optional<String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * Current state of the tracking category.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Current state of the tracking category.
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * A collection of subcategories that are nested beneath this category.
         */
        public Builder subCategories(List<TrackingCategoryTree> subCategories) {
            Utils.checkNotNull(subCategories, "subCategories");
            this.subCategories = JsonNullable.of(subCategories);
            return this;
        }

        /**
         * A collection of subcategories that are nested beneath this category.
         */
        public Builder subCategories(JsonNullable<? extends List<TrackingCategoryTree>> subCategories) {
            Utils.checkNotNull(subCategories, "subCategories");
            this.subCategories = subCategories;
            return this;
        }
        
        public TrackingCategoryTree build() {
            return new TrackingCategoryTree(
                hasChildren,
                id,
                metadata,
                modifiedDate,
                name,
                parentId,
                sourceModifiedDate,
                status,
                subCategories);
        }
    }
}

