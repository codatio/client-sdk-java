/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class AccountingAgedCurrencyOutstanding {

    /**
     * Array of outstanding amounts by period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agedOutstandingAmounts")
    private Optional<? extends List<AgedOutstandingAmount>> agedOutstandingAmounts;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    @JsonCreator
    public AccountingAgedCurrencyOutstanding(
            @JsonProperty("agedOutstandingAmounts") Optional<? extends List<AgedOutstandingAmount>> agedOutstandingAmounts,
            @JsonProperty("currency") Optional<String> currency) {
        Utils.checkNotNull(agedOutstandingAmounts, "agedOutstandingAmounts");
        Utils.checkNotNull(currency, "currency");
        this.agedOutstandingAmounts = agedOutstandingAmounts;
        this.currency = currency;
    }
    
    public AccountingAgedCurrencyOutstanding() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Array of outstanding amounts by period.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AgedOutstandingAmount>> agedOutstandingAmounts() {
        return (Optional<List<AgedOutstandingAmount>>) agedOutstandingAmounts;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Array of outstanding amounts by period.
     */
    public AccountingAgedCurrencyOutstanding withAgedOutstandingAmounts(List<AgedOutstandingAmount> agedOutstandingAmounts) {
        Utils.checkNotNull(agedOutstandingAmounts, "agedOutstandingAmounts");
        this.agedOutstandingAmounts = Optional.ofNullable(agedOutstandingAmounts);
        return this;
    }

    /**
     * Array of outstanding amounts by period.
     */
    public AccountingAgedCurrencyOutstanding withAgedOutstandingAmounts(Optional<? extends List<AgedOutstandingAmount>> agedOutstandingAmounts) {
        Utils.checkNotNull(agedOutstandingAmounts, "agedOutstandingAmounts");
        this.agedOutstandingAmounts = agedOutstandingAmounts;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public AccountingAgedCurrencyOutstanding withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public AccountingAgedCurrencyOutstanding withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingAgedCurrencyOutstanding other = (AccountingAgedCurrencyOutstanding) o;
        return 
            Objects.deepEquals(this.agedOutstandingAmounts, other.agedOutstandingAmounts) &&
            Objects.deepEquals(this.currency, other.currency);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agedOutstandingAmounts,
            currency);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingAgedCurrencyOutstanding.class,
                "agedOutstandingAmounts", agedOutstandingAmounts,
                "currency", currency);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AgedOutstandingAmount>> agedOutstandingAmounts = Optional.empty();
 
        private Optional<String> currency = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Array of outstanding amounts by period.
         */
        public Builder agedOutstandingAmounts(List<AgedOutstandingAmount> agedOutstandingAmounts) {
            Utils.checkNotNull(agedOutstandingAmounts, "agedOutstandingAmounts");
            this.agedOutstandingAmounts = Optional.ofNullable(agedOutstandingAmounts);
            return this;
        }

        /**
         * Array of outstanding amounts by period.
         */
        public Builder agedOutstandingAmounts(Optional<? extends List<AgedOutstandingAmount>> agedOutstandingAmounts) {
            Utils.checkNotNull(agedOutstandingAmounts, "agedOutstandingAmounts");
            this.agedOutstandingAmounts = agedOutstandingAmounts;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }
        
        public AccountingAgedCurrencyOutstanding build() {
            return new AccountingAgedCurrencyOutstanding(
                agedOutstandingAmounts,
                currency);
        }
    }
}

