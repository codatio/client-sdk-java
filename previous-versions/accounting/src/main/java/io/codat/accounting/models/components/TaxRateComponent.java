/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TaxRateComponent - A tax rate can be made up of multiple sub taxes, often called components of the tax.
 */

public class TaxRateComponent {

    /**
     * A flag to indicate with the tax is calculated using the principle of compounding. 
     */
    @JsonProperty("isCompound")
    private boolean isCompound;

    /**
     * Name of the tax rate component.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The rate of the tax rate component, usually a percentage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate")
    private JsonNullable<? extends BigDecimal> rate;

    @JsonCreator
    public TaxRateComponent(
            @JsonProperty("isCompound") boolean isCompound,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("rate") JsonNullable<? extends BigDecimal> rate) {
        Utils.checkNotNull(isCompound, "isCompound");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(rate, "rate");
        this.isCompound = isCompound;
        this.name = name;
        this.rate = rate;
    }
    
    public TaxRateComponent(
            boolean isCompound) {
        this(isCompound, JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * A flag to indicate with the tax is calculated using the principle of compounding. 
     */
    @JsonIgnore
    public boolean isCompound() {
        return isCompound;
    }

    /**
     * Name of the tax rate component.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The rate of the tax rate component, usually a percentage.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> rate() {
        return (JsonNullable<BigDecimal>) rate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A flag to indicate with the tax is calculated using the principle of compounding. 
     */
    public TaxRateComponent withIsCompound(boolean isCompound) {
        Utils.checkNotNull(isCompound, "isCompound");
        this.isCompound = isCompound;
        return this;
    }

    /**
     * Name of the tax rate component.
     */
    public TaxRateComponent withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Name of the tax rate component.
     */
    public TaxRateComponent withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The rate of the tax rate component, usually a percentage.
     */
    public TaxRateComponent withRate(BigDecimal rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = JsonNullable.of(rate);
        return this;
    }

        /**
         * The rate of the tax rate component, usually a percentage.
         */
    public TaxRateComponent withRate(double rate) {
        this.rate = JsonNullable.of(BigDecimal.valueOf(rate));
        return this;
    }

    /**
     * The rate of the tax rate component, usually a percentage.
     */
    public TaxRateComponent withRate(JsonNullable<? extends BigDecimal> rate) {
        Utils.checkNotNull(rate, "rate");
        this.rate = rate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxRateComponent other = (TaxRateComponent) o;
        return 
            Objects.deepEquals(this.isCompound, other.isCompound) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.rate, other.rate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            isCompound,
            name,
            rate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxRateComponent.class,
                "isCompound", isCompound,
                "name", name,
                "rate", rate);
    }
    
    public final static class Builder {
 
        private Boolean isCompound;
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends BigDecimal> rate = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A flag to indicate with the tax is calculated using the principle of compounding. 
         */
        public Builder isCompound(boolean isCompound) {
            Utils.checkNotNull(isCompound, "isCompound");
            this.isCompound = isCompound;
            return this;
        }

        /**
         * Name of the tax rate component.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Name of the tax rate component.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The rate of the tax rate component, usually a percentage.
         */
        public Builder rate(BigDecimal rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = JsonNullable.of(rate);
            return this;
        }

        /**
         * The rate of the tax rate component, usually a percentage.
         */
        public Builder rate(double rate) {
            this.rate = JsonNullable.of(BigDecimal.valueOf(rate));
            return this;
        }

        /**
         * The rate of the tax rate component, usually a percentage.
         */
        public Builder rate(JsonNullable<? extends BigDecimal> rate) {
            Utils.checkNotNull(rate, "rate");
            this.rate = rate;
            return this;
        }
        
        public TaxRateComponent build() {
            return new TaxRateComponent(
                isCompound,
                name,
                rate);
        }
    }
}

