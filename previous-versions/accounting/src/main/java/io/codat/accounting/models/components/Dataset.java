/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Dataset {

    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonProperty("companyId")
    private String companyId;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed")
    private Optional<String> completed;

    /**
     * Unique identifier for a company's data connection.
     */
    @JsonProperty("connectionId")
    private String connectionId;

    /**
     * Available data types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataType")
    private Optional<? extends DataType> dataType;

    /**
     * URI to the dataset's logs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasetLogsUrl")
    private JsonNullable<String> datasetLogsUrl;

    /**
     * A brief message about the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    private JsonNullable<String> errorMessage;

    /**
     * Identifier for the dataset.
     */
    @JsonProperty("id")
    private String id;

    /**
     * `True` if the dataset completed successfully.
     */
    @JsonProperty("isCompleted")
    private boolean isCompleted;

    /**
     * `True` if the dataset entered an error state.
     */
    @JsonProperty("isErrored")
    private boolean isErrored;

    /**
     * An integer signifying the progress of the dataset.
     */
    @JsonProperty("progress")
    private int progress;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonProperty("requested")
    private String requested;

    /**
     * The current status of the dataset.
     */
    @JsonProperty("status")
    private DatasetStatus status;

    /**
     * URI to the dataset's validation information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validationInformationUrl")
    private JsonNullable<String> validationInformationUrl;

    @JsonCreator
    public Dataset(
            @JsonProperty("companyId") String companyId,
            @JsonProperty("completed") Optional<String> completed,
            @JsonProperty("connectionId") String connectionId,
            @JsonProperty("dataType") Optional<? extends DataType> dataType,
            @JsonProperty("datasetLogsUrl") JsonNullable<String> datasetLogsUrl,
            @JsonProperty("errorMessage") JsonNullable<String> errorMessage,
            @JsonProperty("id") String id,
            @JsonProperty("isCompleted") boolean isCompleted,
            @JsonProperty("isErrored") boolean isErrored,
            @JsonProperty("progress") int progress,
            @JsonProperty("requested") String requested,
            @JsonProperty("status") DatasetStatus status,
            @JsonProperty("validationInformationUrl") JsonNullable<String> validationInformationUrl) {
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(completed, "completed");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(dataType, "dataType");
        Utils.checkNotNull(datasetLogsUrl, "datasetLogsUrl");
        Utils.checkNotNull(errorMessage, "errorMessage");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isCompleted, "isCompleted");
        Utils.checkNotNull(isErrored, "isErrored");
        Utils.checkNotNull(progress, "progress");
        Utils.checkNotNull(requested, "requested");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(validationInformationUrl, "validationInformationUrl");
        this.companyId = companyId;
        this.completed = completed;
        this.connectionId = connectionId;
        this.dataType = dataType;
        this.datasetLogsUrl = datasetLogsUrl;
        this.errorMessage = errorMessage;
        this.id = id;
        this.isCompleted = isCompleted;
        this.isErrored = isErrored;
        this.progress = progress;
        this.requested = requested;
        this.status = status;
        this.validationInformationUrl = validationInformationUrl;
    }
    
    public Dataset(
            String companyId,
            String connectionId,
            String id,
            boolean isCompleted,
            boolean isErrored,
            int progress,
            String requested,
            DatasetStatus status) {
        this(companyId, Optional.empty(), connectionId, Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), id, isCompleted, isErrored, progress, requested, status, JsonNullable.undefined());
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonIgnore
    public String companyId() {
        return companyId;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> completed() {
        return completed;
    }

    /**
     * Unique identifier for a company's data connection.
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * Available data types
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataType> dataType() {
        return (Optional<DataType>) dataType;
    }

    /**
     * URI to the dataset's logs.
     */
    @JsonIgnore
    public JsonNullable<String> datasetLogsUrl() {
        return datasetLogsUrl;
    }

    /**
     * A brief message about the error.
     */
    @JsonIgnore
    public JsonNullable<String> errorMessage() {
        return errorMessage;
    }

    /**
     * Identifier for the dataset.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * `True` if the dataset completed successfully.
     */
    @JsonIgnore
    public boolean isCompleted() {
        return isCompleted;
    }

    /**
     * `True` if the dataset entered an error state.
     */
    @JsonIgnore
    public boolean isErrored() {
        return isErrored;
    }

    /**
     * An integer signifying the progress of the dataset.
     */
    @JsonIgnore
    public int progress() {
        return progress;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public String requested() {
        return requested;
    }

    /**
     * The current status of the dataset.
     */
    @JsonIgnore
    public DatasetStatus status() {
        return status;
    }

    /**
     * URI to the dataset's validation information.
     */
    @JsonIgnore
    public JsonNullable<String> validationInformationUrl() {
        return validationInformationUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    public Dataset withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Dataset withCompleted(String completed) {
        Utils.checkNotNull(completed, "completed");
        this.completed = Optional.ofNullable(completed);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Dataset withCompleted(Optional<String> completed) {
        Utils.checkNotNull(completed, "completed");
        this.completed = completed;
        return this;
    }

    /**
     * Unique identifier for a company's data connection.
     */
    public Dataset withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Available data types
     */
    public Dataset withDataType(DataType dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = Optional.ofNullable(dataType);
        return this;
    }

    /**
     * Available data types
     */
    public Dataset withDataType(Optional<? extends DataType> dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = dataType;
        return this;
    }

    /**
     * URI to the dataset's logs.
     */
    public Dataset withDatasetLogsUrl(String datasetLogsUrl) {
        Utils.checkNotNull(datasetLogsUrl, "datasetLogsUrl");
        this.datasetLogsUrl = JsonNullable.of(datasetLogsUrl);
        return this;
    }

    /**
     * URI to the dataset's logs.
     */
    public Dataset withDatasetLogsUrl(JsonNullable<String> datasetLogsUrl) {
        Utils.checkNotNull(datasetLogsUrl, "datasetLogsUrl");
        this.datasetLogsUrl = datasetLogsUrl;
        return this;
    }

    /**
     * A brief message about the error.
     */
    public Dataset withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = JsonNullable.of(errorMessage);
        return this;
    }

    /**
     * A brief message about the error.
     */
    public Dataset withErrorMessage(JsonNullable<String> errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Identifier for the dataset.
     */
    public Dataset withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * `True` if the dataset completed successfully.
     */
    public Dataset withIsCompleted(boolean isCompleted) {
        Utils.checkNotNull(isCompleted, "isCompleted");
        this.isCompleted = isCompleted;
        return this;
    }

    /**
     * `True` if the dataset entered an error state.
     */
    public Dataset withIsErrored(boolean isErrored) {
        Utils.checkNotNull(isErrored, "isErrored");
        this.isErrored = isErrored;
        return this;
    }

    /**
     * An integer signifying the progress of the dataset.
     */
    public Dataset withProgress(int progress) {
        Utils.checkNotNull(progress, "progress");
        this.progress = progress;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Dataset withRequested(String requested) {
        Utils.checkNotNull(requested, "requested");
        this.requested = requested;
        return this;
    }

    /**
     * The current status of the dataset.
     */
    public Dataset withStatus(DatasetStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * URI to the dataset's validation information.
     */
    public Dataset withValidationInformationUrl(String validationInformationUrl) {
        Utils.checkNotNull(validationInformationUrl, "validationInformationUrl");
        this.validationInformationUrl = JsonNullable.of(validationInformationUrl);
        return this;
    }

    /**
     * URI to the dataset's validation information.
     */
    public Dataset withValidationInformationUrl(JsonNullable<String> validationInformationUrl) {
        Utils.checkNotNull(validationInformationUrl, "validationInformationUrl");
        this.validationInformationUrl = validationInformationUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Dataset other = (Dataset) o;
        return 
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.completed, other.completed) &&
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.dataType, other.dataType) &&
            Objects.deepEquals(this.datasetLogsUrl, other.datasetLogsUrl) &&
            Objects.deepEquals(this.errorMessage, other.errorMessage) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.isCompleted, other.isCompleted) &&
            Objects.deepEquals(this.isErrored, other.isErrored) &&
            Objects.deepEquals(this.progress, other.progress) &&
            Objects.deepEquals(this.requested, other.requested) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.validationInformationUrl, other.validationInformationUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyId,
            completed,
            connectionId,
            dataType,
            datasetLogsUrl,
            errorMessage,
            id,
            isCompleted,
            isErrored,
            progress,
            requested,
            status,
            validationInformationUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Dataset.class,
                "companyId", companyId,
                "completed", completed,
                "connectionId", connectionId,
                "dataType", dataType,
                "datasetLogsUrl", datasetLogsUrl,
                "errorMessage", errorMessage,
                "id", id,
                "isCompleted", isCompleted,
                "isErrored", isErrored,
                "progress", progress,
                "requested", requested,
                "status", status,
                "validationInformationUrl", validationInformationUrl);
    }
    
    public final static class Builder {
 
        private String companyId;
 
        private Optional<String> completed = Optional.empty();
 
        private String connectionId;
 
        private Optional<? extends DataType> dataType = Optional.empty();
 
        private JsonNullable<String> datasetLogsUrl = JsonNullable.undefined();
 
        private JsonNullable<String> errorMessage = JsonNullable.undefined();
 
        private String id;
 
        private Boolean isCompleted;
 
        private Boolean isErrored;
 
        private Integer progress;
 
        private String requested;
 
        private DatasetStatus status;
 
        private JsonNullable<String> validationInformationUrl = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for your SMB in Codat.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder completed(String completed) {
            Utils.checkNotNull(completed, "completed");
            this.completed = Optional.ofNullable(completed);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder completed(Optional<String> completed) {
            Utils.checkNotNull(completed, "completed");
            this.completed = completed;
            return this;
        }

        /**
         * Unique identifier for a company's data connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * Available data types
         */
        public Builder dataType(DataType dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = Optional.ofNullable(dataType);
            return this;
        }

        /**
         * Available data types
         */
        public Builder dataType(Optional<? extends DataType> dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = dataType;
            return this;
        }

        /**
         * URI to the dataset's logs.
         */
        public Builder datasetLogsUrl(String datasetLogsUrl) {
            Utils.checkNotNull(datasetLogsUrl, "datasetLogsUrl");
            this.datasetLogsUrl = JsonNullable.of(datasetLogsUrl);
            return this;
        }

        /**
         * URI to the dataset's logs.
         */
        public Builder datasetLogsUrl(JsonNullable<String> datasetLogsUrl) {
            Utils.checkNotNull(datasetLogsUrl, "datasetLogsUrl");
            this.datasetLogsUrl = datasetLogsUrl;
            return this;
        }

        /**
         * A brief message about the error.
         */
        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = JsonNullable.of(errorMessage);
            return this;
        }

        /**
         * A brief message about the error.
         */
        public Builder errorMessage(JsonNullable<String> errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }

        /**
         * Identifier for the dataset.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * `True` if the dataset completed successfully.
         */
        public Builder isCompleted(boolean isCompleted) {
            Utils.checkNotNull(isCompleted, "isCompleted");
            this.isCompleted = isCompleted;
            return this;
        }

        /**
         * `True` if the dataset entered an error state.
         */
        public Builder isErrored(boolean isErrored) {
            Utils.checkNotNull(isErrored, "isErrored");
            this.isErrored = isErrored;
            return this;
        }

        /**
         * An integer signifying the progress of the dataset.
         */
        public Builder progress(int progress) {
            Utils.checkNotNull(progress, "progress");
            this.progress = progress;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder requested(String requested) {
            Utils.checkNotNull(requested, "requested");
            this.requested = requested;
            return this;
        }

        /**
         * The current status of the dataset.
         */
        public Builder status(DatasetStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * URI to the dataset's validation information.
         */
        public Builder validationInformationUrl(String validationInformationUrl) {
            Utils.checkNotNull(validationInformationUrl, "validationInformationUrl");
            this.validationInformationUrl = JsonNullable.of(validationInformationUrl);
            return this;
        }

        /**
         * URI to the dataset's validation information.
         */
        public Builder validationInformationUrl(JsonNullable<String> validationInformationUrl) {
            Utils.checkNotNull(validationInformationUrl, "validationInformationUrl");
            this.validationInformationUrl = validationInformationUrl;
            return this;
        }
        
        public Dataset build() {
            return new Dataset(
                companyId,
                completed,
                connectionId,
                dataType,
                datasetLogsUrl,
                errorMessage,
                id,
                isCompleted,
                isErrored,
                progress,
                requested,
                status,
                validationInformationUrl);
        }
    }
}

