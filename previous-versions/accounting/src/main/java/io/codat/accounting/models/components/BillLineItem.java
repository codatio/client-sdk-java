/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BillLineItem {

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountRef")
    private Optional<? extends AccountRef> accountRef;

    /**
     * Friendly name of the goods or services received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Numerical value of any discounts applied.
     * 
     * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    private JsonNullable<? extends BigDecimal> discountAmount;

    /**
     * Percentage rate of any discount applied to the bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountPercentage")
    private JsonNullable<? extends BigDecimal> discountPercentage;

    /**
     * The bill is a direct cost if `True`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDirectCost")
    private Optional<Boolean> isDirectCost;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemRef")
    private Optional<? extends ItemRef> itemRef;

    /**
     * The bill line's number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineNumber")
    private JsonNullable<String> lineNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchaseOrderLineRef")
    private Optional<? extends Zero> purchaseOrderLineRef;

    /**
     * Number of units of goods or services received.
     */
    @JsonProperty("quantity")
    private BigDecimal quantity;

    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subTotal")
    private JsonNullable<? extends BigDecimal> subTotal;

    /**
     * Amount of tax for the line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    private JsonNullable<? extends BigDecimal> taxAmount;

    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     * 
     * Found on:
     * 
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRateRef")
    private Optional<? extends TaxRateRef> taxRateRef;

    /**
     * Total amount of the line, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private JsonNullable<? extends BigDecimal> totalAmount;

    /**
     * Categories, and a project and customer, against which the item is tracked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking")
    private Optional<? extends PropertieTracking> tracking;

    /**
     * Collection of categories against which this item is tracked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingCategoryRefs")
    private JsonNullable<? extends List<TrackingCategoryRef>> trackingCategoryRefs;

    /**
     * Price of each unit of goods or services.
     */
    @JsonProperty("unitAmount")
    private BigDecimal unitAmount;

    /**
     * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitOfMeasurement")
    private JsonNullable<String> unitOfMeasurement;

    @JsonCreator
    public BillLineItem(
            @JsonProperty("accountRef") Optional<? extends AccountRef> accountRef,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("discountAmount") JsonNullable<? extends BigDecimal> discountAmount,
            @JsonProperty("discountPercentage") JsonNullable<? extends BigDecimal> discountPercentage,
            @JsonProperty("isDirectCost") Optional<Boolean> isDirectCost,
            @JsonProperty("itemRef") Optional<? extends ItemRef> itemRef,
            @JsonProperty("lineNumber") JsonNullable<String> lineNumber,
            @JsonProperty("purchaseOrderLineRef") Optional<? extends Zero> purchaseOrderLineRef,
            @JsonProperty("quantity") BigDecimal quantity,
            @JsonProperty("subTotal") JsonNullable<? extends BigDecimal> subTotal,
            @JsonProperty("taxAmount") JsonNullable<? extends BigDecimal> taxAmount,
            @JsonProperty("taxRateRef") Optional<? extends TaxRateRef> taxRateRef,
            @JsonProperty("totalAmount") JsonNullable<? extends BigDecimal> totalAmount,
            @JsonProperty("tracking") Optional<? extends PropertieTracking> tracking,
            @JsonProperty("trackingCategoryRefs") JsonNullable<? extends List<TrackingCategoryRef>> trackingCategoryRefs,
            @JsonProperty("unitAmount") BigDecimal unitAmount,
            @JsonProperty("unitOfMeasurement") JsonNullable<String> unitOfMeasurement) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        Utils.checkNotNull(isDirectCost, "isDirectCost");
        Utils.checkNotNull(itemRef, "itemRef");
        Utils.checkNotNull(lineNumber, "lineNumber");
        Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(tracking, "tracking");
        Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
        Utils.checkNotNull(unitAmount, "unitAmount");
        Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
        this.accountRef = accountRef;
        this.description = description;
        this.discountAmount = discountAmount;
        this.discountPercentage = discountPercentage;
        this.isDirectCost = isDirectCost;
        this.itemRef = itemRef;
        this.lineNumber = lineNumber;
        this.purchaseOrderLineRef = purchaseOrderLineRef;
        this.quantity = quantity;
        this.subTotal = subTotal;
        this.taxAmount = taxAmount;
        this.taxRateRef = taxRateRef;
        this.totalAmount = totalAmount;
        this.tracking = tracking;
        this.trackingCategoryRefs = trackingCategoryRefs;
        this.unitAmount = unitAmount;
        this.unitOfMeasurement = unitOfMeasurement;
    }
    
    public BillLineItem(
            BigDecimal quantity,
            BigDecimal unitAmount) {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), quantity, JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), unitAmount, JsonNullable.undefined());
    }

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountRef> accountRef() {
        return (Optional<AccountRef>) accountRef;
    }

    /**
     * Friendly name of the goods or services received.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Numerical value of any discounts applied.
     * 
     * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> discountAmount() {
        return (JsonNullable<BigDecimal>) discountAmount;
    }

    /**
     * Percentage rate of any discount applied to the bill.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> discountPercentage() {
        return (JsonNullable<BigDecimal>) discountPercentage;
    }

    /**
     * The bill is a direct cost if `True`.
     */
    @JsonIgnore
    public Optional<Boolean> isDirectCost() {
        return isDirectCost;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ItemRef> itemRef() {
        return (Optional<ItemRef>) itemRef;
    }

    /**
     * The bill line's number.
     */
    @JsonIgnore
    public JsonNullable<String> lineNumber() {
        return lineNumber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Zero> purchaseOrderLineRef() {
        return (Optional<Zero>) purchaseOrderLineRef;
    }

    /**
     * Number of units of goods or services received.
     */
    @JsonIgnore
    public BigDecimal quantity() {
        return quantity;
    }

    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> subTotal() {
        return (JsonNullable<BigDecimal>) subTotal;
    }

    /**
     * Amount of tax for the line.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> taxAmount() {
        return (JsonNullable<BigDecimal>) taxAmount;
    }

    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     * 
     * Found on:
     * 
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxRateRef> taxRateRef() {
        return (Optional<TaxRateRef>) taxRateRef;
    }

    /**
     * Total amount of the line, including tax.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> totalAmount() {
        return (JsonNullable<BigDecimal>) totalAmount;
    }

    /**
     * Categories, and a project and customer, against which the item is tracked.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertieTracking> tracking() {
        return (Optional<PropertieTracking>) tracking;
    }

    /**
     * Collection of categories against which this item is tracked.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TrackingCategoryRef>> trackingCategoryRefs() {
        return (JsonNullable<List<TrackingCategoryRef>>) trackingCategoryRefs;
    }

    /**
     * Price of each unit of goods or services.
     */
    @JsonIgnore
    public BigDecimal unitAmount() {
        return unitAmount;
    }

    /**
     * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
     */
    @JsonIgnore
    public JsonNullable<String> unitOfMeasurement() {
        return unitOfMeasurement;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    public BillLineItem withAccountRef(AccountRef accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = Optional.ofNullable(accountRef);
        return this;
    }

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    public BillLineItem withAccountRef(Optional<? extends AccountRef> accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public BillLineItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public BillLineItem withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Numerical value of any discounts applied.
     * 
     * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
     */
    public BillLineItem withDiscountAmount(BigDecimal discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }

        /**
         * Numerical value of any discounts applied.
         * 
         * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
         */
    public BillLineItem withDiscountAmount(double discountAmount) {
        this.discountAmount = JsonNullable.of(BigDecimal.valueOf(discountAmount));
        return this;
    }

    /**
     * Numerical value of any discounts applied.
     * 
     * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
     */
    public BillLineItem withDiscountAmount(JsonNullable<? extends BigDecimal> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * Percentage rate of any discount applied to the bill.
     */
    public BillLineItem withDiscountPercentage(BigDecimal discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }

        /**
         * Percentage rate of any discount applied to the bill.
         */
    public BillLineItem withDiscountPercentage(double discountPercentage) {
        this.discountPercentage = JsonNullable.of(BigDecimal.valueOf(discountPercentage));
        return this;
    }

    /**
     * Percentage rate of any discount applied to the bill.
     */
    public BillLineItem withDiscountPercentage(JsonNullable<? extends BigDecimal> discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * The bill is a direct cost if `True`.
     */
    public BillLineItem withIsDirectCost(boolean isDirectCost) {
        Utils.checkNotNull(isDirectCost, "isDirectCost");
        this.isDirectCost = Optional.ofNullable(isDirectCost);
        return this;
    }

    /**
     * The bill is a direct cost if `True`.
     */
    public BillLineItem withIsDirectCost(Optional<Boolean> isDirectCost) {
        Utils.checkNotNull(isDirectCost, "isDirectCost");
        this.isDirectCost = isDirectCost;
        return this;
    }

    public BillLineItem withItemRef(ItemRef itemRef) {
        Utils.checkNotNull(itemRef, "itemRef");
        this.itemRef = Optional.ofNullable(itemRef);
        return this;
    }

    public BillLineItem withItemRef(Optional<? extends ItemRef> itemRef) {
        Utils.checkNotNull(itemRef, "itemRef");
        this.itemRef = itemRef;
        return this;
    }

    /**
     * The bill line's number.
     */
    public BillLineItem withLineNumber(String lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }

    /**
     * The bill line's number.
     */
    public BillLineItem withLineNumber(JsonNullable<String> lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = lineNumber;
        return this;
    }

    public BillLineItem withPurchaseOrderLineRef(Zero purchaseOrderLineRef) {
        Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
        this.purchaseOrderLineRef = Optional.ofNullable(purchaseOrderLineRef);
        return this;
    }

    public BillLineItem withPurchaseOrderLineRef(Optional<? extends Zero> purchaseOrderLineRef) {
        Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
        this.purchaseOrderLineRef = purchaseOrderLineRef;
        return this;
    }

        /**
         * Number of units of goods or services received.
         */
    public BillLineItem withQuantity(double quantity) {
        this.quantity = BigDecimal.valueOf(quantity);
        return this;
    }

    /**
     * Number of units of goods or services received.
     */
    public BillLineItem withQuantity(BigDecimal quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    public BillLineItem withSubTotal(BigDecimal subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

        /**
         * Amount of the line, inclusive of discounts but exclusive of tax.
         */
    public BillLineItem withSubTotal(double subTotal) {
        this.subTotal = JsonNullable.of(BigDecimal.valueOf(subTotal));
        return this;
    }

    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    public BillLineItem withSubTotal(JsonNullable<? extends BigDecimal> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Amount of tax for the line.
     */
    public BillLineItem withTaxAmount(BigDecimal taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }

        /**
         * Amount of tax for the line.
         */
    public BillLineItem withTaxAmount(double taxAmount) {
        this.taxAmount = JsonNullable.of(BigDecimal.valueOf(taxAmount));
        return this;
    }

    /**
     * Amount of tax for the line.
     */
    public BillLineItem withTaxAmount(JsonNullable<? extends BigDecimal> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     * 
     * Found on:
     * 
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    public BillLineItem withTaxRateRef(TaxRateRef taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = Optional.ofNullable(taxRateRef);
        return this;
    }

    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     * 
     * Found on:
     * 
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    public BillLineItem withTaxRateRef(Optional<? extends TaxRateRef> taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = taxRateRef;
        return this;
    }

    /**
     * Total amount of the line, including tax.
     */
    public BillLineItem withTotalAmount(BigDecimal totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

        /**
         * Total amount of the line, including tax.
         */
    public BillLineItem withTotalAmount(double totalAmount) {
        this.totalAmount = JsonNullable.of(BigDecimal.valueOf(totalAmount));
        return this;
    }

    /**
     * Total amount of the line, including tax.
     */
    public BillLineItem withTotalAmount(JsonNullable<? extends BigDecimal> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Categories, and a project and customer, against which the item is tracked.
     */
    public BillLineItem withTracking(PropertieTracking tracking) {
        Utils.checkNotNull(tracking, "tracking");
        this.tracking = Optional.ofNullable(tracking);
        return this;
    }

    /**
     * Categories, and a project and customer, against which the item is tracked.
     */
    public BillLineItem withTracking(Optional<? extends PropertieTracking> tracking) {
        Utils.checkNotNull(tracking, "tracking");
        this.tracking = tracking;
        return this;
    }

    /**
     * Collection of categories against which this item is tracked.
     */
    public BillLineItem withTrackingCategoryRefs(List<TrackingCategoryRef> trackingCategoryRefs) {
        Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
        this.trackingCategoryRefs = JsonNullable.of(trackingCategoryRefs);
        return this;
    }

    /**
     * Collection of categories against which this item is tracked.
     */
    public BillLineItem withTrackingCategoryRefs(JsonNullable<? extends List<TrackingCategoryRef>> trackingCategoryRefs) {
        Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
        this.trackingCategoryRefs = trackingCategoryRefs;
        return this;
    }

        /**
         * Price of each unit of goods or services.
         */
    public BillLineItem withUnitAmount(double unitAmount) {
        this.unitAmount = BigDecimal.valueOf(unitAmount);
        return this;
    }

    /**
     * Price of each unit of goods or services.
     */
    public BillLineItem withUnitAmount(BigDecimal unitAmount) {
        Utils.checkNotNull(unitAmount, "unitAmount");
        this.unitAmount = unitAmount;
        return this;
    }

    /**
     * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
     */
    public BillLineItem withUnitOfMeasurement(String unitOfMeasurement) {
        Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
        this.unitOfMeasurement = JsonNullable.of(unitOfMeasurement);
        return this;
    }

    /**
     * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
     */
    public BillLineItem withUnitOfMeasurement(JsonNullable<String> unitOfMeasurement) {
        Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
        this.unitOfMeasurement = unitOfMeasurement;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillLineItem other = (BillLineItem) o;
        return 
            Objects.deepEquals(this.accountRef, other.accountRef) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.discountAmount, other.discountAmount) &&
            Objects.deepEquals(this.discountPercentage, other.discountPercentage) &&
            Objects.deepEquals(this.isDirectCost, other.isDirectCost) &&
            Objects.deepEquals(this.itemRef, other.itemRef) &&
            Objects.deepEquals(this.lineNumber, other.lineNumber) &&
            Objects.deepEquals(this.purchaseOrderLineRef, other.purchaseOrderLineRef) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.subTotal, other.subTotal) &&
            Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            Objects.deepEquals(this.taxRateRef, other.taxRateRef) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.tracking, other.tracking) &&
            Objects.deepEquals(this.trackingCategoryRefs, other.trackingCategoryRefs) &&
            Objects.deepEquals(this.unitAmount, other.unitAmount) &&
            Objects.deepEquals(this.unitOfMeasurement, other.unitOfMeasurement);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountRef,
            description,
            discountAmount,
            discountPercentage,
            isDirectCost,
            itemRef,
            lineNumber,
            purchaseOrderLineRef,
            quantity,
            subTotal,
            taxAmount,
            taxRateRef,
            totalAmount,
            tracking,
            trackingCategoryRefs,
            unitAmount,
            unitOfMeasurement);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillLineItem.class,
                "accountRef", accountRef,
                "description", description,
                "discountAmount", discountAmount,
                "discountPercentage", discountPercentage,
                "isDirectCost", isDirectCost,
                "itemRef", itemRef,
                "lineNumber", lineNumber,
                "purchaseOrderLineRef", purchaseOrderLineRef,
                "quantity", quantity,
                "subTotal", subTotal,
                "taxAmount", taxAmount,
                "taxRateRef", taxRateRef,
                "totalAmount", totalAmount,
                "tracking", tracking,
                "trackingCategoryRefs", trackingCategoryRefs,
                "unitAmount", unitAmount,
                "unitOfMeasurement", unitOfMeasurement);
    }
    
    public final static class Builder {
 
        private Optional<? extends AccountRef> accountRef = Optional.empty();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<? extends BigDecimal> discountAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends BigDecimal> discountPercentage = JsonNullable.undefined();
 
        private Optional<Boolean> isDirectCost = Optional.empty();
 
        private Optional<? extends ItemRef> itemRef = Optional.empty();
 
        private JsonNullable<String> lineNumber = JsonNullable.undefined();
 
        private Optional<? extends Zero> purchaseOrderLineRef = Optional.empty();
 
        private BigDecimal quantity;
 
        private JsonNullable<? extends BigDecimal> subTotal = JsonNullable.undefined();
 
        private JsonNullable<? extends BigDecimal> taxAmount = JsonNullable.undefined();
 
        private Optional<? extends TaxRateRef> taxRateRef = Optional.empty();
 
        private JsonNullable<? extends BigDecimal> totalAmount = JsonNullable.undefined();
 
        private Optional<? extends PropertieTracking> tracking = Optional.empty();
 
        private JsonNullable<? extends List<TrackingCategoryRef>> trackingCategoryRefs = JsonNullable.undefined();
 
        private BigDecimal unitAmount;
 
        private JsonNullable<String> unitOfMeasurement = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
         */
        public Builder accountRef(AccountRef accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = Optional.ofNullable(accountRef);
            return this;
        }

        /**
         * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
         */
        public Builder accountRef(Optional<? extends AccountRef> accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * Friendly name of the goods or services received.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Friendly name of the goods or services received.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Numerical value of any discounts applied.
         * 
         * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
         */
        public Builder discountAmount(BigDecimal discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * Numerical value of any discounts applied.
         * 
         * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
         */
        public Builder discountAmount(double discountAmount) {
            this.discountAmount = JsonNullable.of(BigDecimal.valueOf(discountAmount));
            return this;
        }

        /**
         * Numerical value of any discounts applied.
         * 
         * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
         */
        public Builder discountAmount(JsonNullable<? extends BigDecimal> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * Percentage rate of any discount applied to the bill.
         */
        public Builder discountPercentage(BigDecimal discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Percentage rate of any discount applied to the bill.
         */
        public Builder discountPercentage(double discountPercentage) {
            this.discountPercentage = JsonNullable.of(BigDecimal.valueOf(discountPercentage));
            return this;
        }

        /**
         * Percentage rate of any discount applied to the bill.
         */
        public Builder discountPercentage(JsonNullable<? extends BigDecimal> discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = discountPercentage;
            return this;
        }

        /**
         * The bill is a direct cost if `True`.
         */
        public Builder isDirectCost(boolean isDirectCost) {
            Utils.checkNotNull(isDirectCost, "isDirectCost");
            this.isDirectCost = Optional.ofNullable(isDirectCost);
            return this;
        }

        /**
         * The bill is a direct cost if `True`.
         */
        public Builder isDirectCost(Optional<Boolean> isDirectCost) {
            Utils.checkNotNull(isDirectCost, "isDirectCost");
            this.isDirectCost = isDirectCost;
            return this;
        }

        public Builder itemRef(ItemRef itemRef) {
            Utils.checkNotNull(itemRef, "itemRef");
            this.itemRef = Optional.ofNullable(itemRef);
            return this;
        }

        public Builder itemRef(Optional<? extends ItemRef> itemRef) {
            Utils.checkNotNull(itemRef, "itemRef");
            this.itemRef = itemRef;
            return this;
        }

        /**
         * The bill line's number.
         */
        public Builder lineNumber(String lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        /**
         * The bill line's number.
         */
        public Builder lineNumber(JsonNullable<String> lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = lineNumber;
            return this;
        }

        public Builder purchaseOrderLineRef(Zero purchaseOrderLineRef) {
            Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
            this.purchaseOrderLineRef = Optional.ofNullable(purchaseOrderLineRef);
            return this;
        }

        public Builder purchaseOrderLineRef(Optional<? extends Zero> purchaseOrderLineRef) {
            Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
            this.purchaseOrderLineRef = purchaseOrderLineRef;
            return this;
        }

        /**
         * Number of units of goods or services received.
         */
        public Builder quantity(double quantity) {
            this.quantity = BigDecimal.valueOf(quantity);
            return this;
        }

        /**
         * Number of units of goods or services received.
         */
        public Builder quantity(BigDecimal quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * Amount of the line, inclusive of discounts but exclusive of tax.
         */
        public Builder subTotal(BigDecimal subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Amount of the line, inclusive of discounts but exclusive of tax.
         */
        public Builder subTotal(double subTotal) {
            this.subTotal = JsonNullable.of(BigDecimal.valueOf(subTotal));
            return this;
        }

        /**
         * Amount of the line, inclusive of discounts but exclusive of tax.
         */
        public Builder subTotal(JsonNullable<? extends BigDecimal> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }

        /**
         * Amount of tax for the line.
         */
        public Builder taxAmount(BigDecimal taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * Amount of tax for the line.
         */
        public Builder taxAmount(double taxAmount) {
            this.taxAmount = JsonNullable.of(BigDecimal.valueOf(taxAmount));
            return this;
        }

        /**
         * Amount of tax for the line.
         */
        public Builder taxAmount(JsonNullable<? extends BigDecimal> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
         * 
         * Found on:
         * 
         * - Bill line items
         * - Bill Credit Note line items
         * - Credit Note line items
         * - Direct incomes line items
         * - Invoice line items
         * - Items
         */
        public Builder taxRateRef(TaxRateRef taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = Optional.ofNullable(taxRateRef);
            return this;
        }

        /**
         * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
         * 
         * Found on:
         * 
         * - Bill line items
         * - Bill Credit Note line items
         * - Credit Note line items
         * - Direct incomes line items
         * - Invoice line items
         * - Items
         */
        public Builder taxRateRef(Optional<? extends TaxRateRef> taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = taxRateRef;
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(BigDecimal totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(double totalAmount) {
            this.totalAmount = JsonNullable.of(BigDecimal.valueOf(totalAmount));
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(JsonNullable<? extends BigDecimal> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Categories, and a project and customer, against which the item is tracked.
         */
        public Builder tracking(PropertieTracking tracking) {
            Utils.checkNotNull(tracking, "tracking");
            this.tracking = Optional.ofNullable(tracking);
            return this;
        }

        /**
         * Categories, and a project and customer, against which the item is tracked.
         */
        public Builder tracking(Optional<? extends PropertieTracking> tracking) {
            Utils.checkNotNull(tracking, "tracking");
            this.tracking = tracking;
            return this;
        }

        /**
         * Collection of categories against which this item is tracked.
         */
        public Builder trackingCategoryRefs(List<TrackingCategoryRef> trackingCategoryRefs) {
            Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
            this.trackingCategoryRefs = JsonNullable.of(trackingCategoryRefs);
            return this;
        }

        /**
         * Collection of categories against which this item is tracked.
         */
        public Builder trackingCategoryRefs(JsonNullable<? extends List<TrackingCategoryRef>> trackingCategoryRefs) {
            Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
            this.trackingCategoryRefs = trackingCategoryRefs;
            return this;
        }

        /**
         * Price of each unit of goods or services.
         */
        public Builder unitAmount(double unitAmount) {
            this.unitAmount = BigDecimal.valueOf(unitAmount);
            return this;
        }

        /**
         * Price of each unit of goods or services.
         */
        public Builder unitAmount(BigDecimal unitAmount) {
            Utils.checkNotNull(unitAmount, "unitAmount");
            this.unitAmount = unitAmount;
            return this;
        }

        /**
         * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
         */
        public Builder unitOfMeasurement(String unitOfMeasurement) {
            Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
            this.unitOfMeasurement = JsonNullable.of(unitOfMeasurement);
            return this;
        }

        /**
         * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
         */
        public Builder unitOfMeasurement(JsonNullable<String> unitOfMeasurement) {
            Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
            this.unitOfMeasurement = unitOfMeasurement;
            return this;
        }
        
        public BillLineItem build() {
            return new BillLineItem(
                accountRef,
                description,
                discountAmount,
                discountPercentage,
                isDirectCost,
                itemRef,
                lineNumber,
                purchaseOrderLineRef,
                quantity,
                subTotal,
                taxAmount,
                taxRateRef,
                totalAmount,
                tracking,
                trackingCategoryRefs,
                unitAmount,
                unitOfMeasurement);
        }
    }
}

