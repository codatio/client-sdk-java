/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.accounting.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BillLineItem {

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountRef")
    private Optional<? extends AccountRef> accountRef;

    /**
     * Friendly name of the goods or services received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<? extends String> description;

    /**
     * Numerical value of any discounts applied.
     * 
     * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    private JsonNullable<? extends Double> discountAmount;

    /**
     * Percentage rate of any discount applied to the bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountPercentage")
    private JsonNullable<? extends Double> discountPercentage;

    /**
     * The bill is a direct cost if `True`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDirectCost")
    private Optional<? extends Boolean> isDirectCost;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemRef")
    private Optional<? extends ItemRef> itemRef;

    /**
     * The bill line's number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineNumber")
    private JsonNullable<? extends String> lineNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchaseOrderLineRef")
    private Optional<? extends Zero> purchaseOrderLineRef;

    /**
     * Number of units of goods or services received.
     */
    @JsonProperty("quantity")
    private double quantity;

    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subTotal")
    private JsonNullable<? extends Double> subTotal;

    /**
     * Amount of tax for the line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    private JsonNullable<? extends Double> taxAmount;

    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     * 
     * Found on:
     * 
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRateRef")
    private Optional<? extends TaxRateRef> taxRateRef;

    /**
     * Total amount of the line, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private JsonNullable<? extends Double> totalAmount;

    /**
     * Categories, and a project and customer, against which the item is tracked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tracking")
    private Optional<? extends PropertieTracking> tracking;

    /**
     * Collection of categories against which this item is tracked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingCategoryRefs")
    private JsonNullable<? extends java.util.List<TrackingCategoryRef>> trackingCategoryRefs;

    /**
     * Price of each unit of goods or services.
     */
    @JsonProperty("unitAmount")
    private double unitAmount;

    /**
     * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitOfMeasurement")
    private JsonNullable<? extends String> unitOfMeasurement;

    public BillLineItem(
            @JsonProperty("accountRef") Optional<? extends AccountRef> accountRef,
            @JsonProperty("description") JsonNullable<? extends String> description,
            @JsonProperty("discountAmount") JsonNullable<? extends Double> discountAmount,
            @JsonProperty("discountPercentage") JsonNullable<? extends Double> discountPercentage,
            @JsonProperty("isDirectCost") Optional<? extends Boolean> isDirectCost,
            @JsonProperty("itemRef") Optional<? extends ItemRef> itemRef,
            @JsonProperty("lineNumber") JsonNullable<? extends String> lineNumber,
            @JsonProperty("purchaseOrderLineRef") Optional<? extends Zero> purchaseOrderLineRef,
            @JsonProperty("quantity") double quantity,
            @JsonProperty("subTotal") JsonNullable<? extends Double> subTotal,
            @JsonProperty("taxAmount") JsonNullable<? extends Double> taxAmount,
            @JsonProperty("taxRateRef") Optional<? extends TaxRateRef> taxRateRef,
            @JsonProperty("totalAmount") JsonNullable<? extends Double> totalAmount,
            @JsonProperty("tracking") Optional<? extends PropertieTracking> tracking,
            @JsonProperty("trackingCategoryRefs") JsonNullable<? extends java.util.List<TrackingCategoryRef>> trackingCategoryRefs,
            @JsonProperty("unitAmount") double unitAmount,
            @JsonProperty("unitOfMeasurement") JsonNullable<? extends String> unitOfMeasurement) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        Utils.checkNotNull(isDirectCost, "isDirectCost");
        Utils.checkNotNull(itemRef, "itemRef");
        Utils.checkNotNull(lineNumber, "lineNumber");
        Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(tracking, "tracking");
        Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
        Utils.checkNotNull(unitAmount, "unitAmount");
        Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
        this.accountRef = accountRef;
        this.description = description;
        this.discountAmount = discountAmount;
        this.discountPercentage = discountPercentage;
        this.isDirectCost = isDirectCost;
        this.itemRef = itemRef;
        this.lineNumber = lineNumber;
        this.purchaseOrderLineRef = purchaseOrderLineRef;
        this.quantity = quantity;
        this.subTotal = subTotal;
        this.taxAmount = taxAmount;
        this.taxRateRef = taxRateRef;
        this.totalAmount = totalAmount;
        this.tracking = tracking;
        this.trackingCategoryRefs = trackingCategoryRefs;
        this.unitAmount = unitAmount;
        this.unitOfMeasurement = unitOfMeasurement;
    }

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    public Optional<? extends AccountRef> accountRef() {
        return accountRef;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public JsonNullable<? extends String> description() {
        return description;
    }

    /**
     * Numerical value of any discounts applied.
     * 
     * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
     */
    public JsonNullable<? extends Double> discountAmount() {
        return discountAmount;
    }

    /**
     * Percentage rate of any discount applied to the bill.
     */
    public JsonNullable<? extends Double> discountPercentage() {
        return discountPercentage;
    }

    /**
     * The bill is a direct cost if `True`.
     */
    public Optional<? extends Boolean> isDirectCost() {
        return isDirectCost;
    }

    public Optional<? extends ItemRef> itemRef() {
        return itemRef;
    }

    /**
     * The bill line's number.
     */
    public JsonNullable<? extends String> lineNumber() {
        return lineNumber;
    }

    public Optional<? extends Zero> purchaseOrderLineRef() {
        return purchaseOrderLineRef;
    }

    /**
     * Number of units of goods or services received.
     */
    public double quantity() {
        return quantity;
    }

    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    public JsonNullable<? extends Double> subTotal() {
        return subTotal;
    }

    /**
     * Amount of tax for the line.
     */
    public JsonNullable<? extends Double> taxAmount() {
        return taxAmount;
    }

    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     * 
     * Found on:
     * 
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    public Optional<? extends TaxRateRef> taxRateRef() {
        return taxRateRef;
    }

    /**
     * Total amount of the line, including tax.
     */
    public JsonNullable<? extends Double> totalAmount() {
        return totalAmount;
    }

    /**
     * Categories, and a project and customer, against which the item is tracked.
     */
    public Optional<? extends PropertieTracking> tracking() {
        return tracking;
    }

    /**
     * Collection of categories against which this item is tracked.
     */
    public JsonNullable<? extends java.util.List<TrackingCategoryRef>> trackingCategoryRefs() {
        return trackingCategoryRefs;
    }

    /**
     * Price of each unit of goods or services.
     */
    public double unitAmount() {
        return unitAmount;
    }

    /**
     * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
     */
    public JsonNullable<? extends String> unitOfMeasurement() {
        return unitOfMeasurement;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    public BillLineItem withAccountRef(AccountRef accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = Optional.ofNullable(accountRef);
        return this;
    }
    
    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    public BillLineItem withAccountRef(Optional<? extends AccountRef> accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public BillLineItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public BillLineItem withDescription(JsonNullable<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Numerical value of any discounts applied.
     * 
     * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
     */
    public BillLineItem withDiscountAmount(double discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = JsonNullable.of(discountAmount);
        return this;
    }

    /**
     * Numerical value of any discounts applied.
     * 
     * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
     */
    public BillLineItem withDiscountAmount(JsonNullable<? extends Double> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    /**
     * Percentage rate of any discount applied to the bill.
     */
    public BillLineItem withDiscountPercentage(double discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = JsonNullable.of(discountPercentage);
        return this;
    }

    /**
     * Percentage rate of any discount applied to the bill.
     */
    public BillLineItem withDiscountPercentage(JsonNullable<? extends Double> discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * The bill is a direct cost if `True`.
     */
    public BillLineItem withIsDirectCost(boolean isDirectCost) {
        Utils.checkNotNull(isDirectCost, "isDirectCost");
        this.isDirectCost = Optional.ofNullable(isDirectCost);
        return this;
    }
    
    /**
     * The bill is a direct cost if `True`.
     */
    public BillLineItem withIsDirectCost(Optional<? extends Boolean> isDirectCost) {
        Utils.checkNotNull(isDirectCost, "isDirectCost");
        this.isDirectCost = isDirectCost;
        return this;
    }

    public BillLineItem withItemRef(ItemRef itemRef) {
        Utils.checkNotNull(itemRef, "itemRef");
        this.itemRef = Optional.ofNullable(itemRef);
        return this;
    }
    
    public BillLineItem withItemRef(Optional<? extends ItemRef> itemRef) {
        Utils.checkNotNull(itemRef, "itemRef");
        this.itemRef = itemRef;
        return this;
    }

    /**
     * The bill line's number.
     */
    public BillLineItem withLineNumber(String lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = JsonNullable.of(lineNumber);
        return this;
    }

    /**
     * The bill line's number.
     */
    public BillLineItem withLineNumber(JsonNullable<? extends String> lineNumber) {
        Utils.checkNotNull(lineNumber, "lineNumber");
        this.lineNumber = lineNumber;
        return this;
    }

    public BillLineItem withPurchaseOrderLineRef(Zero purchaseOrderLineRef) {
        Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
        this.purchaseOrderLineRef = Optional.ofNullable(purchaseOrderLineRef);
        return this;
    }
    
    public BillLineItem withPurchaseOrderLineRef(Optional<? extends Zero> purchaseOrderLineRef) {
        Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
        this.purchaseOrderLineRef = purchaseOrderLineRef;
        return this;
    }

    /**
     * Number of units of goods or services received.
     */
    public BillLineItem withQuantity(double quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    public BillLineItem withSubTotal(double subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = JsonNullable.of(subTotal);
        return this;
    }

    /**
     * Amount of the line, inclusive of discounts but exclusive of tax.
     */
    public BillLineItem withSubTotal(JsonNullable<? extends Double> subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Amount of tax for the line.
     */
    public BillLineItem withTaxAmount(double taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = JsonNullable.of(taxAmount);
        return this;
    }

    /**
     * Amount of tax for the line.
     */
    public BillLineItem withTaxAmount(JsonNullable<? extends Double> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     * 
     * Found on:
     * 
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    public BillLineItem withTaxRateRef(TaxRateRef taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = Optional.ofNullable(taxRateRef);
        return this;
    }
    
    /**
     * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
     * 
     * Found on:
     * 
     * - Bill line items
     * - Bill Credit Note line items
     * - Credit Note line items
     * - Direct incomes line items
     * - Invoice line items
     * - Items
     */
    public BillLineItem withTaxRateRef(Optional<? extends TaxRateRef> taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = taxRateRef;
        return this;
    }

    /**
     * Total amount of the line, including tax.
     */
    public BillLineItem withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    /**
     * Total amount of the line, including tax.
     */
    public BillLineItem withTotalAmount(JsonNullable<? extends Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Categories, and a project and customer, against which the item is tracked.
     */
    public BillLineItem withTracking(PropertieTracking tracking) {
        Utils.checkNotNull(tracking, "tracking");
        this.tracking = Optional.ofNullable(tracking);
        return this;
    }
    
    /**
     * Categories, and a project and customer, against which the item is tracked.
     */
    public BillLineItem withTracking(Optional<? extends PropertieTracking> tracking) {
        Utils.checkNotNull(tracking, "tracking");
        this.tracking = tracking;
        return this;
    }

    /**
     * Collection of categories against which this item is tracked.
     */
    public BillLineItem withTrackingCategoryRefs(java.util.List<TrackingCategoryRef> trackingCategoryRefs) {
        Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
        this.trackingCategoryRefs = JsonNullable.of(trackingCategoryRefs);
        return this;
    }

    /**
     * Collection of categories against which this item is tracked.
     */
    public BillLineItem withTrackingCategoryRefs(JsonNullable<? extends java.util.List<TrackingCategoryRef>> trackingCategoryRefs) {
        Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
        this.trackingCategoryRefs = trackingCategoryRefs;
        return this;
    }

    /**
     * Price of each unit of goods or services.
     */
    public BillLineItem withUnitAmount(double unitAmount) {
        Utils.checkNotNull(unitAmount, "unitAmount");
        this.unitAmount = unitAmount;
        return this;
    }

    /**
     * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
     */
    public BillLineItem withUnitOfMeasurement(String unitOfMeasurement) {
        Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
        this.unitOfMeasurement = JsonNullable.of(unitOfMeasurement);
        return this;
    }

    /**
     * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
     */
    public BillLineItem withUnitOfMeasurement(JsonNullable<? extends String> unitOfMeasurement) {
        Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
        this.unitOfMeasurement = unitOfMeasurement;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillLineItem other = (BillLineItem) o;
        return 
            java.util.Objects.deepEquals(this.accountRef, other.accountRef) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.discountAmount, other.discountAmount) &&
            java.util.Objects.deepEquals(this.discountPercentage, other.discountPercentage) &&
            java.util.Objects.deepEquals(this.isDirectCost, other.isDirectCost) &&
            java.util.Objects.deepEquals(this.itemRef, other.itemRef) &&
            java.util.Objects.deepEquals(this.lineNumber, other.lineNumber) &&
            java.util.Objects.deepEquals(this.purchaseOrderLineRef, other.purchaseOrderLineRef) &&
            java.util.Objects.deepEquals(this.quantity, other.quantity) &&
            java.util.Objects.deepEquals(this.subTotal, other.subTotal) &&
            java.util.Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            java.util.Objects.deepEquals(this.taxRateRef, other.taxRateRef) &&
            java.util.Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            java.util.Objects.deepEquals(this.tracking, other.tracking) &&
            java.util.Objects.deepEquals(this.trackingCategoryRefs, other.trackingCategoryRefs) &&
            java.util.Objects.deepEquals(this.unitAmount, other.unitAmount) &&
            java.util.Objects.deepEquals(this.unitOfMeasurement, other.unitOfMeasurement);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountRef,
            description,
            discountAmount,
            discountPercentage,
            isDirectCost,
            itemRef,
            lineNumber,
            purchaseOrderLineRef,
            quantity,
            subTotal,
            taxAmount,
            taxRateRef,
            totalAmount,
            tracking,
            trackingCategoryRefs,
            unitAmount,
            unitOfMeasurement);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillLineItem.class,
                "accountRef", accountRef,
                "description", description,
                "discountAmount", discountAmount,
                "discountPercentage", discountPercentage,
                "isDirectCost", isDirectCost,
                "itemRef", itemRef,
                "lineNumber", lineNumber,
                "purchaseOrderLineRef", purchaseOrderLineRef,
                "quantity", quantity,
                "subTotal", subTotal,
                "taxAmount", taxAmount,
                "taxRateRef", taxRateRef,
                "totalAmount", totalAmount,
                "tracking", tracking,
                "trackingCategoryRefs", trackingCategoryRefs,
                "unitAmount", unitAmount,
                "unitOfMeasurement", unitOfMeasurement);
    }
    
    public final static class Builder {
 
        private Optional<? extends AccountRef> accountRef = Optional.empty();
 
        private JsonNullable<? extends String> description = JsonNullable.undefined();
 
        private JsonNullable<? extends Double> discountAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends Double> discountPercentage = JsonNullable.undefined();
 
        private Optional<? extends Boolean> isDirectCost = Optional.empty();
 
        private Optional<? extends ItemRef> itemRef = Optional.empty();
 
        private JsonNullable<? extends String> lineNumber = JsonNullable.undefined();
 
        private Optional<? extends Zero> purchaseOrderLineRef = Optional.empty();
 
        private Double quantity;
 
        private JsonNullable<? extends Double> subTotal = JsonNullable.undefined();
 
        private JsonNullable<? extends Double> taxAmount = JsonNullable.undefined();
 
        private Optional<? extends TaxRateRef> taxRateRef = Optional.empty();
 
        private JsonNullable<? extends Double> totalAmount = JsonNullable.undefined();
 
        private Optional<? extends PropertieTracking> tracking = Optional.empty();
 
        private JsonNullable<? extends java.util.List<TrackingCategoryRef>> trackingCategoryRefs = JsonNullable.undefined();
 
        private Double unitAmount;
 
        private JsonNullable<? extends String> unitOfMeasurement = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
         */
        public Builder accountRef(AccountRef accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = Optional.ofNullable(accountRef);
            return this;
        }
        
        /**
         * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
         */
        public Builder accountRef(Optional<? extends AccountRef> accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * Friendly name of the goods or services received.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Friendly name of the goods or services received.
         */
        public Builder description(JsonNullable<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Numerical value of any discounts applied.
         * 
         * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
         */
        public Builder discountAmount(double discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = JsonNullable.of(discountAmount);
            return this;
        }

        /**
         * Numerical value of any discounts applied.
         * 
         * Do not use to apply discounts in Oracle NetSuite—see Oracle NetSuite integration reference.
         */
        public Builder discountAmount(JsonNullable<? extends Double> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * Percentage rate of any discount applied to the bill.
         */
        public Builder discountPercentage(double discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = JsonNullable.of(discountPercentage);
            return this;
        }

        /**
         * Percentage rate of any discount applied to the bill.
         */
        public Builder discountPercentage(JsonNullable<? extends Double> discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = discountPercentage;
            return this;
        }

        /**
         * The bill is a direct cost if `True`.
         */
        public Builder isDirectCost(boolean isDirectCost) {
            Utils.checkNotNull(isDirectCost, "isDirectCost");
            this.isDirectCost = Optional.ofNullable(isDirectCost);
            return this;
        }
        
        /**
         * The bill is a direct cost if `True`.
         */
        public Builder isDirectCost(Optional<? extends Boolean> isDirectCost) {
            Utils.checkNotNull(isDirectCost, "isDirectCost");
            this.isDirectCost = isDirectCost;
            return this;
        }

        public Builder itemRef(ItemRef itemRef) {
            Utils.checkNotNull(itemRef, "itemRef");
            this.itemRef = Optional.ofNullable(itemRef);
            return this;
        }
        
        public Builder itemRef(Optional<? extends ItemRef> itemRef) {
            Utils.checkNotNull(itemRef, "itemRef");
            this.itemRef = itemRef;
            return this;
        }

        /**
         * The bill line's number.
         */
        public Builder lineNumber(String lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = JsonNullable.of(lineNumber);
            return this;
        }

        /**
         * The bill line's number.
         */
        public Builder lineNumber(JsonNullable<? extends String> lineNumber) {
            Utils.checkNotNull(lineNumber, "lineNumber");
            this.lineNumber = lineNumber;
            return this;
        }

        public Builder purchaseOrderLineRef(Zero purchaseOrderLineRef) {
            Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
            this.purchaseOrderLineRef = Optional.ofNullable(purchaseOrderLineRef);
            return this;
        }
        
        public Builder purchaseOrderLineRef(Optional<? extends Zero> purchaseOrderLineRef) {
            Utils.checkNotNull(purchaseOrderLineRef, "purchaseOrderLineRef");
            this.purchaseOrderLineRef = purchaseOrderLineRef;
            return this;
        }

        /**
         * Number of units of goods or services received.
         */
        public Builder quantity(double quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * Amount of the line, inclusive of discounts but exclusive of tax.
         */
        public Builder subTotal(double subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = JsonNullable.of(subTotal);
            return this;
        }

        /**
         * Amount of the line, inclusive of discounts but exclusive of tax.
         */
        public Builder subTotal(JsonNullable<? extends Double> subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }

        /**
         * Amount of tax for the line.
         */
        public Builder taxAmount(double taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = JsonNullable.of(taxAmount);
            return this;
        }

        /**
         * Amount of tax for the line.
         */
        public Builder taxAmount(JsonNullable<? extends Double> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
         * 
         * Found on:
         * 
         * - Bill line items
         * - Bill Credit Note line items
         * - Credit Note line items
         * - Direct incomes line items
         * - Invoice line items
         * - Items
         */
        public Builder taxRateRef(TaxRateRef taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = Optional.ofNullable(taxRateRef);
            return this;
        }
        
        /**
         * Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
         * 
         * Found on:
         * 
         * - Bill line items
         * - Bill Credit Note line items
         * - Credit Note line items
         * - Direct incomes line items
         * - Invoice line items
         * - Items
         */
        public Builder taxRateRef(Optional<? extends TaxRateRef> taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = taxRateRef;
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(JsonNullable<? extends Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Categories, and a project and customer, against which the item is tracked.
         */
        public Builder tracking(PropertieTracking tracking) {
            Utils.checkNotNull(tracking, "tracking");
            this.tracking = Optional.ofNullable(tracking);
            return this;
        }
        
        /**
         * Categories, and a project and customer, against which the item is tracked.
         */
        public Builder tracking(Optional<? extends PropertieTracking> tracking) {
            Utils.checkNotNull(tracking, "tracking");
            this.tracking = tracking;
            return this;
        }

        /**
         * Collection of categories against which this item is tracked.
         */
        public Builder trackingCategoryRefs(java.util.List<TrackingCategoryRef> trackingCategoryRefs) {
            Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
            this.trackingCategoryRefs = JsonNullable.of(trackingCategoryRefs);
            return this;
        }

        /**
         * Collection of categories against which this item is tracked.
         */
        public Builder trackingCategoryRefs(JsonNullable<? extends java.util.List<TrackingCategoryRef>> trackingCategoryRefs) {
            Utils.checkNotNull(trackingCategoryRefs, "trackingCategoryRefs");
            this.trackingCategoryRefs = trackingCategoryRefs;
            return this;
        }

        /**
         * Price of each unit of goods or services.
         */
        public Builder unitAmount(double unitAmount) {
            Utils.checkNotNull(unitAmount, "unitAmount");
            this.unitAmount = unitAmount;
            return this;
        }

        /**
         * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
         */
        public Builder unitOfMeasurement(String unitOfMeasurement) {
            Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
            this.unitOfMeasurement = JsonNullable.of(unitOfMeasurement);
            return this;
        }

        /**
         * The measurement which defines a unit for this item (e.g. 'kilogram', 'litre').
         */
        public Builder unitOfMeasurement(JsonNullable<? extends String> unitOfMeasurement) {
            Utils.checkNotNull(unitOfMeasurement, "unitOfMeasurement");
            this.unitOfMeasurement = unitOfMeasurement;
            return this;
        }
        
        public BillLineItem build() {
            return new BillLineItem(
                accountRef,
                description,
                discountAmount,
                discountPercentage,
                isDirectCost,
                itemRef,
                lineNumber,
                purchaseOrderLineRef,
                quantity,
                subTotal,
                taxAmount,
                taxRateRef,
                totalAmount,
                tracking,
                trackingCategoryRefs,
                unitAmount,
                unitOfMeasurement);
        }
    }
}

