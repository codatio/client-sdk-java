/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * BillCreditNote - &gt; **Bill credit notes or credit notes?**
 * &gt; 
 * &gt; In Codat, bill credit notes represent accounts payable only. For accounts receivable, see [Credit notes](https://docs.codat.io/accounting-api#/schemas/CreditNote).
 * 
 * View the coverage for bill credit notes in the &lt;a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&amp;dataType=billCreditNotes" target="_blank"&gt;Data coverage explorer&lt;/a&gt;.
 * 
 * ## Overview
 * 
 * A bill credit note is issued by a supplier for the purpose of recording credit. For example, if a supplier was unable to fulfil an order that was placed by a business, or delivered damaged goods, they would issue a bill credit note. A bill credit note reduces the amount a business owes to the supplier. It can be refunded to the business or used to pay off future bills.
 * 
 * In the Codat API, a bill credit note is an accounts payable record issued by a [supplier](https://docs.codat.io/accounting-api#/schemas/Supplier). 
 * 
 * A bill credit note includes details of:
 * * The original and remaining credit.
 * * Any allocations of the credit against other records, such as [bills](https://docs.codat.io/accounting-api#/schemas/Bill).
 * * The supplier that issued the bill credit note.
 */

public class BillCreditNote {

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocatedOnDate")
    private Optional<String> allocatedOnDate;

    /**
     * Friendly reference for the bill credit note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billCreditNoteNumber")
    private JsonNullable<String> billCreditNoteNumber;

    /**
     * An array of records the credit note was created from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdFromRefs")
    private JsonNullable<? extends List<InvoiceTo>> createdFromRefs;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyRate")
    private JsonNullable<? extends BigDecimal> currencyRate;

    /**
     * Percentage rate of any discount applied to the bill credit note.
     */
    @JsonProperty("discountPercentage")
    private BigDecimal discountPercentage;

    /**
     * Identifier for the bill credit note that is unique to a company in the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issueDate")
    private Optional<String> issueDate;

    /**
     * An array of line 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineItems")
    private JsonNullable<? extends List<BillCreditNoteLineItem>> lineItems;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends Metadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<String> modifiedDate;

    /**
     * Any additional information about the bill credit note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;

    /**
     * An array of payment allocations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentAllocations")
    private JsonNullable<? extends List<PaymentAllocationItems>> paymentAllocations;

    /**
     * Amount of the bill credit note that is still outstanding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remainingCredit")
    private Optional<? extends BigDecimal> remainingCredit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<String> sourceModifiedDate;

    /**
     * Current state of the bill credit note
     */
    @JsonProperty("status")
    private BillCreditNoteStatus status;

    /**
     * Total amount of the bill credit note, including discounts but excluding tax.
     */
    @JsonProperty("subTotal")
    private BigDecimal subTotal;

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalData")
    private Optional<? extends SupplementalData> supplementalData;

    /**
     * Reference to the supplier the record relates to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierRef")
    private Optional<? extends SupplierRef> supplierRef;

    /**
     * Total amount of credit that has been applied to the business' account with the supplier, including discounts and tax.
     */
    @JsonProperty("totalAmount")
    private BigDecimal totalAmount;

    /**
     * Total value of any discounts applied.
     */
    @JsonProperty("totalDiscount")
    private BigDecimal totalDiscount;

    /**
     * Amount of tax included in the bill credit note.
     */
    @JsonProperty("totalTaxAmount")
    private BigDecimal totalTaxAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withholdingTax")
    private JsonNullable<? extends List<WithholdingTaxItems>> withholdingTax;

    @JsonCreator
    public BillCreditNote(
            @JsonProperty("allocatedOnDate") Optional<String> allocatedOnDate,
            @JsonProperty("billCreditNoteNumber") JsonNullable<String> billCreditNoteNumber,
            @JsonProperty("createdFromRefs") JsonNullable<? extends List<InvoiceTo>> createdFromRefs,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("currencyRate") JsonNullable<? extends BigDecimal> currencyRate,
            @JsonProperty("discountPercentage") BigDecimal discountPercentage,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("issueDate") Optional<String> issueDate,
            @JsonProperty("lineItems") JsonNullable<? extends List<BillCreditNoteLineItem>> lineItems,
            @JsonProperty("metadata") Optional<? extends Metadata> metadata,
            @JsonProperty("modifiedDate") Optional<String> modifiedDate,
            @JsonProperty("note") JsonNullable<String> note,
            @JsonProperty("paymentAllocations") JsonNullable<? extends List<PaymentAllocationItems>> paymentAllocations,
            @JsonProperty("remainingCredit") Optional<? extends BigDecimal> remainingCredit,
            @JsonProperty("sourceModifiedDate") Optional<String> sourceModifiedDate,
            @JsonProperty("status") BillCreditNoteStatus status,
            @JsonProperty("subTotal") BigDecimal subTotal,
            @JsonProperty("supplementalData") Optional<? extends SupplementalData> supplementalData,
            @JsonProperty("supplierRef") Optional<? extends SupplierRef> supplierRef,
            @JsonProperty("totalAmount") BigDecimal totalAmount,
            @JsonProperty("totalDiscount") BigDecimal totalDiscount,
            @JsonProperty("totalTaxAmount") BigDecimal totalTaxAmount,
            @JsonProperty("withholdingTax") JsonNullable<? extends List<WithholdingTaxItems>> withholdingTax) {
        Utils.checkNotNull(allocatedOnDate, "allocatedOnDate");
        Utils.checkNotNull(billCreditNoteNumber, "billCreditNoteNumber");
        Utils.checkNotNull(createdFromRefs, "createdFromRefs");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(issueDate, "issueDate");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        Utils.checkNotNull(remainingCredit, "remainingCredit");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(supplementalData, "supplementalData");
        Utils.checkNotNull(supplierRef, "supplierRef");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        Utils.checkNotNull(totalTaxAmount, "totalTaxAmount");
        Utils.checkNotNull(withholdingTax, "withholdingTax");
        this.allocatedOnDate = allocatedOnDate;
        this.billCreditNoteNumber = billCreditNoteNumber;
        this.createdFromRefs = createdFromRefs;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.discountPercentage = discountPercentage;
        this.id = id;
        this.issueDate = issueDate;
        this.lineItems = lineItems;
        this.metadata = metadata;
        this.modifiedDate = modifiedDate;
        this.note = note;
        this.paymentAllocations = paymentAllocations;
        this.remainingCredit = remainingCredit;
        this.sourceModifiedDate = sourceModifiedDate;
        this.status = status;
        this.subTotal = subTotal;
        this.supplementalData = supplementalData;
        this.supplierRef = supplierRef;
        this.totalAmount = totalAmount;
        this.totalDiscount = totalDiscount;
        this.totalTaxAmount = totalTaxAmount;
        this.withholdingTax = withholdingTax;
    }
    
    public BillCreditNote(
            BigDecimal discountPercentage,
            BillCreditNoteStatus status,
            BigDecimal subTotal,
            BigDecimal totalAmount,
            BigDecimal totalDiscount,
            BigDecimal totalTaxAmount) {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), discountPercentage, Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), status, subTotal, Optional.empty(), Optional.empty(), totalAmount, totalDiscount, totalTaxAmount, JsonNullable.undefined());
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> allocatedOnDate() {
        return allocatedOnDate;
    }

    /**
     * Friendly reference for the bill credit note.
     */
    @JsonIgnore
    public JsonNullable<String> billCreditNoteNumber() {
        return billCreditNoteNumber;
    }

    /**
     * An array of records the credit note was created from.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<InvoiceTo>> createdFromRefs() {
        return (JsonNullable<List<InvoiceTo>>) createdFromRefs;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> currencyRate() {
        return (JsonNullable<BigDecimal>) currencyRate;
    }

    /**
     * Percentage rate of any discount applied to the bill credit note.
     */
    @JsonIgnore
    public BigDecimal discountPercentage() {
        return discountPercentage;
    }

    /**
     * Identifier for the bill credit note that is unique to a company in the accounting software.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> issueDate() {
        return issueDate;
    }

    /**
     * An array of line 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<BillCreditNoteLineItem>> lineItems() {
        return (JsonNullable<List<BillCreditNoteLineItem>>) lineItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Metadata> metadata() {
        return (Optional<Metadata>) metadata;
    }

    @JsonIgnore
    public Optional<String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * Any additional information about the bill credit note.
     */
    @JsonIgnore
    public JsonNullable<String> note() {
        return note;
    }

    /**
     * An array of payment allocations.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<PaymentAllocationItems>> paymentAllocations() {
        return (JsonNullable<List<PaymentAllocationItems>>) paymentAllocations;
    }

    /**
     * Amount of the bill credit note that is still outstanding.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> remainingCredit() {
        return (Optional<BigDecimal>) remainingCredit;
    }

    @JsonIgnore
    public Optional<String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * Current state of the bill credit note
     */
    @JsonIgnore
    public BillCreditNoteStatus status() {
        return status;
    }

    /**
     * Total amount of the bill credit note, including discounts but excluding tax.
     */
    @JsonIgnore
    public BigDecimal subTotal() {
        return subTotal;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SupplementalData> supplementalData() {
        return (Optional<SupplementalData>) supplementalData;
    }

    /**
     * Reference to the supplier the record relates to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SupplierRef> supplierRef() {
        return (Optional<SupplierRef>) supplierRef;
    }

    /**
     * Total amount of credit that has been applied to the business' account with the supplier, including discounts and tax.
     */
    @JsonIgnore
    public BigDecimal totalAmount() {
        return totalAmount;
    }

    /**
     * Total value of any discounts applied.
     */
    @JsonIgnore
    public BigDecimal totalDiscount() {
        return totalDiscount;
    }

    /**
     * Amount of tax included in the bill credit note.
     */
    @JsonIgnore
    public BigDecimal totalTaxAmount() {
        return totalTaxAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<WithholdingTaxItems>> withholdingTax() {
        return (JsonNullable<List<WithholdingTaxItems>>) withholdingTax;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public BillCreditNote withAllocatedOnDate(String allocatedOnDate) {
        Utils.checkNotNull(allocatedOnDate, "allocatedOnDate");
        this.allocatedOnDate = Optional.ofNullable(allocatedOnDate);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public BillCreditNote withAllocatedOnDate(Optional<String> allocatedOnDate) {
        Utils.checkNotNull(allocatedOnDate, "allocatedOnDate");
        this.allocatedOnDate = allocatedOnDate;
        return this;
    }

    /**
     * Friendly reference for the bill credit note.
     */
    public BillCreditNote withBillCreditNoteNumber(String billCreditNoteNumber) {
        Utils.checkNotNull(billCreditNoteNumber, "billCreditNoteNumber");
        this.billCreditNoteNumber = JsonNullable.of(billCreditNoteNumber);
        return this;
    }

    /**
     * Friendly reference for the bill credit note.
     */
    public BillCreditNote withBillCreditNoteNumber(JsonNullable<String> billCreditNoteNumber) {
        Utils.checkNotNull(billCreditNoteNumber, "billCreditNoteNumber");
        this.billCreditNoteNumber = billCreditNoteNumber;
        return this;
    }

    /**
     * An array of records the credit note was created from.
     */
    public BillCreditNote withCreatedFromRefs(List<InvoiceTo> createdFromRefs) {
        Utils.checkNotNull(createdFromRefs, "createdFromRefs");
        this.createdFromRefs = JsonNullable.of(createdFromRefs);
        return this;
    }

    /**
     * An array of records the credit note was created from.
     */
    public BillCreditNote withCreatedFromRefs(JsonNullable<? extends List<InvoiceTo>> createdFromRefs) {
        Utils.checkNotNull(createdFromRefs, "createdFromRefs");
        this.createdFromRefs = createdFromRefs;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public BillCreditNote withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public BillCreditNote withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
     */
    public BillCreditNote withCurrencyRate(BigDecimal currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
         */
    public BillCreditNote withCurrencyRate(double currencyRate) {
        this.currencyRate = JsonNullable.of(BigDecimal.valueOf(currencyRate));
        return this;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
     */
    public BillCreditNote withCurrencyRate(JsonNullable<? extends BigDecimal> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

        /**
         * Percentage rate of any discount applied to the bill credit note.
         */
    public BillCreditNote withDiscountPercentage(double discountPercentage) {
        this.discountPercentage = BigDecimal.valueOf(discountPercentage);
        return this;
    }

    /**
     * Percentage rate of any discount applied to the bill credit note.
     */
    public BillCreditNote withDiscountPercentage(BigDecimal discountPercentage) {
        Utils.checkNotNull(discountPercentage, "discountPercentage");
        this.discountPercentage = discountPercentage;
        return this;
    }

    /**
     * Identifier for the bill credit note that is unique to a company in the accounting software.
     */
    public BillCreditNote withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Identifier for the bill credit note that is unique to a company in the accounting software.
     */
    public BillCreditNote withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public BillCreditNote withIssueDate(String issueDate) {
        Utils.checkNotNull(issueDate, "issueDate");
        this.issueDate = Optional.ofNullable(issueDate);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public BillCreditNote withIssueDate(Optional<String> issueDate) {
        Utils.checkNotNull(issueDate, "issueDate");
        this.issueDate = issueDate;
        return this;
    }

    /**
     * An array of line 
     */
    public BillCreditNote withLineItems(List<BillCreditNoteLineItem> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = JsonNullable.of(lineItems);
        return this;
    }

    /**
     * An array of line 
     */
    public BillCreditNote withLineItems(JsonNullable<? extends List<BillCreditNoteLineItem>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    public BillCreditNote withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public BillCreditNote withMetadata(Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public BillCreditNote withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }

    public BillCreditNote withModifiedDate(Optional<String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * Any additional information about the bill credit note.
     */
    public BillCreditNote withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = JsonNullable.of(note);
        return this;
    }

    /**
     * Any additional information about the bill credit note.
     */
    public BillCreditNote withNote(JsonNullable<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * An array of payment allocations.
     */
    public BillCreditNote withPaymentAllocations(List<PaymentAllocationItems> paymentAllocations) {
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        this.paymentAllocations = JsonNullable.of(paymentAllocations);
        return this;
    }

    /**
     * An array of payment allocations.
     */
    public BillCreditNote withPaymentAllocations(JsonNullable<? extends List<PaymentAllocationItems>> paymentAllocations) {
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        this.paymentAllocations = paymentAllocations;
        return this;
    }

    /**
     * Amount of the bill credit note that is still outstanding.
     */
    public BillCreditNote withRemainingCredit(BigDecimal remainingCredit) {
        Utils.checkNotNull(remainingCredit, "remainingCredit");
        this.remainingCredit = Optional.ofNullable(remainingCredit);
        return this;
    }

        /**
         * Amount of the bill credit note that is still outstanding.
         */
    public BillCreditNote withRemainingCredit(double remainingCredit) {
        this.remainingCredit = Optional.of(BigDecimal.valueOf(remainingCredit));
        return this;
    }

    /**
     * Amount of the bill credit note that is still outstanding.
     */
    public BillCreditNote withRemainingCredit(Optional<? extends BigDecimal> remainingCredit) {
        Utils.checkNotNull(remainingCredit, "remainingCredit");
        this.remainingCredit = remainingCredit;
        return this;
    }

    public BillCreditNote withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }

    public BillCreditNote withSourceModifiedDate(Optional<String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * Current state of the bill credit note
     */
    public BillCreditNote withStatus(BillCreditNoteStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

        /**
         * Total amount of the bill credit note, including discounts but excluding tax.
         */
    public BillCreditNote withSubTotal(double subTotal) {
        this.subTotal = BigDecimal.valueOf(subTotal);
        return this;
    }

    /**
     * Total amount of the bill credit note, including discounts but excluding tax.
     */
    public BillCreditNote withSubTotal(BigDecimal subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public BillCreditNote withSupplementalData(SupplementalData supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = Optional.ofNullable(supplementalData);
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public BillCreditNote withSupplementalData(Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = supplementalData;
        return this;
    }

    /**
     * Reference to the supplier the record relates to.
     */
    public BillCreditNote withSupplierRef(SupplierRef supplierRef) {
        Utils.checkNotNull(supplierRef, "supplierRef");
        this.supplierRef = Optional.ofNullable(supplierRef);
        return this;
    }

    /**
     * Reference to the supplier the record relates to.
     */
    public BillCreditNote withSupplierRef(Optional<? extends SupplierRef> supplierRef) {
        Utils.checkNotNull(supplierRef, "supplierRef");
        this.supplierRef = supplierRef;
        return this;
    }

        /**
         * Total amount of credit that has been applied to the business' account with the supplier, including discounts and tax.
         */
    public BillCreditNote withTotalAmount(double totalAmount) {
        this.totalAmount = BigDecimal.valueOf(totalAmount);
        return this;
    }

    /**
     * Total amount of credit that has been applied to the business' account with the supplier, including discounts and tax.
     */
    public BillCreditNote withTotalAmount(BigDecimal totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

        /**
         * Total value of any discounts applied.
         */
    public BillCreditNote withTotalDiscount(double totalDiscount) {
        this.totalDiscount = BigDecimal.valueOf(totalDiscount);
        return this;
    }

    /**
     * Total value of any discounts applied.
     */
    public BillCreditNote withTotalDiscount(BigDecimal totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = totalDiscount;
        return this;
    }

        /**
         * Amount of tax included in the bill credit note.
         */
    public BillCreditNote withTotalTaxAmount(double totalTaxAmount) {
        this.totalTaxAmount = BigDecimal.valueOf(totalTaxAmount);
        return this;
    }

    /**
     * Amount of tax included in the bill credit note.
     */
    public BillCreditNote withTotalTaxAmount(BigDecimal totalTaxAmount) {
        Utils.checkNotNull(totalTaxAmount, "totalTaxAmount");
        this.totalTaxAmount = totalTaxAmount;
        return this;
    }

    public BillCreditNote withWithholdingTax(List<WithholdingTaxItems> withholdingTax) {
        Utils.checkNotNull(withholdingTax, "withholdingTax");
        this.withholdingTax = JsonNullable.of(withholdingTax);
        return this;
    }

    public BillCreditNote withWithholdingTax(JsonNullable<? extends List<WithholdingTaxItems>> withholdingTax) {
        Utils.checkNotNull(withholdingTax, "withholdingTax");
        this.withholdingTax = withholdingTax;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillCreditNote other = (BillCreditNote) o;
        return 
            Objects.deepEquals(this.allocatedOnDate, other.allocatedOnDate) &&
            Objects.deepEquals(this.billCreditNoteNumber, other.billCreditNoteNumber) &&
            Objects.deepEquals(this.createdFromRefs, other.createdFromRefs) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyRate, other.currencyRate) &&
            Objects.deepEquals(this.discountPercentage, other.discountPercentage) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.issueDate, other.issueDate) &&
            Objects.deepEquals(this.lineItems, other.lineItems) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.paymentAllocations, other.paymentAllocations) &&
            Objects.deepEquals(this.remainingCredit, other.remainingCredit) &&
            Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.subTotal, other.subTotal) &&
            Objects.deepEquals(this.supplementalData, other.supplementalData) &&
            Objects.deepEquals(this.supplierRef, other.supplierRef) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.totalDiscount, other.totalDiscount) &&
            Objects.deepEquals(this.totalTaxAmount, other.totalTaxAmount) &&
            Objects.deepEquals(this.withholdingTax, other.withholdingTax);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            allocatedOnDate,
            billCreditNoteNumber,
            createdFromRefs,
            currency,
            currencyRate,
            discountPercentage,
            id,
            issueDate,
            lineItems,
            metadata,
            modifiedDate,
            note,
            paymentAllocations,
            remainingCredit,
            sourceModifiedDate,
            status,
            subTotal,
            supplementalData,
            supplierRef,
            totalAmount,
            totalDiscount,
            totalTaxAmount,
            withholdingTax);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillCreditNote.class,
                "allocatedOnDate", allocatedOnDate,
                "billCreditNoteNumber", billCreditNoteNumber,
                "createdFromRefs", createdFromRefs,
                "currency", currency,
                "currencyRate", currencyRate,
                "discountPercentage", discountPercentage,
                "id", id,
                "issueDate", issueDate,
                "lineItems", lineItems,
                "metadata", metadata,
                "modifiedDate", modifiedDate,
                "note", note,
                "paymentAllocations", paymentAllocations,
                "remainingCredit", remainingCredit,
                "sourceModifiedDate", sourceModifiedDate,
                "status", status,
                "subTotal", subTotal,
                "supplementalData", supplementalData,
                "supplierRef", supplierRef,
                "totalAmount", totalAmount,
                "totalDiscount", totalDiscount,
                "totalTaxAmount", totalTaxAmount,
                "withholdingTax", withholdingTax);
    }
    
    public final static class Builder {
 
        private Optional<String> allocatedOnDate = Optional.empty();
 
        private JsonNullable<String> billCreditNoteNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends List<InvoiceTo>> createdFromRefs = JsonNullable.undefined();
 
        private Optional<String> currency = Optional.empty();
 
        private JsonNullable<? extends BigDecimal> currencyRate = JsonNullable.undefined();
 
        private BigDecimal discountPercentage;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> issueDate = Optional.empty();
 
        private JsonNullable<? extends List<BillCreditNoteLineItem>> lineItems = JsonNullable.undefined();
 
        private Optional<? extends Metadata> metadata = Optional.empty();
 
        private Optional<String> modifiedDate = Optional.empty();
 
        private JsonNullable<String> note = JsonNullable.undefined();
 
        private JsonNullable<? extends List<PaymentAllocationItems>> paymentAllocations = JsonNullable.undefined();
 
        private Optional<? extends BigDecimal> remainingCredit = Optional.empty();
 
        private Optional<String> sourceModifiedDate = Optional.empty();
 
        private BillCreditNoteStatus status;
 
        private BigDecimal subTotal;
 
        private Optional<? extends SupplementalData> supplementalData = Optional.empty();
 
        private Optional<? extends SupplierRef> supplierRef = Optional.empty();
 
        private BigDecimal totalAmount;
 
        private BigDecimal totalDiscount;
 
        private BigDecimal totalTaxAmount;
 
        private JsonNullable<? extends List<WithholdingTaxItems>> withholdingTax = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder allocatedOnDate(String allocatedOnDate) {
            Utils.checkNotNull(allocatedOnDate, "allocatedOnDate");
            this.allocatedOnDate = Optional.ofNullable(allocatedOnDate);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder allocatedOnDate(Optional<String> allocatedOnDate) {
            Utils.checkNotNull(allocatedOnDate, "allocatedOnDate");
            this.allocatedOnDate = allocatedOnDate;
            return this;
        }

        /**
         * Friendly reference for the bill credit note.
         */
        public Builder billCreditNoteNumber(String billCreditNoteNumber) {
            Utils.checkNotNull(billCreditNoteNumber, "billCreditNoteNumber");
            this.billCreditNoteNumber = JsonNullable.of(billCreditNoteNumber);
            return this;
        }

        /**
         * Friendly reference for the bill credit note.
         */
        public Builder billCreditNoteNumber(JsonNullable<String> billCreditNoteNumber) {
            Utils.checkNotNull(billCreditNoteNumber, "billCreditNoteNumber");
            this.billCreditNoteNumber = billCreditNoteNumber;
            return this;
        }

        /**
         * An array of records the credit note was created from.
         */
        public Builder createdFromRefs(List<InvoiceTo> createdFromRefs) {
            Utils.checkNotNull(createdFromRefs, "createdFromRefs");
            this.createdFromRefs = JsonNullable.of(createdFromRefs);
            return this;
        }

        /**
         * An array of records the credit note was created from.
         */
        public Builder createdFromRefs(JsonNullable<? extends List<InvoiceTo>> createdFromRefs) {
            Utils.checkNotNull(createdFromRefs, "createdFromRefs");
            this.createdFromRefs = createdFromRefs;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
         */
        public Builder currencyRate(BigDecimal currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
         */
        public Builder currencyRate(double currencyRate) {
            this.currencyRate = JsonNullable.of(BigDecimal.valueOf(currencyRate));
            return this;
        }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
         */
        public Builder currencyRate(JsonNullable<? extends BigDecimal> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }

        /**
         * Percentage rate of any discount applied to the bill credit note.
         */
        public Builder discountPercentage(double discountPercentage) {
            this.discountPercentage = BigDecimal.valueOf(discountPercentage);
            return this;
        }

        /**
         * Percentage rate of any discount applied to the bill credit note.
         */
        public Builder discountPercentage(BigDecimal discountPercentage) {
            Utils.checkNotNull(discountPercentage, "discountPercentage");
            this.discountPercentage = discountPercentage;
            return this;
        }

        /**
         * Identifier for the bill credit note that is unique to a company in the accounting software.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Identifier for the bill credit note that is unique to a company in the accounting software.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder issueDate(String issueDate) {
            Utils.checkNotNull(issueDate, "issueDate");
            this.issueDate = Optional.ofNullable(issueDate);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder issueDate(Optional<String> issueDate) {
            Utils.checkNotNull(issueDate, "issueDate");
            this.issueDate = issueDate;
            return this;
        }

        /**
         * An array of line 
         */
        public Builder lineItems(List<BillCreditNoteLineItem> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = JsonNullable.of(lineItems);
            return this;
        }

        /**
         * An array of line 
         */
        public Builder lineItems(JsonNullable<? extends List<BillCreditNoteLineItem>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        public Builder modifiedDate(Optional<String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * Any additional information about the bill credit note.
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * Any additional information about the bill credit note.
         */
        public Builder note(JsonNullable<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * An array of payment allocations.
         */
        public Builder paymentAllocations(List<PaymentAllocationItems> paymentAllocations) {
            Utils.checkNotNull(paymentAllocations, "paymentAllocations");
            this.paymentAllocations = JsonNullable.of(paymentAllocations);
            return this;
        }

        /**
         * An array of payment allocations.
         */
        public Builder paymentAllocations(JsonNullable<? extends List<PaymentAllocationItems>> paymentAllocations) {
            Utils.checkNotNull(paymentAllocations, "paymentAllocations");
            this.paymentAllocations = paymentAllocations;
            return this;
        }

        /**
         * Amount of the bill credit note that is still outstanding.
         */
        public Builder remainingCredit(BigDecimal remainingCredit) {
            Utils.checkNotNull(remainingCredit, "remainingCredit");
            this.remainingCredit = Optional.ofNullable(remainingCredit);
            return this;
        }

        /**
         * Amount of the bill credit note that is still outstanding.
         */
        public Builder remainingCredit(double remainingCredit) {
            this.remainingCredit = Optional.of(BigDecimal.valueOf(remainingCredit));
            return this;
        }

        /**
         * Amount of the bill credit note that is still outstanding.
         */
        public Builder remainingCredit(Optional<? extends BigDecimal> remainingCredit) {
            Utils.checkNotNull(remainingCredit, "remainingCredit");
            this.remainingCredit = remainingCredit;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(Optional<String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * Current state of the bill credit note
         */
        public Builder status(BillCreditNoteStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Total amount of the bill credit note, including discounts but excluding tax.
         */
        public Builder subTotal(double subTotal) {
            this.subTotal = BigDecimal.valueOf(subTotal);
            return this;
        }

        /**
         * Total amount of the bill credit note, including discounts but excluding tax.
         */
        public Builder subTotal(BigDecimal subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(SupplementalData supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = Optional.ofNullable(supplementalData);
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(Optional<? extends SupplementalData> supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = supplementalData;
            return this;
        }

        /**
         * Reference to the supplier the record relates to.
         */
        public Builder supplierRef(SupplierRef supplierRef) {
            Utils.checkNotNull(supplierRef, "supplierRef");
            this.supplierRef = Optional.ofNullable(supplierRef);
            return this;
        }

        /**
         * Reference to the supplier the record relates to.
         */
        public Builder supplierRef(Optional<? extends SupplierRef> supplierRef) {
            Utils.checkNotNull(supplierRef, "supplierRef");
            this.supplierRef = supplierRef;
            return this;
        }

        /**
         * Total amount of credit that has been applied to the business' account with the supplier, including discounts and tax.
         */
        public Builder totalAmount(double totalAmount) {
            this.totalAmount = BigDecimal.valueOf(totalAmount);
            return this;
        }

        /**
         * Total amount of credit that has been applied to the business' account with the supplier, including discounts and tax.
         */
        public Builder totalAmount(BigDecimal totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Total value of any discounts applied.
         */
        public Builder totalDiscount(double totalDiscount) {
            this.totalDiscount = BigDecimal.valueOf(totalDiscount);
            return this;
        }

        /**
         * Total value of any discounts applied.
         */
        public Builder totalDiscount(BigDecimal totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = totalDiscount;
            return this;
        }

        /**
         * Amount of tax included in the bill credit note.
         */
        public Builder totalTaxAmount(double totalTaxAmount) {
            this.totalTaxAmount = BigDecimal.valueOf(totalTaxAmount);
            return this;
        }

        /**
         * Amount of tax included in the bill credit note.
         */
        public Builder totalTaxAmount(BigDecimal totalTaxAmount) {
            Utils.checkNotNull(totalTaxAmount, "totalTaxAmount");
            this.totalTaxAmount = totalTaxAmount;
            return this;
        }

        public Builder withholdingTax(List<WithholdingTaxItems> withholdingTax) {
            Utils.checkNotNull(withholdingTax, "withholdingTax");
            this.withholdingTax = JsonNullable.of(withholdingTax);
            return this;
        }

        public Builder withholdingTax(JsonNullable<? extends List<WithholdingTaxItems>> withholdingTax) {
            Utils.checkNotNull(withholdingTax, "withholdingTax");
            this.withholdingTax = withholdingTax;
            return this;
        }
        
        public BillCreditNote build() {
            return new BillCreditNote(
                allocatedOnDate,
                billCreditNoteNumber,
                createdFromRefs,
                currency,
                currencyRate,
                discountPercentage,
                id,
                issueDate,
                lineItems,
                metadata,
                modifiedDate,
                note,
                paymentAllocations,
                remainingCredit,
                sourceModifiedDate,
                status,
                subTotal,
                supplementalData,
                supplierRef,
                totalAmount,
                totalDiscount,
                totalTaxAmount,
                withholdingTax);
        }
    }
}

