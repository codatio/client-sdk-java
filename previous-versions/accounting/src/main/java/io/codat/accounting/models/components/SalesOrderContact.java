/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.accounting.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * SalesOrderContact - Details of the named contact at the delivery address.
 */

public class SalesOrderContact {

    /**
     * Email address of the contact at the delivery address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<? extends String> email;

    /**
     * Name of the contact at the delivery address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    /**
     * Phone number of the contact at the delivery address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<? extends String> phone;

    public SalesOrderContact(
            @JsonProperty("email") JsonNullable<? extends String> email,
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("phone") JsonNullable<? extends String> phone) {
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(phone, "phone");
        this.email = email;
        this.name = name;
        this.phone = phone;
    }

    /**
     * Email address of the contact at the delivery address.
     */
    public JsonNullable<? extends String> email() {
        return email;
    }

    /**
     * Name of the contact at the delivery address.
     */
    public JsonNullable<? extends String> name() {
        return name;
    }

    /**
     * Phone number of the contact at the delivery address.
     */
    public JsonNullable<? extends String> phone() {
        return phone;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Email address of the contact at the delivery address.
     */
    public SalesOrderContact withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * Email address of the contact at the delivery address.
     */
    public SalesOrderContact withEmail(JsonNullable<? extends String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * Name of the contact at the delivery address.
     */
    public SalesOrderContact withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Name of the contact at the delivery address.
     */
    public SalesOrderContact withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Phone number of the contact at the delivery address.
     */
    public SalesOrderContact withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    /**
     * Phone number of the contact at the delivery address.
     */
    public SalesOrderContact withPhone(JsonNullable<? extends String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SalesOrderContact other = (SalesOrderContact) o;
        return 
            java.util.Objects.deepEquals(this.email, other.email) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.phone, other.phone);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            email,
            name,
            phone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SalesOrderContact.class,
                "email", email,
                "name", name,
                "phone", phone);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> email = JsonNullable.undefined();
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends String> phone = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Email address of the contact at the delivery address.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * Email address of the contact at the delivery address.
         */
        public Builder email(JsonNullable<? extends String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * Name of the contact at the delivery address.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Name of the contact at the delivery address.
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Phone number of the contact at the delivery address.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        /**
         * Phone number of the contact at the delivery address.
         */
        public Builder phone(JsonNullable<? extends String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }
        
        public SalesOrderContact build() {
            return new SalesOrderContact(
                email,
                name,
                phone);
        }
    }
}

