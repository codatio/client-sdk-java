/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.accounting.models.components;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;


public class AccountingPaymentAllocation {

    @JsonProperty("allocation")
    private DirectCostPrototypeAllocation allocation;

    @JsonProperty("payment")
    private PaymentAllocationPayment payment;

    public AccountingPaymentAllocation(
            @JsonProperty("allocation") DirectCostPrototypeAllocation allocation,
            @JsonProperty("payment") PaymentAllocationPayment payment) {
        Utils.checkNotNull(allocation, "allocation");
        Utils.checkNotNull(payment, "payment");
        this.allocation = allocation;
        this.payment = payment;
    }

    public DirectCostPrototypeAllocation allocation() {
        return allocation;
    }

    public PaymentAllocationPayment payment() {
        return payment;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public AccountingPaymentAllocation withAllocation(DirectCostPrototypeAllocation allocation) {
        Utils.checkNotNull(allocation, "allocation");
        this.allocation = allocation;
        return this;
    }

    public AccountingPaymentAllocation withPayment(PaymentAllocationPayment payment) {
        Utils.checkNotNull(payment, "payment");
        this.payment = payment;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingPaymentAllocation other = (AccountingPaymentAllocation) o;
        return 
            java.util.Objects.deepEquals(this.allocation, other.allocation) &&
            java.util.Objects.deepEquals(this.payment, other.payment);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            allocation,
            payment);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingPaymentAllocation.class,
                "allocation", allocation,
                "payment", payment);
    }
    
    public final static class Builder {
 
        private DirectCostPrototypeAllocation allocation;
 
        private PaymentAllocationPayment payment;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder allocation(DirectCostPrototypeAllocation allocation) {
            Utils.checkNotNull(allocation, "allocation");
            this.allocation = allocation;
            return this;
        }

        public Builder payment(PaymentAllocationPayment payment) {
            Utils.checkNotNull(payment, "payment");
            this.payment = payment;
            return this;
        }
        
        public AccountingPaymentAllocation build() {
            return new AccountingPaymentAllocation(
                allocation,
                payment);
        }
    }
}

