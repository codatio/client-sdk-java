/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class ContactRef {

    /**
     * Allowed name of the 'dataType'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataType")
    private JsonNullable<? extends ContactRefDataType> dataType;

    /**
     * Unique identifier for a customer or supplier.
     */
    @JsonProperty("id")
    private String id;

    @JsonCreator
    public ContactRef(
            @JsonProperty("dataType") JsonNullable<? extends ContactRefDataType> dataType,
            @JsonProperty("id") String id) {
        Utils.checkNotNull(dataType, "dataType");
        Utils.checkNotNull(id, "id");
        this.dataType = dataType;
        this.id = id;
    }
    
    public ContactRef(
            String id) {
        this(JsonNullable.undefined(), id);
    }

    /**
     * Allowed name of the 'dataType'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ContactRefDataType> dataType() {
        return (JsonNullable<ContactRefDataType>) dataType;
    }

    /**
     * Unique identifier for a customer or supplier.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Allowed name of the 'dataType'.
     */
    public ContactRef withDataType(ContactRefDataType dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = JsonNullable.of(dataType);
        return this;
    }

    /**
     * Allowed name of the 'dataType'.
     */
    public ContactRef withDataType(JsonNullable<? extends ContactRefDataType> dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = dataType;
        return this;
    }

    /**
     * Unique identifier for a customer or supplier.
     */
    public ContactRef withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContactRef other = (ContactRef) o;
        return 
            Objects.deepEquals(this.dataType, other.dataType) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dataType,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContactRef.class,
                "dataType", dataType,
                "id", id);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends ContactRefDataType> dataType = JsonNullable.undefined();
 
        private String id;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Allowed name of the 'dataType'.
         */
        public Builder dataType(ContactRefDataType dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = JsonNullable.of(dataType);
            return this;
        }

        /**
         * Allowed name of the 'dataType'.
         */
        public Builder dataType(JsonNullable<? extends ContactRefDataType> dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = dataType;
            return this;
        }

        /**
         * Unique identifier for a customer or supplier.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public ContactRef build() {
            return new ContactRef(
                dataType,
                id);
        }
    }
}

