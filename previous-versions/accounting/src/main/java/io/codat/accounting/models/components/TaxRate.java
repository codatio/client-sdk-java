/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.accounting.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.accounting.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TaxRate - ï»¿&gt; View the coverage for tax rates in the &lt;a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&amp;dataType=taxRates" target="_blank"&gt;Data coverage explorer&lt;/a&gt;.
 * 
 * ## Overview
 * 
 * Accounting systems typically store a set of taxes and associated rates within the accounting package. This means that users don't have to look up or remember the rates for each type of tax. For example, applying the tax "UK sales VAT" to line items of an invoice adds the correct rate of 20%.
 * 
 * ### Tax components
 * 
 * In some cases, a tax is made up of multiple sub taxes, often called _components_ of the tax.  For example, you may have an item that is charged a tax rate called "City import tax (8%)" that has two components:
 * 
 * - A city tax of 5%
 * - An import tax of 3%
 * 
 * &gt; **Effective tax rates**
 * &gt; - Where there are multiple components of a tax, each component may be calculated on the original amount and added together. Alternatively, one tax may be calculated on the sub-total of the original amount plus another tax, which is referred to as _compounding_. When there is compounding, the effective tax rate is the rate that, if applied to the original amount, would result in the total amount of tax with compounding.
 * &gt;
 * &gt; **Example:**  
 * &gt; A tax has two components. Both components have a rate of 10%, and one component is compound. In this case, there is a total tax rate of 20% but an effective tax rate of 21%.
 * &gt;
 * &gt; - For QuickBooks Online, Codat doesn't use compound rates. Instead, the calculated effective tax rate for each component is shown. This means that the effective and total rates are the same because the total tax rate is a sum of the component rates.
 */

public class TaxRate {

    /**
     * Code for the tax rate from the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private JsonNullable<? extends String> code;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    private JsonNullable<? extends java.util.List<TaxRateComponent>> components;

    /**
     * See Effective tax rates description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveTaxRate")
    private JsonNullable<? extends Double> effectiveTaxRate;

    /**
     * Identifier for the tax rate, unique for the company in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends Metadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<? extends String> modifiedDate;

    /**
     * Codat-augmented name of the tax rate in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<? extends String> sourceModifiedDate;

    /**
     * Status of the tax rate in the accounting platform.  
     * - `Active` - An active tax rate in use by a company.  
     * - `Archived` - A tax rate that has been archived or is inactive in the accounting platform.  
     * - `Unknown` - Where the status of the tax rate cannot be determined from the underlying platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TaxRateStatus> status;

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalData")
    private Optional<? extends SupplementalData> supplementalData;

    /**
     * Total (not compounded) sum of the components of a tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTaxRate")
    private JsonNullable<? extends Double> totalTaxRate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validDatatypeLinks")
    private JsonNullable<? extends java.util.List<ValidDataTypeLinks>> validDatatypeLinks;

    public TaxRate(
            @JsonProperty("code") JsonNullable<? extends String> code,
            @JsonProperty("components") JsonNullable<? extends java.util.List<TaxRateComponent>> components,
            @JsonProperty("effectiveTaxRate") JsonNullable<? extends Double> effectiveTaxRate,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("metadata") Optional<? extends Metadata> metadata,
            @JsonProperty("modifiedDate") Optional<? extends String> modifiedDate,
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("sourceModifiedDate") Optional<? extends String> sourceModifiedDate,
            @JsonProperty("status") Optional<? extends TaxRateStatus> status,
            @JsonProperty("supplementalData") Optional<? extends SupplementalData> supplementalData,
            @JsonProperty("totalTaxRate") JsonNullable<? extends Double> totalTaxRate,
            @JsonProperty("validDatatypeLinks") JsonNullable<? extends java.util.List<ValidDataTypeLinks>> validDatatypeLinks) {
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(components, "components");
        Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(supplementalData, "supplementalData");
        Utils.checkNotNull(totalTaxRate, "totalTaxRate");
        Utils.checkNotNull(validDatatypeLinks, "validDatatypeLinks");
        this.code = code;
        this.components = components;
        this.effectiveTaxRate = effectiveTaxRate;
        this.id = id;
        this.metadata = metadata;
        this.modifiedDate = modifiedDate;
        this.name = name;
        this.sourceModifiedDate = sourceModifiedDate;
        this.status = status;
        this.supplementalData = supplementalData;
        this.totalTaxRate = totalTaxRate;
        this.validDatatypeLinks = validDatatypeLinks;
    }

    /**
     * Code for the tax rate from the accounting platform.
     */
    public JsonNullable<? extends String> code() {
        return code;
    }

    public JsonNullable<? extends java.util.List<TaxRateComponent>> components() {
        return components;
    }

    /**
     * See Effective tax rates description.
     */
    public JsonNullable<? extends Double> effectiveTaxRate() {
        return effectiveTaxRate;
    }

    /**
     * Identifier for the tax rate, unique for the company in the accounting platform.
     */
    public Optional<? extends String> id() {
        return id;
    }

    public Optional<? extends Metadata> metadata() {
        return metadata;
    }

    public Optional<? extends String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * Codat-augmented name of the tax rate in the accounting platform.
     */
    public JsonNullable<? extends String> name() {
        return name;
    }

    public Optional<? extends String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * Status of the tax rate in the accounting platform.  
     * - `Active` - An active tax rate in use by a company.  
     * - `Archived` - A tax rate that has been archived or is inactive in the accounting platform.  
     * - `Unknown` - Where the status of the tax rate cannot be determined from the underlying platform.
     */
    public Optional<? extends TaxRateStatus> status() {
        return status;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public Optional<? extends SupplementalData> supplementalData() {
        return supplementalData;
    }

    /**
     * Total (not compounded) sum of the components of a tax rate.
     */
    public JsonNullable<? extends Double> totalTaxRate() {
        return totalTaxRate;
    }

    public JsonNullable<? extends java.util.List<ValidDataTypeLinks>> validDatatypeLinks() {
        return validDatatypeLinks;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Code for the tax rate from the accounting platform.
     */
    public TaxRate withCode(String code) {
        Utils.checkNotNull(code, "code");
        this.code = JsonNullable.of(code);
        return this;
    }

    /**
     * Code for the tax rate from the accounting platform.
     */
    public TaxRate withCode(JsonNullable<? extends String> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public TaxRate withComponents(java.util.List<TaxRateComponent> components) {
        Utils.checkNotNull(components, "components");
        this.components = JsonNullable.of(components);
        return this;
    }

    public TaxRate withComponents(JsonNullable<? extends java.util.List<TaxRateComponent>> components) {
        Utils.checkNotNull(components, "components");
        this.components = components;
        return this;
    }

    /**
     * See Effective tax rates description.
     */
    public TaxRate withEffectiveTaxRate(double effectiveTaxRate) {
        Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
        this.effectiveTaxRate = JsonNullable.of(effectiveTaxRate);
        return this;
    }

    /**
     * See Effective tax rates description.
     */
    public TaxRate withEffectiveTaxRate(JsonNullable<? extends Double> effectiveTaxRate) {
        Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
        this.effectiveTaxRate = effectiveTaxRate;
        return this;
    }

    /**
     * Identifier for the tax rate, unique for the company in the accounting platform.
     */
    public TaxRate withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }
    
    /**
     * Identifier for the tax rate, unique for the company in the accounting platform.
     */
    public TaxRate withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public TaxRate withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }
    
    public TaxRate withMetadata(Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public TaxRate withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }
    
    public TaxRate withModifiedDate(Optional<? extends String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * Codat-augmented name of the tax rate in the accounting platform.
     */
    public TaxRate withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Codat-augmented name of the tax rate in the accounting platform.
     */
    public TaxRate withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public TaxRate withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }
    
    public TaxRate withSourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * Status of the tax rate in the accounting platform.  
     * - `Active` - An active tax rate in use by a company.  
     * - `Archived` - A tax rate that has been archived or is inactive in the accounting platform.  
     * - `Unknown` - Where the status of the tax rate cannot be determined from the underlying platform.
     */
    public TaxRate withStatus(TaxRateStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }
    
    /**
     * Status of the tax rate in the accounting platform.  
     * - `Active` - An active tax rate in use by a company.  
     * - `Archived` - A tax rate that has been archived or is inactive in the accounting platform.  
     * - `Unknown` - Where the status of the tax rate cannot be determined from the underlying platform.
     */
    public TaxRate withStatus(Optional<? extends TaxRateStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public TaxRate withSupplementalData(SupplementalData supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = Optional.ofNullable(supplementalData);
        return this;
    }
    
    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public TaxRate withSupplementalData(Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = supplementalData;
        return this;
    }

    /**
     * Total (not compounded) sum of the components of a tax rate.
     */
    public TaxRate withTotalTaxRate(double totalTaxRate) {
        Utils.checkNotNull(totalTaxRate, "totalTaxRate");
        this.totalTaxRate = JsonNullable.of(totalTaxRate);
        return this;
    }

    /**
     * Total (not compounded) sum of the components of a tax rate.
     */
    public TaxRate withTotalTaxRate(JsonNullable<? extends Double> totalTaxRate) {
        Utils.checkNotNull(totalTaxRate, "totalTaxRate");
        this.totalTaxRate = totalTaxRate;
        return this;
    }

    public TaxRate withValidDatatypeLinks(java.util.List<ValidDataTypeLinks> validDatatypeLinks) {
        Utils.checkNotNull(validDatatypeLinks, "validDatatypeLinks");
        this.validDatatypeLinks = JsonNullable.of(validDatatypeLinks);
        return this;
    }

    public TaxRate withValidDatatypeLinks(JsonNullable<? extends java.util.List<ValidDataTypeLinks>> validDatatypeLinks) {
        Utils.checkNotNull(validDatatypeLinks, "validDatatypeLinks");
        this.validDatatypeLinks = validDatatypeLinks;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxRate other = (TaxRate) o;
        return 
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.components, other.components) &&
            java.util.Objects.deepEquals(this.effectiveTaxRate, other.effectiveTaxRate) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.supplementalData, other.supplementalData) &&
            java.util.Objects.deepEquals(this.totalTaxRate, other.totalTaxRate) &&
            java.util.Objects.deepEquals(this.validDatatypeLinks, other.validDatatypeLinks);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            code,
            components,
            effectiveTaxRate,
            id,
            metadata,
            modifiedDate,
            name,
            sourceModifiedDate,
            status,
            supplementalData,
            totalTaxRate,
            validDatatypeLinks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxRate.class,
                "code", code,
                "components", components,
                "effectiveTaxRate", effectiveTaxRate,
                "id", id,
                "metadata", metadata,
                "modifiedDate", modifiedDate,
                "name", name,
                "sourceModifiedDate", sourceModifiedDate,
                "status", status,
                "supplementalData", supplementalData,
                "totalTaxRate", totalTaxRate,
                "validDatatypeLinks", validDatatypeLinks);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> code = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<TaxRateComponent>> components = JsonNullable.undefined();
 
        private JsonNullable<? extends Double> effectiveTaxRate = JsonNullable.undefined();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Metadata> metadata = Optional.empty();
 
        private Optional<? extends String> modifiedDate = Optional.empty();
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private Optional<? extends String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends TaxRateStatus> status = Optional.empty();
 
        private Optional<? extends SupplementalData> supplementalData = Optional.empty();
 
        private JsonNullable<? extends Double> totalTaxRate = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<ValidDataTypeLinks>> validDatatypeLinks = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Code for the tax rate from the accounting platform.
         */
        public Builder code(String code) {
            Utils.checkNotNull(code, "code");
            this.code = JsonNullable.of(code);
            return this;
        }

        /**
         * Code for the tax rate from the accounting platform.
         */
        public Builder code(JsonNullable<? extends String> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        public Builder components(java.util.List<TaxRateComponent> components) {
            Utils.checkNotNull(components, "components");
            this.components = JsonNullable.of(components);
            return this;
        }

        public Builder components(JsonNullable<? extends java.util.List<TaxRateComponent>> components) {
            Utils.checkNotNull(components, "components");
            this.components = components;
            return this;
        }

        /**
         * See Effective tax rates description.
         */
        public Builder effectiveTaxRate(double effectiveTaxRate) {
            Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
            this.effectiveTaxRate = JsonNullable.of(effectiveTaxRate);
            return this;
        }

        /**
         * See Effective tax rates description.
         */
        public Builder effectiveTaxRate(JsonNullable<? extends Double> effectiveTaxRate) {
            Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
            this.effectiveTaxRate = effectiveTaxRate;
            return this;
        }

        /**
         * Identifier for the tax rate, unique for the company in the accounting platform.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }
        
        /**
         * Identifier for the tax rate, unique for the company in the accounting platform.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }
        
        public Builder metadata(Optional<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }
        
        public Builder modifiedDate(Optional<? extends String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * Codat-augmented name of the tax rate in the accounting platform.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Codat-augmented name of the tax rate in the accounting platform.
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }
        
        public Builder sourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * Status of the tax rate in the accounting platform.  
         * - `Active` - An active tax rate in use by a company.  
         * - `Archived` - A tax rate that has been archived or is inactive in the accounting platform.  
         * - `Unknown` - Where the status of the tax rate cannot be determined from the underlying platform.
         */
        public Builder status(TaxRateStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }
        
        /**
         * Status of the tax rate in the accounting platform.  
         * - `Active` - An active tax rate in use by a company.  
         * - `Archived` - A tax rate that has been archived or is inactive in the accounting platform.  
         * - `Unknown` - Where the status of the tax rate cannot be determined from the underlying platform.
         */
        public Builder status(Optional<? extends TaxRateStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(SupplementalData supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = Optional.ofNullable(supplementalData);
            return this;
        }
        
        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(Optional<? extends SupplementalData> supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = supplementalData;
            return this;
        }

        /**
         * Total (not compounded) sum of the components of a tax rate.
         */
        public Builder totalTaxRate(double totalTaxRate) {
            Utils.checkNotNull(totalTaxRate, "totalTaxRate");
            this.totalTaxRate = JsonNullable.of(totalTaxRate);
            return this;
        }

        /**
         * Total (not compounded) sum of the components of a tax rate.
         */
        public Builder totalTaxRate(JsonNullable<? extends Double> totalTaxRate) {
            Utils.checkNotNull(totalTaxRate, "totalTaxRate");
            this.totalTaxRate = totalTaxRate;
            return this;
        }

        public Builder validDatatypeLinks(java.util.List<ValidDataTypeLinks> validDatatypeLinks) {
            Utils.checkNotNull(validDatatypeLinks, "validDatatypeLinks");
            this.validDatatypeLinks = JsonNullable.of(validDatatypeLinks);
            return this;
        }

        public Builder validDatatypeLinks(JsonNullable<? extends java.util.List<ValidDataTypeLinks>> validDatatypeLinks) {
            Utils.checkNotNull(validDatatypeLinks, "validDatatypeLinks");
            this.validDatatypeLinks = validDatatypeLinks;
            return this;
        }
        
        public TaxRate build() {
            return new TaxRate(
                code,
                components,
                effectiveTaxRate,
                id,
                metadata,
                modifiedDate,
                name,
                sourceModifiedDate,
                status,
                supplementalData,
                totalTaxRate,
                validDatatypeLinks);
        }
    }
}

