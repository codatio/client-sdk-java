/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.accounting.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.codat.accounting.utils.SpeakeasyMetadata;
import io.codat.accounting.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class GetBillPaymentsRequest {

    /**
     * Unique identifier for a bill payment.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=billPaymentId")
    private String billPaymentId;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    @JsonCreator
    public GetBillPaymentsRequest(
            String billPaymentId,
            String companyId) {
        Utils.checkNotNull(billPaymentId, "billPaymentId");
        Utils.checkNotNull(companyId, "companyId");
        this.billPaymentId = billPaymentId;
        this.companyId = companyId;
    }

    /**
     * Unique identifier for a bill payment.
     */
    @JsonIgnore
    public String billPaymentId() {
        return billPaymentId;
    }

    /**
     * Unique identifier for a company.
     */
    @JsonIgnore
    public String companyId() {
        return companyId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for a bill payment.
     */
    public GetBillPaymentsRequest withBillPaymentId(String billPaymentId) {
        Utils.checkNotNull(billPaymentId, "billPaymentId");
        this.billPaymentId = billPaymentId;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public GetBillPaymentsRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetBillPaymentsRequest other = (GetBillPaymentsRequest) o;
        return 
            Objects.deepEquals(this.billPaymentId, other.billPaymentId) &&
            Objects.deepEquals(this.companyId, other.companyId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            billPaymentId,
            companyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetBillPaymentsRequest.class,
                "billPaymentId", billPaymentId,
                "companyId", companyId);
    }
    
    public final static class Builder {
 
        private String billPaymentId;
 
        private String companyId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for a bill payment.
         */
        public Builder billPaymentId(String billPaymentId) {
            Utils.checkNotNull(billPaymentId, "billPaymentId");
            this.billPaymentId = billPaymentId;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }
        
        public GetBillPaymentsRequest build() {
            return new GetBillPaymentsRequest(
                billPaymentId,
                companyId);
        }
    }
}

