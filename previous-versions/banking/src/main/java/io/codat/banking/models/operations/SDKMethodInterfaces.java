/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.banking.models.operations;

import io.codat.banking.utils.Options;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallListAccountBalances {
        io.codat.banking.models.operations.ListAccountBalancesResponse list(
            ListAccountBalancesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetAccount {
        io.codat.banking.models.operations.GetAccountResponse get(
            GetAccountRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListAccounts {
        io.codat.banking.models.operations.ListAccountsResponse list(
            ListAccountsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTransactionCategory {
        io.codat.banking.models.operations.GetTransactionCategoryResponse get(
            GetTransactionCategoryRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListTransactionCategories {
        io.codat.banking.models.operations.ListTransactionCategoriesResponse list(
            ListTransactionCategoriesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTransaction {
        io.codat.banking.models.operations.GetTransactionResponse get(
            GetTransactionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListTransactions {
        io.codat.banking.models.operations.ListTransactionsResponse list(
            ListTransactionsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListBankTransactions {
        io.codat.banking.models.operations.ListBankTransactionsResponse listBankTransactions(
            ListBankTransactionsRequest request,
            Optional<Options> options) throws Exception;
    }


}
