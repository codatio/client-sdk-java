/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.banking.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.banking.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Account - This data type provides a list of all the SMB's bank accounts, with rich data like balances, account numbers, and institutions holding the accounts.
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/banking?view=tab-by-data-type&amp;dataType=banking-accounts).
 * 
 * Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
 */

public class Account {

    /**
     * Depending on the data provided by the underlying bank, not all balances are always available.
     */
    @JsonProperty("balance")
    private AccountBalanceAmounts balance;

    /**
     * The currency code for the account.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The name of the person or company who holds the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("holder")
    private JsonNullable<? extends String> holder;

    /**
     * The ID of the account from the provider.
     */
    @JsonProperty("id")
    private String id;

    /**
     * An object containing bank account identification information.
     */
    @JsonProperty("identifiers")
    private AccountIdentifiers identifiers;

    /**
     * The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("informalName")
    private JsonNullable<? extends String> informalName;

    /**
     * The bank or other financial institution providing the account.
     */
    @JsonProperty("institution")
    private AccountInstitution institution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<? extends String> modifiedDate;

    /**
     * The name of the account according to the provider.
     */
    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<? extends String> sourceModifiedDate;

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    @JsonProperty("type")
    private AccountType type;

    public Account(
            @JsonProperty("balance") AccountBalanceAmounts balance,
            @JsonProperty("currency") String currency,
            @JsonProperty("holder") JsonNullable<? extends String> holder,
            @JsonProperty("id") String id,
            @JsonProperty("identifiers") AccountIdentifiers identifiers,
            @JsonProperty("informalName") JsonNullable<? extends String> informalName,
            @JsonProperty("institution") AccountInstitution institution,
            @JsonProperty("modifiedDate") Optional<? extends String> modifiedDate,
            @JsonProperty("name") String name,
            @JsonProperty("sourceModifiedDate") Optional<? extends String> sourceModifiedDate,
            @JsonProperty("type") AccountType type) {
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(holder, "holder");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(identifiers, "identifiers");
        Utils.checkNotNull(informalName, "informalName");
        Utils.checkNotNull(institution, "institution");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(type, "type");
        this.balance = balance;
        this.currency = currency;
        this.holder = holder;
        this.id = id;
        this.identifiers = identifiers;
        this.informalName = informalName;
        this.institution = institution;
        this.modifiedDate = modifiedDate;
        this.name = name;
        this.sourceModifiedDate = sourceModifiedDate;
        this.type = type;
    }

    /**
     * Depending on the data provided by the underlying bank, not all balances are always available.
     */
    public AccountBalanceAmounts balance() {
        return balance;
    }

    /**
     * The currency code for the account.
     */
    public String currency() {
        return currency;
    }

    /**
     * The name of the person or company who holds the account.
     */
    public JsonNullable<? extends String> holder() {
        return holder;
    }

    /**
     * The ID of the account from the provider.
     */
    public String id() {
        return id;
    }

    /**
     * An object containing bank account identification information.
     */
    public AccountIdentifiers identifiers() {
        return identifiers;
    }

    /**
     * The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.
     */
    public JsonNullable<? extends String> informalName() {
        return informalName;
    }

    /**
     * The bank or other financial institution providing the account.
     */
    public AccountInstitution institution() {
        return institution;
    }

    public Optional<? extends String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * The name of the account according to the provider.
     */
    public String name() {
        return name;
    }

    public Optional<? extends String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    public AccountType type() {
        return type;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Depending on the data provided by the underlying bank, not all balances are always available.
     */
    public Account withBalance(AccountBalanceAmounts balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * The currency code for the account.
     */
    public Account withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The name of the person or company who holds the account.
     */
    public Account withHolder(String holder) {
        Utils.checkNotNull(holder, "holder");
        this.holder = JsonNullable.of(holder);
        return this;
    }

    /**
     * The name of the person or company who holds the account.
     */
    public Account withHolder(JsonNullable<? extends String> holder) {
        Utils.checkNotNull(holder, "holder");
        this.holder = holder;
        return this;
    }

    /**
     * The ID of the account from the provider.
     */
    public Account withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * An object containing bank account identification information.
     */
    public Account withIdentifiers(AccountIdentifiers identifiers) {
        Utils.checkNotNull(identifiers, "identifiers");
        this.identifiers = identifiers;
        return this;
    }

    /**
     * The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.
     */
    public Account withInformalName(String informalName) {
        Utils.checkNotNull(informalName, "informalName");
        this.informalName = JsonNullable.of(informalName);
        return this;
    }

    /**
     * The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.
     */
    public Account withInformalName(JsonNullable<? extends String> informalName) {
        Utils.checkNotNull(informalName, "informalName");
        this.informalName = informalName;
        return this;
    }

    /**
     * The bank or other financial institution providing the account.
     */
    public Account withInstitution(AccountInstitution institution) {
        Utils.checkNotNull(institution, "institution");
        this.institution = institution;
        return this;
    }

    public Account withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }
    
    public Account withModifiedDate(Optional<? extends String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * The name of the account according to the provider.
     */
    public Account withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Account withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }
    
    public Account withSourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    public Account withType(AccountType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Account other = (Account) o;
        return 
            java.util.Objects.deepEquals(this.balance, other.balance) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.holder, other.holder) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.identifiers, other.identifiers) &&
            java.util.Objects.deepEquals(this.informalName, other.informalName) &&
            java.util.Objects.deepEquals(this.institution, other.institution) &&
            java.util.Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            balance,
            currency,
            holder,
            id,
            identifiers,
            informalName,
            institution,
            modifiedDate,
            name,
            sourceModifiedDate,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Account.class,
                "balance", balance,
                "currency", currency,
                "holder", holder,
                "id", id,
                "identifiers", identifiers,
                "informalName", informalName,
                "institution", institution,
                "modifiedDate", modifiedDate,
                "name", name,
                "sourceModifiedDate", sourceModifiedDate,
                "type", type);
    }
    
    public final static class Builder {
 
        private AccountBalanceAmounts balance;
 
        private String currency;
 
        private JsonNullable<? extends String> holder = JsonNullable.undefined();
 
        private String id;
 
        private AccountIdentifiers identifiers;
 
        private JsonNullable<? extends String> informalName = JsonNullable.undefined();
 
        private AccountInstitution institution;
 
        private Optional<? extends String> modifiedDate = Optional.empty();
 
        private String name;
 
        private Optional<? extends String> sourceModifiedDate = Optional.empty();
 
        private AccountType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Depending on the data provided by the underlying bank, not all balances are always available.
         */
        public Builder balance(AccountBalanceAmounts balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * The currency code for the account.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The name of the person or company who holds the account.
         */
        public Builder holder(String holder) {
            Utils.checkNotNull(holder, "holder");
            this.holder = JsonNullable.of(holder);
            return this;
        }

        /**
         * The name of the person or company who holds the account.
         */
        public Builder holder(JsonNullable<? extends String> holder) {
            Utils.checkNotNull(holder, "holder");
            this.holder = holder;
            return this;
        }

        /**
         * The ID of the account from the provider.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * An object containing bank account identification information.
         */
        public Builder identifiers(AccountIdentifiers identifiers) {
            Utils.checkNotNull(identifiers, "identifiers");
            this.identifiers = identifiers;
            return this;
        }

        /**
         * The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.
         */
        public Builder informalName(String informalName) {
            Utils.checkNotNull(informalName, "informalName");
            this.informalName = JsonNullable.of(informalName);
            return this;
        }

        /**
         * The friendly name of the account, chosen by the holder. This may not have been set by the account holder and therefore is not always available.
         */
        public Builder informalName(JsonNullable<? extends String> informalName) {
            Utils.checkNotNull(informalName, "informalName");
            this.informalName = informalName;
            return this;
        }

        /**
         * The bank or other financial institution providing the account.
         */
        public Builder institution(AccountInstitution institution) {
            Utils.checkNotNull(institution, "institution");
            this.institution = institution;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }
        
        public Builder modifiedDate(Optional<? extends String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * The name of the account according to the provider.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }
        
        public Builder sourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * The type of transactions and balances on the account.  
         * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
         * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
         */
        public Builder type(AccountType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Account build() {
            return new Account(
                balance,
                currency,
                holder,
                id,
                identifiers,
                informalName,
                institution,
                modifiedDate,
                name,
                sourceModifiedDate,
                type);
        }
    }
}

