/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payroll.models.operations;

import io.codat.sync.payroll.models.components.CompanyRequestBody;
import io.codat.sync.payroll.utils.Options;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallCreateCompany {
        io.codat.sync.payroll.models.operations.CreateCompanyResponse create(
            Optional<? extends CompanyRequestBody> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteCompany {
        io.codat.sync.payroll.models.operations.DeleteCompanyResponse delete(
            DeleteCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompany {
        io.codat.sync.payroll.models.operations.GetCompanyResponse get(
            GetCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListCompanies {
        io.codat.sync.payroll.models.operations.ListCompaniesResponse list(
            ListCompaniesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateCompany {
        io.codat.sync.payroll.models.operations.UpdateCompanyResponse update(
            UpdateCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateConnection {
        io.codat.sync.payroll.models.operations.CreateConnectionResponse create(
            CreateConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteConnection {
        io.codat.sync.payroll.models.operations.DeleteConnectionResponse delete(
            DeleteConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetConnection {
        io.codat.sync.payroll.models.operations.GetConnectionResponse get(
            GetConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListConnections {
        io.codat.sync.payroll.models.operations.ListConnectionsResponse list(
            ListConnectionsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUnlinkConnection {
        io.codat.sync.payroll.models.operations.UnlinkConnectionResponse unlink(
            UnlinkConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateAccount {
        io.codat.sync.payroll.models.operations.CreateAccountResponse create(
            CreateAccountRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetAccount {
        io.codat.sync.payroll.models.operations.GetAccountResponse get(
            GetAccountRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCreateAccountsModel {
        io.codat.sync.payroll.models.operations.GetCreateAccountsModelResponse getCreateModel(
            GetCreateAccountsModelRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListAccounts {
        io.codat.sync.payroll.models.operations.ListAccountsResponse list(
            ListAccountsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateJournalEntry {
        io.codat.sync.payroll.models.operations.CreateJournalEntryResponse create(
            CreateJournalEntryRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteJournalEntry {
        io.codat.sync.payroll.models.operations.DeleteJournalEntryResponse delete(
            DeleteJournalEntryRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetJournalEntry {
        io.codat.sync.payroll.models.operations.GetJournalEntryResponse get(
            GetJournalEntryRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCreateJournalEntryModel {
        io.codat.sync.payroll.models.operations.GetCreateJournalEntryModelResponse getCreateModel(
            GetCreateJournalEntryModelRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListJournalEntries {
        io.codat.sync.payroll.models.operations.ListJournalEntriesResponse list(
            ListJournalEntriesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateJournal {
        io.codat.sync.payroll.models.operations.CreateJournalResponse create(
            CreateJournalRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetJournal {
        io.codat.sync.payroll.models.operations.GetJournalResponse get(
            GetJournalRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCreateJournalModel {
        io.codat.sync.payroll.models.operations.GetCreateJournalModelResponse getCreateModel(
            GetCreateJournalModelRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListJournals {
        io.codat.sync.payroll.models.operations.ListJournalsResponse list(
            ListJournalsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetDataStatus {
        io.codat.sync.payroll.models.operations.GetDataStatusResponse getDataStatus(
            GetDataStatusRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPullOperation {
        io.codat.sync.payroll.models.operations.GetPullOperationResponse getPullOperation(
            GetPullOperationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPushOperation {
        io.codat.sync.payroll.models.operations.GetPushOperationResponse getPushOperation(
            GetPushOperationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListPushOperations {
        io.codat.sync.payroll.models.operations.ListPushOperationsResponse list(
            ListPushOperationsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListPullOperations {
        io.codat.sync.payroll.models.operations.ListPullOperationsResponse listPullOperations(
            ListPullOperationsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRefreshAllDataTypes {
        io.codat.sync.payroll.models.operations.RefreshAllDataTypesResponse refreshAllDataTypes(
            RefreshAllDataTypesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRefreshDataType {
        io.codat.sync.payroll.models.operations.RefreshDataTypeResponse refreshDataType(
            RefreshDataTypeRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetAccountingProfile {
        io.codat.sync.payroll.models.operations.GetAccountingProfileResponse getAccountingProfile(
            GetAccountingProfileRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTrackingCategory {
        io.codat.sync.payroll.models.operations.GetTrackingCategoryResponse get(
            GetTrackingCategoryRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListTrackingCategories {
        io.codat.sync.payroll.models.operations.ListTrackingCategoriesResponse list(
            ListTrackingCategoriesRequest request,
            Optional<Options> options) throws Exception;
    }


}
