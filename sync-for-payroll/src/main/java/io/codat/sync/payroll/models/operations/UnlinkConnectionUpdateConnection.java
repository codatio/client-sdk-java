/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payroll.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.payroll.models.components.DataConnectionStatus;
import io.codat.sync.payroll.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class UnlinkConnectionUpdateConnection {

    /**
     * The current authorization status of the data connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends DataConnectionStatus> status;

    @JsonCreator
    public UnlinkConnectionUpdateConnection(
            @JsonProperty("status") Optional<? extends DataConnectionStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
    }
    
    public UnlinkConnectionUpdateConnection() {
        this(Optional.empty());
    }

    /**
     * The current authorization status of the data connection.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataConnectionStatus> status() {
        return (Optional<DataConnectionStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current authorization status of the data connection.
     */
    public UnlinkConnectionUpdateConnection withStatus(DataConnectionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The current authorization status of the data connection.
     */
    public UnlinkConnectionUpdateConnection withStatus(Optional<? extends DataConnectionStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnlinkConnectionUpdateConnection other = (UnlinkConnectionUpdateConnection) o;
        return 
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnlinkConnectionUpdateConnection.class,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends DataConnectionStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current authorization status of the data connection.
         */
        public Builder status(DataConnectionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The current authorization status of the data connection.
         */
        public Builder status(Optional<? extends DataConnectionStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public UnlinkConnectionUpdateConnection build() {
            return new UnlinkConnectionUpdateConnection(
                status);
        }
    }
}

