/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Sales {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts")
    private JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grouping")
    private Optional<? extends Grouping> grouping;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceStatus")
    private Optional<? extends InvoiceStatus> invoiceStatus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newTaxRates")
    private Optional<? extends NewTaxRates> newTaxRates;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salesCustomer")
    private Optional<? extends Customer> salesCustomer;

    /**
     * Boolean indicator for syncing sales.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncSales")
    private Optional<? extends Boolean> syncSales;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRates")
    private JsonNullable<? extends java.util.Map<String, TaxRateAmount>> taxRates;

    public Sales(
            @JsonProperty("accounts") JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts,
            @JsonProperty("grouping") Optional<? extends Grouping> grouping,
            @JsonProperty("invoiceStatus") Optional<? extends InvoiceStatus> invoiceStatus,
            @JsonProperty("newTaxRates") Optional<? extends NewTaxRates> newTaxRates,
            @JsonProperty("salesCustomer") Optional<? extends Customer> salesCustomer,
            @JsonProperty("syncSales") Optional<? extends Boolean> syncSales,
            @JsonProperty("taxRates") JsonNullable<? extends java.util.Map<String, TaxRateAmount>> taxRates) {
        Utils.checkNotNull(accounts, "accounts");
        Utils.checkNotNull(grouping, "grouping");
        Utils.checkNotNull(invoiceStatus, "invoiceStatus");
        Utils.checkNotNull(newTaxRates, "newTaxRates");
        Utils.checkNotNull(salesCustomer, "salesCustomer");
        Utils.checkNotNull(syncSales, "syncSales");
        Utils.checkNotNull(taxRates, "taxRates");
        this.accounts = accounts;
        this.grouping = grouping;
        this.invoiceStatus = invoiceStatus;
        this.newTaxRates = newTaxRates;
        this.salesCustomer = salesCustomer;
        this.syncSales = syncSales;
        this.taxRates = taxRates;
    }

    public JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts() {
        return accounts;
    }

    public Optional<? extends Grouping> grouping() {
        return grouping;
    }

    public Optional<? extends InvoiceStatus> invoiceStatus() {
        return invoiceStatus;
    }

    public Optional<? extends NewTaxRates> newTaxRates() {
        return newTaxRates;
    }

    public Optional<? extends Customer> salesCustomer() {
        return salesCustomer;
    }

    /**
     * Boolean indicator for syncing sales.
     */
    public Optional<? extends Boolean> syncSales() {
        return syncSales;
    }

    public JsonNullable<? extends java.util.Map<String, TaxRateAmount>> taxRates() {
        return taxRates;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public Sales withAccounts(java.util.Map<String, ConfigAccount> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = JsonNullable.of(accounts);
        return this;
    }

    public Sales withAccounts(JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = accounts;
        return this;
    }

    public Sales withGrouping(Grouping grouping) {
        Utils.checkNotNull(grouping, "grouping");
        this.grouping = Optional.ofNullable(grouping);
        return this;
    }
    
    public Sales withGrouping(Optional<? extends Grouping> grouping) {
        Utils.checkNotNull(grouping, "grouping");
        this.grouping = grouping;
        return this;
    }

    public Sales withInvoiceStatus(InvoiceStatus invoiceStatus) {
        Utils.checkNotNull(invoiceStatus, "invoiceStatus");
        this.invoiceStatus = Optional.ofNullable(invoiceStatus);
        return this;
    }
    
    public Sales withInvoiceStatus(Optional<? extends InvoiceStatus> invoiceStatus) {
        Utils.checkNotNull(invoiceStatus, "invoiceStatus");
        this.invoiceStatus = invoiceStatus;
        return this;
    }

    public Sales withNewTaxRates(NewTaxRates newTaxRates) {
        Utils.checkNotNull(newTaxRates, "newTaxRates");
        this.newTaxRates = Optional.ofNullable(newTaxRates);
        return this;
    }
    
    public Sales withNewTaxRates(Optional<? extends NewTaxRates> newTaxRates) {
        Utils.checkNotNull(newTaxRates, "newTaxRates");
        this.newTaxRates = newTaxRates;
        return this;
    }

    public Sales withSalesCustomer(Customer salesCustomer) {
        Utils.checkNotNull(salesCustomer, "salesCustomer");
        this.salesCustomer = Optional.ofNullable(salesCustomer);
        return this;
    }
    
    public Sales withSalesCustomer(Optional<? extends Customer> salesCustomer) {
        Utils.checkNotNull(salesCustomer, "salesCustomer");
        this.salesCustomer = salesCustomer;
        return this;
    }

    /**
     * Boolean indicator for syncing sales.
     */
    public Sales withSyncSales(boolean syncSales) {
        Utils.checkNotNull(syncSales, "syncSales");
        this.syncSales = Optional.ofNullable(syncSales);
        return this;
    }
    
    /**
     * Boolean indicator for syncing sales.
     */
    public Sales withSyncSales(Optional<? extends Boolean> syncSales) {
        Utils.checkNotNull(syncSales, "syncSales");
        this.syncSales = syncSales;
        return this;
    }

    public Sales withTaxRates(java.util.Map<String, TaxRateAmount> taxRates) {
        Utils.checkNotNull(taxRates, "taxRates");
        this.taxRates = JsonNullable.of(taxRates);
        return this;
    }

    public Sales withTaxRates(JsonNullable<? extends java.util.Map<String, TaxRateAmount>> taxRates) {
        Utils.checkNotNull(taxRates, "taxRates");
        this.taxRates = taxRates;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Sales other = (Sales) o;
        return 
            java.util.Objects.deepEquals(this.accounts, other.accounts) &&
            java.util.Objects.deepEquals(this.grouping, other.grouping) &&
            java.util.Objects.deepEquals(this.invoiceStatus, other.invoiceStatus) &&
            java.util.Objects.deepEquals(this.newTaxRates, other.newTaxRates) &&
            java.util.Objects.deepEquals(this.salesCustomer, other.salesCustomer) &&
            java.util.Objects.deepEquals(this.syncSales, other.syncSales) &&
            java.util.Objects.deepEquals(this.taxRates, other.taxRates);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accounts,
            grouping,
            invoiceStatus,
            newTaxRates,
            salesCustomer,
            syncSales,
            taxRates);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Sales.class,
                "accounts", accounts,
                "grouping", grouping,
                "invoiceStatus", invoiceStatus,
                "newTaxRates", newTaxRates,
                "salesCustomer", salesCustomer,
                "syncSales", syncSales,
                "taxRates", taxRates);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts = JsonNullable.undefined();
 
        private Optional<? extends Grouping> grouping = Optional.empty();
 
        private Optional<? extends InvoiceStatus> invoiceStatus = Optional.empty();
 
        private Optional<? extends NewTaxRates> newTaxRates = Optional.empty();
 
        private Optional<? extends Customer> salesCustomer = Optional.empty();
 
        private Optional<? extends Boolean> syncSales = Optional.empty();
 
        private JsonNullable<? extends java.util.Map<String, TaxRateAmount>> taxRates = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accounts(java.util.Map<String, ConfigAccount> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = JsonNullable.of(accounts);
            return this;
        }

        public Builder accounts(JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = accounts;
            return this;
        }

        public Builder grouping(Grouping grouping) {
            Utils.checkNotNull(grouping, "grouping");
            this.grouping = Optional.ofNullable(grouping);
            return this;
        }
        
        public Builder grouping(Optional<? extends Grouping> grouping) {
            Utils.checkNotNull(grouping, "grouping");
            this.grouping = grouping;
            return this;
        }

        public Builder invoiceStatus(InvoiceStatus invoiceStatus) {
            Utils.checkNotNull(invoiceStatus, "invoiceStatus");
            this.invoiceStatus = Optional.ofNullable(invoiceStatus);
            return this;
        }
        
        public Builder invoiceStatus(Optional<? extends InvoiceStatus> invoiceStatus) {
            Utils.checkNotNull(invoiceStatus, "invoiceStatus");
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        public Builder newTaxRates(NewTaxRates newTaxRates) {
            Utils.checkNotNull(newTaxRates, "newTaxRates");
            this.newTaxRates = Optional.ofNullable(newTaxRates);
            return this;
        }
        
        public Builder newTaxRates(Optional<? extends NewTaxRates> newTaxRates) {
            Utils.checkNotNull(newTaxRates, "newTaxRates");
            this.newTaxRates = newTaxRates;
            return this;
        }

        public Builder salesCustomer(Customer salesCustomer) {
            Utils.checkNotNull(salesCustomer, "salesCustomer");
            this.salesCustomer = Optional.ofNullable(salesCustomer);
            return this;
        }
        
        public Builder salesCustomer(Optional<? extends Customer> salesCustomer) {
            Utils.checkNotNull(salesCustomer, "salesCustomer");
            this.salesCustomer = salesCustomer;
            return this;
        }

        /**
         * Boolean indicator for syncing sales.
         */
        public Builder syncSales(boolean syncSales) {
            Utils.checkNotNull(syncSales, "syncSales");
            this.syncSales = Optional.ofNullable(syncSales);
            return this;
        }
        
        /**
         * Boolean indicator for syncing sales.
         */
        public Builder syncSales(Optional<? extends Boolean> syncSales) {
            Utils.checkNotNull(syncSales, "syncSales");
            this.syncSales = syncSales;
            return this;
        }

        public Builder taxRates(java.util.Map<String, TaxRateAmount> taxRates) {
            Utils.checkNotNull(taxRates, "taxRates");
            this.taxRates = JsonNullable.of(taxRates);
            return this;
        }

        public Builder taxRates(JsonNullable<? extends java.util.Map<String, TaxRateAmount>> taxRates) {
            Utils.checkNotNull(taxRates, "taxRates");
            this.taxRates = taxRates;
            return this;
        }
        
        public Sales build() {
            return new Sales(
                accounts,
                grouping,
                invoiceStatus,
                newTaxRates,
                salesCustomer,
                syncSales,
                taxRates);
        }
    }
}

