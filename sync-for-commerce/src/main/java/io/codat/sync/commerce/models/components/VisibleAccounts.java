/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import org.openapitools.jackson.nullable.JsonNullable;


public class VisibleAccounts {

    /**
     * Visible accounts on sync flow.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibleAccounts")
    private JsonNullable<? extends java.util.List<String>> visibleAccounts;

    public VisibleAccounts(
            @JsonProperty("visibleAccounts") JsonNullable<? extends java.util.List<String>> visibleAccounts) {
        Utils.checkNotNull(visibleAccounts, "visibleAccounts");
        this.visibleAccounts = visibleAccounts;
    }

    /**
     * Visible accounts on sync flow.
     */
    public JsonNullable<? extends java.util.List<String>> visibleAccounts() {
        return visibleAccounts;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Visible accounts on sync flow.
     */
    public VisibleAccounts withVisibleAccounts(java.util.List<String> visibleAccounts) {
        Utils.checkNotNull(visibleAccounts, "visibleAccounts");
        this.visibleAccounts = JsonNullable.of(visibleAccounts);
        return this;
    }

    /**
     * Visible accounts on sync flow.
     */
    public VisibleAccounts withVisibleAccounts(JsonNullable<? extends java.util.List<String>> visibleAccounts) {
        Utils.checkNotNull(visibleAccounts, "visibleAccounts");
        this.visibleAccounts = visibleAccounts;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VisibleAccounts other = (VisibleAccounts) o;
        return 
            java.util.Objects.deepEquals(this.visibleAccounts, other.visibleAccounts);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            visibleAccounts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VisibleAccounts.class,
                "visibleAccounts", visibleAccounts);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends java.util.List<String>> visibleAccounts = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Visible accounts on sync flow.
         */
        public Builder visibleAccounts(java.util.List<String> visibleAccounts) {
            Utils.checkNotNull(visibleAccounts, "visibleAccounts");
            this.visibleAccounts = JsonNullable.of(visibleAccounts);
            return this;
        }

        /**
         * Visible accounts on sync flow.
         */
        public Builder visibleAccounts(JsonNullable<? extends java.util.List<String>> visibleAccounts) {
            Utils.checkNotNull(visibleAccounts, "visibleAccounts");
            this.visibleAccounts = visibleAccounts;
            return this;
        }
        
        public VisibleAccounts build() {
            return new VisibleAccounts(
                visibleAccounts);
        }
    }
}

