/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ConfigurationMapSettings {

    /**
     * The format commerce transactions are stored in the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outputFormat")
    private Optional<? extends OutputFormat> outputFormat;

    @JsonCreator
    public ConfigurationMapSettings(
            @JsonProperty("outputFormat") Optional<? extends OutputFormat> outputFormat) {
        Utils.checkNotNull(outputFormat, "outputFormat");
        this.outputFormat = outputFormat;
    }
    
    public ConfigurationMapSettings() {
        this(Optional.empty());
    }

    /**
     * The format commerce transactions are stored in the accounting software.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OutputFormat> outputFormat() {
        return (Optional<OutputFormat>) outputFormat;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The format commerce transactions are stored in the accounting software.
     */
    public ConfigurationMapSettings withOutputFormat(OutputFormat outputFormat) {
        Utils.checkNotNull(outputFormat, "outputFormat");
        this.outputFormat = Optional.ofNullable(outputFormat);
        return this;
    }

    /**
     * The format commerce transactions are stored in the accounting software.
     */
    public ConfigurationMapSettings withOutputFormat(Optional<? extends OutputFormat> outputFormat) {
        Utils.checkNotNull(outputFormat, "outputFormat");
        this.outputFormat = outputFormat;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConfigurationMapSettings other = (ConfigurationMapSettings) o;
        return 
            Objects.deepEquals(this.outputFormat, other.outputFormat);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            outputFormat);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConfigurationMapSettings.class,
                "outputFormat", outputFormat);
    }
    
    public final static class Builder {
 
        private Optional<? extends OutputFormat> outputFormat = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The format commerce transactions are stored in the accounting software.
         */
        public Builder outputFormat(OutputFormat outputFormat) {
            Utils.checkNotNull(outputFormat, "outputFormat");
            this.outputFormat = Optional.ofNullable(outputFormat);
            return this;
        }

        /**
         * The format commerce transactions are stored in the accounting software.
         */
        public Builder outputFormat(Optional<? extends OutputFormat> outputFormat) {
            Utils.checkNotNull(outputFormat, "outputFormat");
            this.outputFormat = outputFormat;
            return this;
        }
        
        public ConfigurationMapSettings build() {
            return new ConfigurationMapSettings(
                outputFormat);
        }
    }
}

