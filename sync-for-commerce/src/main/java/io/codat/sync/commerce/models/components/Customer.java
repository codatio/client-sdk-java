/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import org.openapitools.jackson.nullable.JsonNullable;


public class Customer {

    /**
     * List of customer options from the list of customer records on the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerOptions")
    private JsonNullable<? extends java.util.List<Option>> customerOptions;

    /**
     * Selected customer id from the list of customer records on the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedCustomerId")
    private JsonNullable<? extends String> selectedCustomerId;

    public Customer(
            @JsonProperty("customerOptions") JsonNullable<? extends java.util.List<Option>> customerOptions,
            @JsonProperty("selectedCustomerId") JsonNullable<? extends String> selectedCustomerId) {
        Utils.checkNotNull(customerOptions, "customerOptions");
        Utils.checkNotNull(selectedCustomerId, "selectedCustomerId");
        this.customerOptions = customerOptions;
        this.selectedCustomerId = selectedCustomerId;
    }

    /**
     * List of customer options from the list of customer records on the accounting software.
     */
    public JsonNullable<? extends java.util.List<Option>> customerOptions() {
        return customerOptions;
    }

    /**
     * Selected customer id from the list of customer records on the accounting software.
     */
    public JsonNullable<? extends String> selectedCustomerId() {
        return selectedCustomerId;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of customer options from the list of customer records on the accounting software.
     */
    public Customer withCustomerOptions(java.util.List<Option> customerOptions) {
        Utils.checkNotNull(customerOptions, "customerOptions");
        this.customerOptions = JsonNullable.of(customerOptions);
        return this;
    }

    /**
     * List of customer options from the list of customer records on the accounting software.
     */
    public Customer withCustomerOptions(JsonNullable<? extends java.util.List<Option>> customerOptions) {
        Utils.checkNotNull(customerOptions, "customerOptions");
        this.customerOptions = customerOptions;
        return this;
    }

    /**
     * Selected customer id from the list of customer records on the accounting software.
     */
    public Customer withSelectedCustomerId(String selectedCustomerId) {
        Utils.checkNotNull(selectedCustomerId, "selectedCustomerId");
        this.selectedCustomerId = JsonNullable.of(selectedCustomerId);
        return this;
    }

    /**
     * Selected customer id from the list of customer records on the accounting software.
     */
    public Customer withSelectedCustomerId(JsonNullable<? extends String> selectedCustomerId) {
        Utils.checkNotNull(selectedCustomerId, "selectedCustomerId");
        this.selectedCustomerId = selectedCustomerId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Customer other = (Customer) o;
        return 
            java.util.Objects.deepEquals(this.customerOptions, other.customerOptions) &&
            java.util.Objects.deepEquals(this.selectedCustomerId, other.selectedCustomerId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            customerOptions,
            selectedCustomerId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Customer.class,
                "customerOptions", customerOptions,
                "selectedCustomerId", selectedCustomerId);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends java.util.List<Option>> customerOptions = JsonNullable.undefined();
 
        private JsonNullable<? extends String> selectedCustomerId = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of customer options from the list of customer records on the accounting software.
         */
        public Builder customerOptions(java.util.List<Option> customerOptions) {
            Utils.checkNotNull(customerOptions, "customerOptions");
            this.customerOptions = JsonNullable.of(customerOptions);
            return this;
        }

        /**
         * List of customer options from the list of customer records on the accounting software.
         */
        public Builder customerOptions(JsonNullable<? extends java.util.List<Option>> customerOptions) {
            Utils.checkNotNull(customerOptions, "customerOptions");
            this.customerOptions = customerOptions;
            return this;
        }

        /**
         * Selected customer id from the list of customer records on the accounting software.
         */
        public Builder selectedCustomerId(String selectedCustomerId) {
            Utils.checkNotNull(selectedCustomerId, "selectedCustomerId");
            this.selectedCustomerId = JsonNullable.of(selectedCustomerId);
            return this;
        }

        /**
         * Selected customer id from the list of customer records on the accounting software.
         */
        public Builder selectedCustomerId(JsonNullable<? extends String> selectedCustomerId) {
            Utils.checkNotNull(selectedCustomerId, "selectedCustomerId");
            this.selectedCustomerId = selectedCustomerId;
            return this;
        }
        
        public Customer build() {
            return new Customer(
                customerOptions,
                selectedCustomerId);
        }
    }
}

