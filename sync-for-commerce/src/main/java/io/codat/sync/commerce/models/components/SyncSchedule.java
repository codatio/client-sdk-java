/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SyncSchedule {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequencyOptions")
    private Optional<? extends List<SyncFrequency>> frequencyOptions;

    /**
     * The frequency in which you want data to be synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedFrequency")
    private Optional<? extends SyncFrequency> selectedFrequency;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private Optional<String> startDate;

    /**
     * The hour you want to trigger a sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncHour")
    private Optional<Long> syncHour;

    /**
     * The timezone for the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZone")
    private Optional<String> timeZone;

    @JsonCreator
    public SyncSchedule(
            @JsonProperty("frequencyOptions") Optional<? extends List<SyncFrequency>> frequencyOptions,
            @JsonProperty("selectedFrequency") Optional<? extends SyncFrequency> selectedFrequency,
            @JsonProperty("startDate") Optional<String> startDate,
            @JsonProperty("syncHour") Optional<Long> syncHour,
            @JsonProperty("timeZone") Optional<String> timeZone) {
        Utils.checkNotNull(frequencyOptions, "frequencyOptions");
        Utils.checkNotNull(selectedFrequency, "selectedFrequency");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(syncHour, "syncHour");
        Utils.checkNotNull(timeZone, "timeZone");
        this.frequencyOptions = frequencyOptions;
        this.selectedFrequency = selectedFrequency;
        this.startDate = startDate;
        this.syncHour = syncHour;
        this.timeZone = timeZone;
    }
    
    public SyncSchedule() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SyncFrequency>> frequencyOptions() {
        return (Optional<List<SyncFrequency>>) frequencyOptions;
    }

    /**
     * The frequency in which you want data to be synced.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SyncFrequency> selectedFrequency() {
        return (Optional<SyncFrequency>) selectedFrequency;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * The hour you want to trigger a sync.
     */
    @JsonIgnore
    public Optional<Long> syncHour() {
        return syncHour;
    }

    /**
     * The timezone for the company.
     */
    @JsonIgnore
    public Optional<String> timeZone() {
        return timeZone;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SyncSchedule withFrequencyOptions(List<SyncFrequency> frequencyOptions) {
        Utils.checkNotNull(frequencyOptions, "frequencyOptions");
        this.frequencyOptions = Optional.ofNullable(frequencyOptions);
        return this;
    }

    public SyncSchedule withFrequencyOptions(Optional<? extends List<SyncFrequency>> frequencyOptions) {
        Utils.checkNotNull(frequencyOptions, "frequencyOptions");
        this.frequencyOptions = frequencyOptions;
        return this;
    }

    /**
     * The frequency in which you want data to be synced.
     */
    public SyncSchedule withSelectedFrequency(SyncFrequency selectedFrequency) {
        Utils.checkNotNull(selectedFrequency, "selectedFrequency");
        this.selectedFrequency = Optional.ofNullable(selectedFrequency);
        return this;
    }

    /**
     * The frequency in which you want data to be synced.
     */
    public SyncSchedule withSelectedFrequency(Optional<? extends SyncFrequency> selectedFrequency) {
        Utils.checkNotNull(selectedFrequency, "selectedFrequency");
        this.selectedFrequency = selectedFrequency;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public SyncSchedule withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public SyncSchedule withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The hour you want to trigger a sync.
     */
    public SyncSchedule withSyncHour(long syncHour) {
        Utils.checkNotNull(syncHour, "syncHour");
        this.syncHour = Optional.ofNullable(syncHour);
        return this;
    }

    /**
     * The hour you want to trigger a sync.
     */
    public SyncSchedule withSyncHour(Optional<Long> syncHour) {
        Utils.checkNotNull(syncHour, "syncHour");
        this.syncHour = syncHour;
        return this;
    }

    /**
     * The timezone for the company.
     */
    public SyncSchedule withTimeZone(String timeZone) {
        Utils.checkNotNull(timeZone, "timeZone");
        this.timeZone = Optional.ofNullable(timeZone);
        return this;
    }

    /**
     * The timezone for the company.
     */
    public SyncSchedule withTimeZone(Optional<String> timeZone) {
        Utils.checkNotNull(timeZone, "timeZone");
        this.timeZone = timeZone;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SyncSchedule other = (SyncSchedule) o;
        return 
            Objects.deepEquals(this.frequencyOptions, other.frequencyOptions) &&
            Objects.deepEquals(this.selectedFrequency, other.selectedFrequency) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.syncHour, other.syncHour) &&
            Objects.deepEquals(this.timeZone, other.timeZone);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            frequencyOptions,
            selectedFrequency,
            startDate,
            syncHour,
            timeZone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SyncSchedule.class,
                "frequencyOptions", frequencyOptions,
                "selectedFrequency", selectedFrequency,
                "startDate", startDate,
                "syncHour", syncHour,
                "timeZone", timeZone);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<SyncFrequency>> frequencyOptions = Optional.empty();
 
        private Optional<? extends SyncFrequency> selectedFrequency = Optional.empty();
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<Long> syncHour = Optional.empty();
 
        private Optional<String> timeZone = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder frequencyOptions(List<SyncFrequency> frequencyOptions) {
            Utils.checkNotNull(frequencyOptions, "frequencyOptions");
            this.frequencyOptions = Optional.ofNullable(frequencyOptions);
            return this;
        }

        public Builder frequencyOptions(Optional<? extends List<SyncFrequency>> frequencyOptions) {
            Utils.checkNotNull(frequencyOptions, "frequencyOptions");
            this.frequencyOptions = frequencyOptions;
            return this;
        }

        /**
         * The frequency in which you want data to be synced.
         */
        public Builder selectedFrequency(SyncFrequency selectedFrequency) {
            Utils.checkNotNull(selectedFrequency, "selectedFrequency");
            this.selectedFrequency = Optional.ofNullable(selectedFrequency);
            return this;
        }

        /**
         * The frequency in which you want data to be synced.
         */
        public Builder selectedFrequency(Optional<? extends SyncFrequency> selectedFrequency) {
            Utils.checkNotNull(selectedFrequency, "selectedFrequency");
            this.selectedFrequency = selectedFrequency;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The hour you want to trigger a sync.
         */
        public Builder syncHour(long syncHour) {
            Utils.checkNotNull(syncHour, "syncHour");
            this.syncHour = Optional.ofNullable(syncHour);
            return this;
        }

        /**
         * The hour you want to trigger a sync.
         */
        public Builder syncHour(Optional<Long> syncHour) {
            Utils.checkNotNull(syncHour, "syncHour");
            this.syncHour = syncHour;
            return this;
        }

        /**
         * The timezone for the company.
         */
        public Builder timeZone(String timeZone) {
            Utils.checkNotNull(timeZone, "timeZone");
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        /**
         * The timezone for the company.
         */
        public Builder timeZone(Optional<String> timeZone) {
            Utils.checkNotNull(timeZone, "timeZone");
            this.timeZone = timeZone;
            return this;
        }
        
        public SyncSchedule build() {
            return new SyncSchedule(
                frequencyOptions,
                selectedFrequency,
                startDate,
                syncHour,
                timeZone);
        }
    }
}

