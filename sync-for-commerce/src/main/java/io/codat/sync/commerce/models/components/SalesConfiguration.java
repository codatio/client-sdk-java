/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class SalesConfiguration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts")
    private JsonNullable<? extends Map<String, AccountConfiguration>> accounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grouping")
    private Optional<? extends Grouping> grouping;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceStatus")
    private Optional<? extends InvoiceStatus> invoiceStatus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newTaxRates")
    private Optional<? extends NewTaxRates> newTaxRates;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salesCustomer")
    private Optional<? extends SalesCustomer> salesCustomer;

    /**
     * Boolean indicator for syncing sales.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncSales")
    private Optional<Boolean> syncSales;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRates")
    private JsonNullable<? extends Map<String, TaxRateAmount>> taxRates;

    @JsonCreator
    public SalesConfiguration(
            @JsonProperty("accounts") JsonNullable<? extends Map<String, AccountConfiguration>> accounts,
            @JsonProperty("grouping") Optional<? extends Grouping> grouping,
            @JsonProperty("invoiceStatus") Optional<? extends InvoiceStatus> invoiceStatus,
            @JsonProperty("newTaxRates") Optional<? extends NewTaxRates> newTaxRates,
            @JsonProperty("salesCustomer") Optional<? extends SalesCustomer> salesCustomer,
            @JsonProperty("syncSales") Optional<Boolean> syncSales,
            @JsonProperty("taxRates") JsonNullable<? extends Map<String, TaxRateAmount>> taxRates) {
        Utils.checkNotNull(accounts, "accounts");
        Utils.checkNotNull(grouping, "grouping");
        Utils.checkNotNull(invoiceStatus, "invoiceStatus");
        Utils.checkNotNull(newTaxRates, "newTaxRates");
        Utils.checkNotNull(salesCustomer, "salesCustomer");
        Utils.checkNotNull(syncSales, "syncSales");
        Utils.checkNotNull(taxRates, "taxRates");
        this.accounts = accounts;
        this.grouping = grouping;
        this.invoiceStatus = invoiceStatus;
        this.newTaxRates = newTaxRates;
        this.salesCustomer = salesCustomer;
        this.syncSales = syncSales;
        this.taxRates = taxRates;
    }
    
    public SalesConfiguration() {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, AccountConfiguration>> accounts() {
        return (JsonNullable<Map<String, AccountConfiguration>>) accounts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Grouping> grouping() {
        return (Optional<Grouping>) grouping;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InvoiceStatus> invoiceStatus() {
        return (Optional<InvoiceStatus>) invoiceStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NewTaxRates> newTaxRates() {
        return (Optional<NewTaxRates>) newTaxRates;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SalesCustomer> salesCustomer() {
        return (Optional<SalesCustomer>) salesCustomer;
    }

    /**
     * Boolean indicator for syncing sales.
     */
    @JsonIgnore
    public Optional<Boolean> syncSales() {
        return syncSales;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Map<String, TaxRateAmount>> taxRates() {
        return (JsonNullable<Map<String, TaxRateAmount>>) taxRates;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SalesConfiguration withAccounts(Map<String, AccountConfiguration> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = JsonNullable.of(accounts);
        return this;
    }

    public SalesConfiguration withAccounts(JsonNullable<? extends Map<String, AccountConfiguration>> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = accounts;
        return this;
    }

    public SalesConfiguration withGrouping(Grouping grouping) {
        Utils.checkNotNull(grouping, "grouping");
        this.grouping = Optional.ofNullable(grouping);
        return this;
    }

    public SalesConfiguration withGrouping(Optional<? extends Grouping> grouping) {
        Utils.checkNotNull(grouping, "grouping");
        this.grouping = grouping;
        return this;
    }

    public SalesConfiguration withInvoiceStatus(InvoiceStatus invoiceStatus) {
        Utils.checkNotNull(invoiceStatus, "invoiceStatus");
        this.invoiceStatus = Optional.ofNullable(invoiceStatus);
        return this;
    }

    public SalesConfiguration withInvoiceStatus(Optional<? extends InvoiceStatus> invoiceStatus) {
        Utils.checkNotNull(invoiceStatus, "invoiceStatus");
        this.invoiceStatus = invoiceStatus;
        return this;
    }

    public SalesConfiguration withNewTaxRates(NewTaxRates newTaxRates) {
        Utils.checkNotNull(newTaxRates, "newTaxRates");
        this.newTaxRates = Optional.ofNullable(newTaxRates);
        return this;
    }

    public SalesConfiguration withNewTaxRates(Optional<? extends NewTaxRates> newTaxRates) {
        Utils.checkNotNull(newTaxRates, "newTaxRates");
        this.newTaxRates = newTaxRates;
        return this;
    }

    public SalesConfiguration withSalesCustomer(SalesCustomer salesCustomer) {
        Utils.checkNotNull(salesCustomer, "salesCustomer");
        this.salesCustomer = Optional.ofNullable(salesCustomer);
        return this;
    }

    public SalesConfiguration withSalesCustomer(Optional<? extends SalesCustomer> salesCustomer) {
        Utils.checkNotNull(salesCustomer, "salesCustomer");
        this.salesCustomer = salesCustomer;
        return this;
    }

    /**
     * Boolean indicator for syncing sales.
     */
    public SalesConfiguration withSyncSales(boolean syncSales) {
        Utils.checkNotNull(syncSales, "syncSales");
        this.syncSales = Optional.ofNullable(syncSales);
        return this;
    }

    /**
     * Boolean indicator for syncing sales.
     */
    public SalesConfiguration withSyncSales(Optional<Boolean> syncSales) {
        Utils.checkNotNull(syncSales, "syncSales");
        this.syncSales = syncSales;
        return this;
    }

    public SalesConfiguration withTaxRates(Map<String, TaxRateAmount> taxRates) {
        Utils.checkNotNull(taxRates, "taxRates");
        this.taxRates = JsonNullable.of(taxRates);
        return this;
    }

    public SalesConfiguration withTaxRates(JsonNullable<? extends Map<String, TaxRateAmount>> taxRates) {
        Utils.checkNotNull(taxRates, "taxRates");
        this.taxRates = taxRates;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SalesConfiguration other = (SalesConfiguration) o;
        return 
            Objects.deepEquals(this.accounts, other.accounts) &&
            Objects.deepEquals(this.grouping, other.grouping) &&
            Objects.deepEquals(this.invoiceStatus, other.invoiceStatus) &&
            Objects.deepEquals(this.newTaxRates, other.newTaxRates) &&
            Objects.deepEquals(this.salesCustomer, other.salesCustomer) &&
            Objects.deepEquals(this.syncSales, other.syncSales) &&
            Objects.deepEquals(this.taxRates, other.taxRates);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accounts,
            grouping,
            invoiceStatus,
            newTaxRates,
            salesCustomer,
            syncSales,
            taxRates);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SalesConfiguration.class,
                "accounts", accounts,
                "grouping", grouping,
                "invoiceStatus", invoiceStatus,
                "newTaxRates", newTaxRates,
                "salesCustomer", salesCustomer,
                "syncSales", syncSales,
                "taxRates", taxRates);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Map<String, AccountConfiguration>> accounts = JsonNullable.undefined();
 
        private Optional<? extends Grouping> grouping = Optional.empty();
 
        private Optional<? extends InvoiceStatus> invoiceStatus = Optional.empty();
 
        private Optional<? extends NewTaxRates> newTaxRates = Optional.empty();
 
        private Optional<? extends SalesCustomer> salesCustomer = Optional.empty();
 
        private Optional<Boolean> syncSales = Optional.empty();
 
        private JsonNullable<? extends Map<String, TaxRateAmount>> taxRates = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accounts(Map<String, AccountConfiguration> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = JsonNullable.of(accounts);
            return this;
        }

        public Builder accounts(JsonNullable<? extends Map<String, AccountConfiguration>> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = accounts;
            return this;
        }

        public Builder grouping(Grouping grouping) {
            Utils.checkNotNull(grouping, "grouping");
            this.grouping = Optional.ofNullable(grouping);
            return this;
        }

        public Builder grouping(Optional<? extends Grouping> grouping) {
            Utils.checkNotNull(grouping, "grouping");
            this.grouping = grouping;
            return this;
        }

        public Builder invoiceStatus(InvoiceStatus invoiceStatus) {
            Utils.checkNotNull(invoiceStatus, "invoiceStatus");
            this.invoiceStatus = Optional.ofNullable(invoiceStatus);
            return this;
        }

        public Builder invoiceStatus(Optional<? extends InvoiceStatus> invoiceStatus) {
            Utils.checkNotNull(invoiceStatus, "invoiceStatus");
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        public Builder newTaxRates(NewTaxRates newTaxRates) {
            Utils.checkNotNull(newTaxRates, "newTaxRates");
            this.newTaxRates = Optional.ofNullable(newTaxRates);
            return this;
        }

        public Builder newTaxRates(Optional<? extends NewTaxRates> newTaxRates) {
            Utils.checkNotNull(newTaxRates, "newTaxRates");
            this.newTaxRates = newTaxRates;
            return this;
        }

        public Builder salesCustomer(SalesCustomer salesCustomer) {
            Utils.checkNotNull(salesCustomer, "salesCustomer");
            this.salesCustomer = Optional.ofNullable(salesCustomer);
            return this;
        }

        public Builder salesCustomer(Optional<? extends SalesCustomer> salesCustomer) {
            Utils.checkNotNull(salesCustomer, "salesCustomer");
            this.salesCustomer = salesCustomer;
            return this;
        }

        /**
         * Boolean indicator for syncing sales.
         */
        public Builder syncSales(boolean syncSales) {
            Utils.checkNotNull(syncSales, "syncSales");
            this.syncSales = Optional.ofNullable(syncSales);
            return this;
        }

        /**
         * Boolean indicator for syncing sales.
         */
        public Builder syncSales(Optional<Boolean> syncSales) {
            Utils.checkNotNull(syncSales, "syncSales");
            this.syncSales = syncSales;
            return this;
        }

        public Builder taxRates(Map<String, TaxRateAmount> taxRates) {
            Utils.checkNotNull(taxRates, "taxRates");
            this.taxRates = JsonNullable.of(taxRates);
            return this;
        }

        public Builder taxRates(JsonNullable<? extends Map<String, TaxRateAmount>> taxRates) {
            Utils.checkNotNull(taxRates, "taxRates");
            this.taxRates = taxRates;
            return this;
        }
        
        public SalesConfiguration build() {
            return new SalesConfiguration(
                accounts,
                grouping,
                invoiceStatus,
                newTaxRates,
                salesCustomer,
                syncSales,
                taxRates);
        }
    }
}

