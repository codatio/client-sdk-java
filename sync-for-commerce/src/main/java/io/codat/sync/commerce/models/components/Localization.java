/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Localization {

    /**
     * `True` if required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    private Optional<Boolean> required;

    /**
     * Value of the property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private JsonNullable<String> text;

    @JsonCreator
    public Localization(
            @JsonProperty("required") Optional<Boolean> required,
            @JsonProperty("text") JsonNullable<String> text) {
        Utils.checkNotNull(required, "required");
        Utils.checkNotNull(text, "text");
        this.required = required;
        this.text = text;
    }
    
    public Localization() {
        this(Optional.empty(), JsonNullable.undefined());
    }

    /**
     * `True` if required.
     */
    @JsonIgnore
    public Optional<Boolean> required() {
        return required;
    }

    /**
     * Value of the property.
     */
    @JsonIgnore
    public JsonNullable<String> text() {
        return text;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * `True` if required.
     */
    public Localization withRequired(boolean required) {
        Utils.checkNotNull(required, "required");
        this.required = Optional.ofNullable(required);
        return this;
    }

    /**
     * `True` if required.
     */
    public Localization withRequired(Optional<Boolean> required) {
        Utils.checkNotNull(required, "required");
        this.required = required;
        return this;
    }

    /**
     * Value of the property.
     */
    public Localization withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = JsonNullable.of(text);
        return this;
    }

    /**
     * Value of the property.
     */
    public Localization withText(JsonNullable<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Localization other = (Localization) o;
        return 
            Objects.deepEquals(this.required, other.required) &&
            Objects.deepEquals(this.text, other.text);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            required,
            text);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Localization.class,
                "required", required,
                "text", text);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> required = Optional.empty();
 
        private JsonNullable<String> text = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * `True` if required.
         */
        public Builder required(boolean required) {
            Utils.checkNotNull(required, "required");
            this.required = Optional.ofNullable(required);
            return this;
        }

        /**
         * `True` if required.
         */
        public Builder required(Optional<Boolean> required) {
            Utils.checkNotNull(required, "required");
            this.required = required;
            return this;
        }

        /**
         * Value of the property.
         */
        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = JsonNullable.of(text);
            return this;
        }

        /**
         * Value of the property.
         */
        public Builder text(JsonNullable<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }
        
        public Localization build() {
            return new Localization(
                required,
                text);
        }
    }
}

