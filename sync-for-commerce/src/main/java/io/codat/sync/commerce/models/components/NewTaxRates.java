/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import org.openapitools.jackson.nullable.JsonNullable;


public class NewTaxRates {

    /**
     * Array of accounting tax rate options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingTaxRateOptions")
    private JsonNullable<? extends java.util.List<Option>> accountingTaxRateOptions;

    /**
     * Array of tax component options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerceTaxRateOptions")
    private JsonNullable<? extends java.util.List<Option>> commerceTaxRateOptions;

    /**
     * Default zero tax rate selected for sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultZeroTaxRateOptions")
    private JsonNullable<? extends java.util.List<Option>> defaultZeroTaxRateOptions;

    /**
     * Default tax rate selected for sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedDefaultZeroTaxRateId")
    private JsonNullable<? extends String> selectedDefaultZeroTaxRateId;

    /**
     * Array of tax component to rate mapppings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRateMappings")
    private JsonNullable<? extends java.util.List<TaxRateMapping>> taxRateMappings;

    public NewTaxRates(
            @JsonProperty("accountingTaxRateOptions") JsonNullable<? extends java.util.List<Option>> accountingTaxRateOptions,
            @JsonProperty("commerceTaxRateOptions") JsonNullable<? extends java.util.List<Option>> commerceTaxRateOptions,
            @JsonProperty("defaultZeroTaxRateOptions") JsonNullable<? extends java.util.List<Option>> defaultZeroTaxRateOptions,
            @JsonProperty("selectedDefaultZeroTaxRateId") JsonNullable<? extends String> selectedDefaultZeroTaxRateId,
            @JsonProperty("taxRateMappings") JsonNullable<? extends java.util.List<TaxRateMapping>> taxRateMappings) {
        Utils.checkNotNull(accountingTaxRateOptions, "accountingTaxRateOptions");
        Utils.checkNotNull(commerceTaxRateOptions, "commerceTaxRateOptions");
        Utils.checkNotNull(defaultZeroTaxRateOptions, "defaultZeroTaxRateOptions");
        Utils.checkNotNull(selectedDefaultZeroTaxRateId, "selectedDefaultZeroTaxRateId");
        Utils.checkNotNull(taxRateMappings, "taxRateMappings");
        this.accountingTaxRateOptions = accountingTaxRateOptions;
        this.commerceTaxRateOptions = commerceTaxRateOptions;
        this.defaultZeroTaxRateOptions = defaultZeroTaxRateOptions;
        this.selectedDefaultZeroTaxRateId = selectedDefaultZeroTaxRateId;
        this.taxRateMappings = taxRateMappings;
    }

    /**
     * Array of accounting tax rate options.
     */
    public JsonNullable<? extends java.util.List<Option>> accountingTaxRateOptions() {
        return accountingTaxRateOptions;
    }

    /**
     * Array of tax component options.
     */
    public JsonNullable<? extends java.util.List<Option>> commerceTaxRateOptions() {
        return commerceTaxRateOptions;
    }

    /**
     * Default zero tax rate selected for sync.
     */
    public JsonNullable<? extends java.util.List<Option>> defaultZeroTaxRateOptions() {
        return defaultZeroTaxRateOptions;
    }

    /**
     * Default tax rate selected for sync.
     */
    public JsonNullable<? extends String> selectedDefaultZeroTaxRateId() {
        return selectedDefaultZeroTaxRateId;
    }

    /**
     * Array of tax component to rate mapppings.
     */
    public JsonNullable<? extends java.util.List<TaxRateMapping>> taxRateMappings() {
        return taxRateMappings;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Array of accounting tax rate options.
     */
    public NewTaxRates withAccountingTaxRateOptions(java.util.List<Option> accountingTaxRateOptions) {
        Utils.checkNotNull(accountingTaxRateOptions, "accountingTaxRateOptions");
        this.accountingTaxRateOptions = JsonNullable.of(accountingTaxRateOptions);
        return this;
    }

    /**
     * Array of accounting tax rate options.
     */
    public NewTaxRates withAccountingTaxRateOptions(JsonNullable<? extends java.util.List<Option>> accountingTaxRateOptions) {
        Utils.checkNotNull(accountingTaxRateOptions, "accountingTaxRateOptions");
        this.accountingTaxRateOptions = accountingTaxRateOptions;
        return this;
    }

    /**
     * Array of tax component options.
     */
    public NewTaxRates withCommerceTaxRateOptions(java.util.List<Option> commerceTaxRateOptions) {
        Utils.checkNotNull(commerceTaxRateOptions, "commerceTaxRateOptions");
        this.commerceTaxRateOptions = JsonNullable.of(commerceTaxRateOptions);
        return this;
    }

    /**
     * Array of tax component options.
     */
    public NewTaxRates withCommerceTaxRateOptions(JsonNullable<? extends java.util.List<Option>> commerceTaxRateOptions) {
        Utils.checkNotNull(commerceTaxRateOptions, "commerceTaxRateOptions");
        this.commerceTaxRateOptions = commerceTaxRateOptions;
        return this;
    }

    /**
     * Default zero tax rate selected for sync.
     */
    public NewTaxRates withDefaultZeroTaxRateOptions(java.util.List<Option> defaultZeroTaxRateOptions) {
        Utils.checkNotNull(defaultZeroTaxRateOptions, "defaultZeroTaxRateOptions");
        this.defaultZeroTaxRateOptions = JsonNullable.of(defaultZeroTaxRateOptions);
        return this;
    }

    /**
     * Default zero tax rate selected for sync.
     */
    public NewTaxRates withDefaultZeroTaxRateOptions(JsonNullable<? extends java.util.List<Option>> defaultZeroTaxRateOptions) {
        Utils.checkNotNull(defaultZeroTaxRateOptions, "defaultZeroTaxRateOptions");
        this.defaultZeroTaxRateOptions = defaultZeroTaxRateOptions;
        return this;
    }

    /**
     * Default tax rate selected for sync.
     */
    public NewTaxRates withSelectedDefaultZeroTaxRateId(String selectedDefaultZeroTaxRateId) {
        Utils.checkNotNull(selectedDefaultZeroTaxRateId, "selectedDefaultZeroTaxRateId");
        this.selectedDefaultZeroTaxRateId = JsonNullable.of(selectedDefaultZeroTaxRateId);
        return this;
    }

    /**
     * Default tax rate selected for sync.
     */
    public NewTaxRates withSelectedDefaultZeroTaxRateId(JsonNullable<? extends String> selectedDefaultZeroTaxRateId) {
        Utils.checkNotNull(selectedDefaultZeroTaxRateId, "selectedDefaultZeroTaxRateId");
        this.selectedDefaultZeroTaxRateId = selectedDefaultZeroTaxRateId;
        return this;
    }

    /**
     * Array of tax component to rate mapppings.
     */
    public NewTaxRates withTaxRateMappings(java.util.List<TaxRateMapping> taxRateMappings) {
        Utils.checkNotNull(taxRateMappings, "taxRateMappings");
        this.taxRateMappings = JsonNullable.of(taxRateMappings);
        return this;
    }

    /**
     * Array of tax component to rate mapppings.
     */
    public NewTaxRates withTaxRateMappings(JsonNullable<? extends java.util.List<TaxRateMapping>> taxRateMappings) {
        Utils.checkNotNull(taxRateMappings, "taxRateMappings");
        this.taxRateMappings = taxRateMappings;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewTaxRates other = (NewTaxRates) o;
        return 
            java.util.Objects.deepEquals(this.accountingTaxRateOptions, other.accountingTaxRateOptions) &&
            java.util.Objects.deepEquals(this.commerceTaxRateOptions, other.commerceTaxRateOptions) &&
            java.util.Objects.deepEquals(this.defaultZeroTaxRateOptions, other.defaultZeroTaxRateOptions) &&
            java.util.Objects.deepEquals(this.selectedDefaultZeroTaxRateId, other.selectedDefaultZeroTaxRateId) &&
            java.util.Objects.deepEquals(this.taxRateMappings, other.taxRateMappings);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountingTaxRateOptions,
            commerceTaxRateOptions,
            defaultZeroTaxRateOptions,
            selectedDefaultZeroTaxRateId,
            taxRateMappings);
    }
    
    @Override
    public String toString() {
        return Utils.toString(NewTaxRates.class,
                "accountingTaxRateOptions", accountingTaxRateOptions,
                "commerceTaxRateOptions", commerceTaxRateOptions,
                "defaultZeroTaxRateOptions", defaultZeroTaxRateOptions,
                "selectedDefaultZeroTaxRateId", selectedDefaultZeroTaxRateId,
                "taxRateMappings", taxRateMappings);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends java.util.List<Option>> accountingTaxRateOptions = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<Option>> commerceTaxRateOptions = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<Option>> defaultZeroTaxRateOptions = JsonNullable.undefined();
 
        private JsonNullable<? extends String> selectedDefaultZeroTaxRateId = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<TaxRateMapping>> taxRateMappings = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Array of accounting tax rate options.
         */
        public Builder accountingTaxRateOptions(java.util.List<Option> accountingTaxRateOptions) {
            Utils.checkNotNull(accountingTaxRateOptions, "accountingTaxRateOptions");
            this.accountingTaxRateOptions = JsonNullable.of(accountingTaxRateOptions);
            return this;
        }

        /**
         * Array of accounting tax rate options.
         */
        public Builder accountingTaxRateOptions(JsonNullable<? extends java.util.List<Option>> accountingTaxRateOptions) {
            Utils.checkNotNull(accountingTaxRateOptions, "accountingTaxRateOptions");
            this.accountingTaxRateOptions = accountingTaxRateOptions;
            return this;
        }

        /**
         * Array of tax component options.
         */
        public Builder commerceTaxRateOptions(java.util.List<Option> commerceTaxRateOptions) {
            Utils.checkNotNull(commerceTaxRateOptions, "commerceTaxRateOptions");
            this.commerceTaxRateOptions = JsonNullable.of(commerceTaxRateOptions);
            return this;
        }

        /**
         * Array of tax component options.
         */
        public Builder commerceTaxRateOptions(JsonNullable<? extends java.util.List<Option>> commerceTaxRateOptions) {
            Utils.checkNotNull(commerceTaxRateOptions, "commerceTaxRateOptions");
            this.commerceTaxRateOptions = commerceTaxRateOptions;
            return this;
        }

        /**
         * Default zero tax rate selected for sync.
         */
        public Builder defaultZeroTaxRateOptions(java.util.List<Option> defaultZeroTaxRateOptions) {
            Utils.checkNotNull(defaultZeroTaxRateOptions, "defaultZeroTaxRateOptions");
            this.defaultZeroTaxRateOptions = JsonNullable.of(defaultZeroTaxRateOptions);
            return this;
        }

        /**
         * Default zero tax rate selected for sync.
         */
        public Builder defaultZeroTaxRateOptions(JsonNullable<? extends java.util.List<Option>> defaultZeroTaxRateOptions) {
            Utils.checkNotNull(defaultZeroTaxRateOptions, "defaultZeroTaxRateOptions");
            this.defaultZeroTaxRateOptions = defaultZeroTaxRateOptions;
            return this;
        }

        /**
         * Default tax rate selected for sync.
         */
        public Builder selectedDefaultZeroTaxRateId(String selectedDefaultZeroTaxRateId) {
            Utils.checkNotNull(selectedDefaultZeroTaxRateId, "selectedDefaultZeroTaxRateId");
            this.selectedDefaultZeroTaxRateId = JsonNullable.of(selectedDefaultZeroTaxRateId);
            return this;
        }

        /**
         * Default tax rate selected for sync.
         */
        public Builder selectedDefaultZeroTaxRateId(JsonNullable<? extends String> selectedDefaultZeroTaxRateId) {
            Utils.checkNotNull(selectedDefaultZeroTaxRateId, "selectedDefaultZeroTaxRateId");
            this.selectedDefaultZeroTaxRateId = selectedDefaultZeroTaxRateId;
            return this;
        }

        /**
         * Array of tax component to rate mapppings.
         */
        public Builder taxRateMappings(java.util.List<TaxRateMapping> taxRateMappings) {
            Utils.checkNotNull(taxRateMappings, "taxRateMappings");
            this.taxRateMappings = JsonNullable.of(taxRateMappings);
            return this;
        }

        /**
         * Array of tax component to rate mapppings.
         */
        public Builder taxRateMappings(JsonNullable<? extends java.util.List<TaxRateMapping>> taxRateMappings) {
            Utils.checkNotNull(taxRateMappings, "taxRateMappings");
            this.taxRateMappings = taxRateMappings;
            return this;
        }
        
        public NewTaxRates build() {
            return new NewTaxRates(
                accountingTaxRateOptions,
                commerceTaxRateOptions,
                defaultZeroTaxRateOptions,
                selectedDefaultZeroTaxRateId,
                taxRateMappings);
        }
    }
}

