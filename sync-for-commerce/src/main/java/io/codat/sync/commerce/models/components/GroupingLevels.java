/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class GroupingLevels {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceLevel")
    private Optional<? extends InvoiceLevelSelection> invoiceLevel;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceLineLevel")
    private Optional<? extends InvoiceLineLevelSelection> invoiceLineLevel;

    @JsonCreator
    public GroupingLevels(
            @JsonProperty("invoiceLevel") Optional<? extends InvoiceLevelSelection> invoiceLevel,
            @JsonProperty("invoiceLineLevel") Optional<? extends InvoiceLineLevelSelection> invoiceLineLevel) {
        Utils.checkNotNull(invoiceLevel, "invoiceLevel");
        Utils.checkNotNull(invoiceLineLevel, "invoiceLineLevel");
        this.invoiceLevel = invoiceLevel;
        this.invoiceLineLevel = invoiceLineLevel;
    }
    
    public GroupingLevels() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InvoiceLevelSelection> invoiceLevel() {
        return (Optional<InvoiceLevelSelection>) invoiceLevel;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InvoiceLineLevelSelection> invoiceLineLevel() {
        return (Optional<InvoiceLineLevelSelection>) invoiceLineLevel;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GroupingLevels withInvoiceLevel(InvoiceLevelSelection invoiceLevel) {
        Utils.checkNotNull(invoiceLevel, "invoiceLevel");
        this.invoiceLevel = Optional.ofNullable(invoiceLevel);
        return this;
    }

    public GroupingLevels withInvoiceLevel(Optional<? extends InvoiceLevelSelection> invoiceLevel) {
        Utils.checkNotNull(invoiceLevel, "invoiceLevel");
        this.invoiceLevel = invoiceLevel;
        return this;
    }

    public GroupingLevels withInvoiceLineLevel(InvoiceLineLevelSelection invoiceLineLevel) {
        Utils.checkNotNull(invoiceLineLevel, "invoiceLineLevel");
        this.invoiceLineLevel = Optional.ofNullable(invoiceLineLevel);
        return this;
    }

    public GroupingLevels withInvoiceLineLevel(Optional<? extends InvoiceLineLevelSelection> invoiceLineLevel) {
        Utils.checkNotNull(invoiceLineLevel, "invoiceLineLevel");
        this.invoiceLineLevel = invoiceLineLevel;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GroupingLevels other = (GroupingLevels) o;
        return 
            Objects.deepEquals(this.invoiceLevel, other.invoiceLevel) &&
            Objects.deepEquals(this.invoiceLineLevel, other.invoiceLineLevel);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            invoiceLevel,
            invoiceLineLevel);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GroupingLevels.class,
                "invoiceLevel", invoiceLevel,
                "invoiceLineLevel", invoiceLineLevel);
    }
    
    public final static class Builder {
 
        private Optional<? extends InvoiceLevelSelection> invoiceLevel = Optional.empty();
 
        private Optional<? extends InvoiceLineLevelSelection> invoiceLineLevel = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder invoiceLevel(InvoiceLevelSelection invoiceLevel) {
            Utils.checkNotNull(invoiceLevel, "invoiceLevel");
            this.invoiceLevel = Optional.ofNullable(invoiceLevel);
            return this;
        }

        public Builder invoiceLevel(Optional<? extends InvoiceLevelSelection> invoiceLevel) {
            Utils.checkNotNull(invoiceLevel, "invoiceLevel");
            this.invoiceLevel = invoiceLevel;
            return this;
        }

        public Builder invoiceLineLevel(InvoiceLineLevelSelection invoiceLineLevel) {
            Utils.checkNotNull(invoiceLineLevel, "invoiceLineLevel");
            this.invoiceLineLevel = Optional.ofNullable(invoiceLineLevel);
            return this;
        }

        public Builder invoiceLineLevel(Optional<? extends InvoiceLineLevelSelection> invoiceLineLevel) {
            Utils.checkNotNull(invoiceLineLevel, "invoiceLineLevel");
            this.invoiceLineLevel = invoiceLineLevel;
            return this;
        }
        
        public GroupingLevels build() {
            return new GroupingLevels(
                invoiceLevel,
                invoiceLineLevel);
        }
    }
}

