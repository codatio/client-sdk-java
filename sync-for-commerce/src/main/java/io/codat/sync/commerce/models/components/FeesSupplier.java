/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class FeesSupplier {

    /**
     * Selected supplier id from the list of supplier records on the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedSupplierId")
    private JsonNullable<String> selectedSupplierId;

    /**
     * List of supplier options from the list of supplier records on the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierOptions")
    private JsonNullable<? extends List<ConfigurationOption>> supplierOptions;

    @JsonCreator
    public FeesSupplier(
            @JsonProperty("selectedSupplierId") JsonNullable<String> selectedSupplierId,
            @JsonProperty("supplierOptions") JsonNullable<? extends List<ConfigurationOption>> supplierOptions) {
        Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
        Utils.checkNotNull(supplierOptions, "supplierOptions");
        this.selectedSupplierId = selectedSupplierId;
        this.supplierOptions = supplierOptions;
    }
    
    public FeesSupplier() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Selected supplier id from the list of supplier records on the accounting software.
     */
    @JsonIgnore
    public JsonNullable<String> selectedSupplierId() {
        return selectedSupplierId;
    }

    /**
     * List of supplier options from the list of supplier records on the accounting software.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<ConfigurationOption>> supplierOptions() {
        return (JsonNullable<List<ConfigurationOption>>) supplierOptions;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Selected supplier id from the list of supplier records on the accounting software.
     */
    public FeesSupplier withSelectedSupplierId(String selectedSupplierId) {
        Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
        this.selectedSupplierId = JsonNullable.of(selectedSupplierId);
        return this;
    }

    /**
     * Selected supplier id from the list of supplier records on the accounting software.
     */
    public FeesSupplier withSelectedSupplierId(JsonNullable<String> selectedSupplierId) {
        Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
        this.selectedSupplierId = selectedSupplierId;
        return this;
    }

    /**
     * List of supplier options from the list of supplier records on the accounting software.
     */
    public FeesSupplier withSupplierOptions(List<ConfigurationOption> supplierOptions) {
        Utils.checkNotNull(supplierOptions, "supplierOptions");
        this.supplierOptions = JsonNullable.of(supplierOptions);
        return this;
    }

    /**
     * List of supplier options from the list of supplier records on the accounting software.
     */
    public FeesSupplier withSupplierOptions(JsonNullable<? extends List<ConfigurationOption>> supplierOptions) {
        Utils.checkNotNull(supplierOptions, "supplierOptions");
        this.supplierOptions = supplierOptions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FeesSupplier other = (FeesSupplier) o;
        return 
            Objects.deepEquals(this.selectedSupplierId, other.selectedSupplierId) &&
            Objects.deepEquals(this.supplierOptions, other.supplierOptions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            selectedSupplierId,
            supplierOptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FeesSupplier.class,
                "selectedSupplierId", selectedSupplierId,
                "supplierOptions", supplierOptions);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> selectedSupplierId = JsonNullable.undefined();
 
        private JsonNullable<? extends List<ConfigurationOption>> supplierOptions = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Selected supplier id from the list of supplier records on the accounting software.
         */
        public Builder selectedSupplierId(String selectedSupplierId) {
            Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
            this.selectedSupplierId = JsonNullable.of(selectedSupplierId);
            return this;
        }

        /**
         * Selected supplier id from the list of supplier records on the accounting software.
         */
        public Builder selectedSupplierId(JsonNullable<String> selectedSupplierId) {
            Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
            this.selectedSupplierId = selectedSupplierId;
            return this;
        }

        /**
         * List of supplier options from the list of supplier records on the accounting software.
         */
        public Builder supplierOptions(List<ConfigurationOption> supplierOptions) {
            Utils.checkNotNull(supplierOptions, "supplierOptions");
            this.supplierOptions = JsonNullable.of(supplierOptions);
            return this;
        }

        /**
         * List of supplier options from the list of supplier records on the accounting software.
         */
        public Builder supplierOptions(JsonNullable<? extends List<ConfigurationOption>> supplierOptions) {
            Utils.checkNotNull(supplierOptions, "supplierOptions");
            this.supplierOptions = supplierOptions;
            return this;
        }
        
        public FeesSupplier build() {
            return new FeesSupplier(
                selectedSupplierId,
                supplierOptions);
        }
    }
}

