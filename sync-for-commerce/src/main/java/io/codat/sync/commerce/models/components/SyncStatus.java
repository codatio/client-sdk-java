/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * SyncStatus - The status of syncing for a company and its connections.
 */

public class SyncStatus {

    /**
     * Unique identifier for the sync in Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerceSyncId")
    private Optional<? extends String> commerceSyncId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyId")
    private Optional<? extends java.lang.Object> companyId;

    /**
     * Array of containing objects data connection information for the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataConnections")
    private JsonNullable<? extends java.util.List<Connection>> dataConnections;

    /**
     * Boolean indicator for data being pushed during a sync operation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataPushed")
    private Optional<? extends Boolean> dataPushed;

    /**
     * Friendly error message for the sync operation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    private JsonNullable<? extends String> errorMessage;

    /**
     * Exception message for the sync operation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncExceptionMessage")
    private JsonNullable<? extends String> syncExceptionMessage;

    /**
     * Unique identifier for the sync in Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncId")
    private Optional<? extends String> syncId;

    /**
     * Status of the sync of the company data. This is linked to status code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncStatus")
    private JsonNullable<? extends String> syncStatus;

    /**
     * Numerical status code sync of the company data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncStatusCode")
    private Optional<? extends Integer> syncStatusCode;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncUtc")
    private Optional<? extends String> syncUtc;

    public SyncStatus(
            @JsonProperty("commerceSyncId") Optional<? extends String> commerceSyncId,
            @JsonProperty("companyId") Optional<? extends java.lang.Object> companyId,
            @JsonProperty("dataConnections") JsonNullable<? extends java.util.List<Connection>> dataConnections,
            @JsonProperty("dataPushed") Optional<? extends Boolean> dataPushed,
            @JsonProperty("errorMessage") JsonNullable<? extends String> errorMessage,
            @JsonProperty("syncExceptionMessage") JsonNullable<? extends String> syncExceptionMessage,
            @JsonProperty("syncId") Optional<? extends String> syncId,
            @JsonProperty("syncStatus") JsonNullable<? extends String> syncStatus,
            @JsonProperty("syncStatusCode") Optional<? extends Integer> syncStatusCode,
            @JsonProperty("syncUtc") Optional<? extends String> syncUtc) {
        Utils.checkNotNull(commerceSyncId, "commerceSyncId");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(dataConnections, "dataConnections");
        Utils.checkNotNull(dataPushed, "dataPushed");
        Utils.checkNotNull(errorMessage, "errorMessage");
        Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
        Utils.checkNotNull(syncId, "syncId");
        Utils.checkNotNull(syncStatus, "syncStatus");
        Utils.checkNotNull(syncStatusCode, "syncStatusCode");
        Utils.checkNotNull(syncUtc, "syncUtc");
        this.commerceSyncId = commerceSyncId;
        this.companyId = companyId;
        this.dataConnections = dataConnections;
        this.dataPushed = dataPushed;
        this.errorMessage = errorMessage;
        this.syncExceptionMessage = syncExceptionMessage;
        this.syncId = syncId;
        this.syncStatus = syncStatus;
        this.syncStatusCode = syncStatusCode;
        this.syncUtc = syncUtc;
    }

    /**
     * Unique identifier for the sync in Codat.
     */
    public Optional<? extends String> commerceSyncId() {
        return commerceSyncId;
    }

    public Optional<? extends java.lang.Object> companyId() {
        return companyId;
    }

    /**
     * Array of containing objects data connection information for the company.
     */
    public JsonNullable<? extends java.util.List<Connection>> dataConnections() {
        return dataConnections;
    }

    /**
     * Boolean indicator for data being pushed during a sync operation.
     */
    public Optional<? extends Boolean> dataPushed() {
        return dataPushed;
    }

    /**
     * Friendly error message for the sync operation.
     */
    public JsonNullable<? extends String> errorMessage() {
        return errorMessage;
    }

    /**
     * Exception message for the sync operation.
     */
    public JsonNullable<? extends String> syncExceptionMessage() {
        return syncExceptionMessage;
    }

    /**
     * Unique identifier for the sync in Codat.
     */
    public Optional<? extends String> syncId() {
        return syncId;
    }

    /**
     * Status of the sync of the company data. This is linked to status code.
     */
    public JsonNullable<? extends String> syncStatus() {
        return syncStatus;
    }

    /**
     * Numerical status code sync of the company data.
     */
    public Optional<? extends Integer> syncStatusCode() {
        return syncStatusCode;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> syncUtc() {
        return syncUtc;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for the sync in Codat.
     */
    public SyncStatus withCommerceSyncId(String commerceSyncId) {
        Utils.checkNotNull(commerceSyncId, "commerceSyncId");
        this.commerceSyncId = Optional.ofNullable(commerceSyncId);
        return this;
    }
    
    /**
     * Unique identifier for the sync in Codat.
     */
    public SyncStatus withCommerceSyncId(Optional<? extends String> commerceSyncId) {
        Utils.checkNotNull(commerceSyncId, "commerceSyncId");
        this.commerceSyncId = commerceSyncId;
        return this;
    }

    public SyncStatus withCompanyId(java.lang.Object companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }
    
    public SyncStatus withCompanyId(Optional<? extends java.lang.Object> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Array of containing objects data connection information for the company.
     */
    public SyncStatus withDataConnections(java.util.List<Connection> dataConnections) {
        Utils.checkNotNull(dataConnections, "dataConnections");
        this.dataConnections = JsonNullable.of(dataConnections);
        return this;
    }

    /**
     * Array of containing objects data connection information for the company.
     */
    public SyncStatus withDataConnections(JsonNullable<? extends java.util.List<Connection>> dataConnections) {
        Utils.checkNotNull(dataConnections, "dataConnections");
        this.dataConnections = dataConnections;
        return this;
    }

    /**
     * Boolean indicator for data being pushed during a sync operation.
     */
    public SyncStatus withDataPushed(boolean dataPushed) {
        Utils.checkNotNull(dataPushed, "dataPushed");
        this.dataPushed = Optional.ofNullable(dataPushed);
        return this;
    }
    
    /**
     * Boolean indicator for data being pushed during a sync operation.
     */
    public SyncStatus withDataPushed(Optional<? extends Boolean> dataPushed) {
        Utils.checkNotNull(dataPushed, "dataPushed");
        this.dataPushed = dataPushed;
        return this;
    }

    /**
     * Friendly error message for the sync operation.
     */
    public SyncStatus withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = JsonNullable.of(errorMessage);
        return this;
    }

    /**
     * Friendly error message for the sync operation.
     */
    public SyncStatus withErrorMessage(JsonNullable<? extends String> errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Exception message for the sync operation.
     */
    public SyncStatus withSyncExceptionMessage(String syncExceptionMessage) {
        Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
        this.syncExceptionMessage = JsonNullable.of(syncExceptionMessage);
        return this;
    }

    /**
     * Exception message for the sync operation.
     */
    public SyncStatus withSyncExceptionMessage(JsonNullable<? extends String> syncExceptionMessage) {
        Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
        this.syncExceptionMessage = syncExceptionMessage;
        return this;
    }

    /**
     * Unique identifier for the sync in Codat.
     */
    public SyncStatus withSyncId(String syncId) {
        Utils.checkNotNull(syncId, "syncId");
        this.syncId = Optional.ofNullable(syncId);
        return this;
    }
    
    /**
     * Unique identifier for the sync in Codat.
     */
    public SyncStatus withSyncId(Optional<? extends String> syncId) {
        Utils.checkNotNull(syncId, "syncId");
        this.syncId = syncId;
        return this;
    }

    /**
     * Status of the sync of the company data. This is linked to status code.
     */
    public SyncStatus withSyncStatus(String syncStatus) {
        Utils.checkNotNull(syncStatus, "syncStatus");
        this.syncStatus = JsonNullable.of(syncStatus);
        return this;
    }

    /**
     * Status of the sync of the company data. This is linked to status code.
     */
    public SyncStatus withSyncStatus(JsonNullable<? extends String> syncStatus) {
        Utils.checkNotNull(syncStatus, "syncStatus");
        this.syncStatus = syncStatus;
        return this;
    }

    /**
     * Numerical status code sync of the company data.
     */
    public SyncStatus withSyncStatusCode(int syncStatusCode) {
        Utils.checkNotNull(syncStatusCode, "syncStatusCode");
        this.syncStatusCode = Optional.ofNullable(syncStatusCode);
        return this;
    }
    
    /**
     * Numerical status code sync of the company data.
     */
    public SyncStatus withSyncStatusCode(Optional<? extends Integer> syncStatusCode) {
        Utils.checkNotNull(syncStatusCode, "syncStatusCode");
        this.syncStatusCode = syncStatusCode;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public SyncStatus withSyncUtc(String syncUtc) {
        Utils.checkNotNull(syncUtc, "syncUtc");
        this.syncUtc = Optional.ofNullable(syncUtc);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public SyncStatus withSyncUtc(Optional<? extends String> syncUtc) {
        Utils.checkNotNull(syncUtc, "syncUtc");
        this.syncUtc = syncUtc;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SyncStatus other = (SyncStatus) o;
        return 
            java.util.Objects.deepEquals(this.commerceSyncId, other.commerceSyncId) &&
            java.util.Objects.deepEquals(this.companyId, other.companyId) &&
            java.util.Objects.deepEquals(this.dataConnections, other.dataConnections) &&
            java.util.Objects.deepEquals(this.dataPushed, other.dataPushed) &&
            java.util.Objects.deepEquals(this.errorMessage, other.errorMessage) &&
            java.util.Objects.deepEquals(this.syncExceptionMessage, other.syncExceptionMessage) &&
            java.util.Objects.deepEquals(this.syncId, other.syncId) &&
            java.util.Objects.deepEquals(this.syncStatus, other.syncStatus) &&
            java.util.Objects.deepEquals(this.syncStatusCode, other.syncStatusCode) &&
            java.util.Objects.deepEquals(this.syncUtc, other.syncUtc);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            commerceSyncId,
            companyId,
            dataConnections,
            dataPushed,
            errorMessage,
            syncExceptionMessage,
            syncId,
            syncStatus,
            syncStatusCode,
            syncUtc);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SyncStatus.class,
                "commerceSyncId", commerceSyncId,
                "companyId", companyId,
                "dataConnections", dataConnections,
                "dataPushed", dataPushed,
                "errorMessage", errorMessage,
                "syncExceptionMessage", syncExceptionMessage,
                "syncId", syncId,
                "syncStatus", syncStatus,
                "syncStatusCode", syncStatusCode,
                "syncUtc", syncUtc);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> commerceSyncId = Optional.empty();
 
        private Optional<? extends java.lang.Object> companyId = Optional.empty();
 
        private JsonNullable<? extends java.util.List<Connection>> dataConnections = JsonNullable.undefined();
 
        private Optional<? extends Boolean> dataPushed = Optional.empty();
 
        private JsonNullable<? extends String> errorMessage = JsonNullable.undefined();
 
        private JsonNullable<? extends String> syncExceptionMessage = JsonNullable.undefined();
 
        private Optional<? extends String> syncId = Optional.empty();
 
        private JsonNullable<? extends String> syncStatus = JsonNullable.undefined();
 
        private Optional<? extends Integer> syncStatusCode = Optional.empty();
 
        private Optional<? extends String> syncUtc = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the sync in Codat.
         */
        public Builder commerceSyncId(String commerceSyncId) {
            Utils.checkNotNull(commerceSyncId, "commerceSyncId");
            this.commerceSyncId = Optional.ofNullable(commerceSyncId);
            return this;
        }
        
        /**
         * Unique identifier for the sync in Codat.
         */
        public Builder commerceSyncId(Optional<? extends String> commerceSyncId) {
            Utils.checkNotNull(commerceSyncId, "commerceSyncId");
            this.commerceSyncId = commerceSyncId;
            return this;
        }

        public Builder companyId(java.lang.Object companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }
        
        public Builder companyId(Optional<? extends java.lang.Object> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Array of containing objects data connection information for the company.
         */
        public Builder dataConnections(java.util.List<Connection> dataConnections) {
            Utils.checkNotNull(dataConnections, "dataConnections");
            this.dataConnections = JsonNullable.of(dataConnections);
            return this;
        }

        /**
         * Array of containing objects data connection information for the company.
         */
        public Builder dataConnections(JsonNullable<? extends java.util.List<Connection>> dataConnections) {
            Utils.checkNotNull(dataConnections, "dataConnections");
            this.dataConnections = dataConnections;
            return this;
        }

        /**
         * Boolean indicator for data being pushed during a sync operation.
         */
        public Builder dataPushed(boolean dataPushed) {
            Utils.checkNotNull(dataPushed, "dataPushed");
            this.dataPushed = Optional.ofNullable(dataPushed);
            return this;
        }
        
        /**
         * Boolean indicator for data being pushed during a sync operation.
         */
        public Builder dataPushed(Optional<? extends Boolean> dataPushed) {
            Utils.checkNotNull(dataPushed, "dataPushed");
            this.dataPushed = dataPushed;
            return this;
        }

        /**
         * Friendly error message for the sync operation.
         */
        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = JsonNullable.of(errorMessage);
            return this;
        }

        /**
         * Friendly error message for the sync operation.
         */
        public Builder errorMessage(JsonNullable<? extends String> errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }

        /**
         * Exception message for the sync operation.
         */
        public Builder syncExceptionMessage(String syncExceptionMessage) {
            Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
            this.syncExceptionMessage = JsonNullable.of(syncExceptionMessage);
            return this;
        }

        /**
         * Exception message for the sync operation.
         */
        public Builder syncExceptionMessage(JsonNullable<? extends String> syncExceptionMessage) {
            Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
            this.syncExceptionMessage = syncExceptionMessage;
            return this;
        }

        /**
         * Unique identifier for the sync in Codat.
         */
        public Builder syncId(String syncId) {
            Utils.checkNotNull(syncId, "syncId");
            this.syncId = Optional.ofNullable(syncId);
            return this;
        }
        
        /**
         * Unique identifier for the sync in Codat.
         */
        public Builder syncId(Optional<? extends String> syncId) {
            Utils.checkNotNull(syncId, "syncId");
            this.syncId = syncId;
            return this;
        }

        /**
         * Status of the sync of the company data. This is linked to status code.
         */
        public Builder syncStatus(String syncStatus) {
            Utils.checkNotNull(syncStatus, "syncStatus");
            this.syncStatus = JsonNullable.of(syncStatus);
            return this;
        }

        /**
         * Status of the sync of the company data. This is linked to status code.
         */
        public Builder syncStatus(JsonNullable<? extends String> syncStatus) {
            Utils.checkNotNull(syncStatus, "syncStatus");
            this.syncStatus = syncStatus;
            return this;
        }

        /**
         * Numerical status code sync of the company data.
         */
        public Builder syncStatusCode(int syncStatusCode) {
            Utils.checkNotNull(syncStatusCode, "syncStatusCode");
            this.syncStatusCode = Optional.ofNullable(syncStatusCode);
            return this;
        }
        
        /**
         * Numerical status code sync of the company data.
         */
        public Builder syncStatusCode(Optional<? extends Integer> syncStatusCode) {
            Utils.checkNotNull(syncStatusCode, "syncStatusCode");
            this.syncStatusCode = syncStatusCode;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder syncUtc(String syncUtc) {
            Utils.checkNotNull(syncUtc, "syncUtc");
            this.syncUtc = Optional.ofNullable(syncUtc);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder syncUtc(Optional<? extends String> syncUtc) {
            Utils.checkNotNull(syncUtc, "syncUtc");
            this.syncUtc = syncUtc;
            return this;
        }
        
        public SyncStatus build() {
            return new SyncStatus(
                commerceSyncId,
                companyId,
                dataConnections,
                dataPushed,
                errorMessage,
                syncExceptionMessage,
                syncId,
                syncStatus,
                syncStatusCode,
                syncUtc);
        }
    }
}

