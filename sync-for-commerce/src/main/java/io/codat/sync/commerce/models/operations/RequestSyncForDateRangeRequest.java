/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.codat.sync.commerce.models.components.SyncRange;
import io.codat.sync.commerce.utils.SpeakeasyMetadata;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class RequestSyncForDateRangeRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends SyncRange> syncRange;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    @JsonCreator
    public RequestSyncForDateRangeRequest(
            Optional<? extends SyncRange> syncRange,
            String companyId) {
        Utils.checkNotNull(syncRange, "syncRange");
        Utils.checkNotNull(companyId, "companyId");
        this.syncRange = syncRange;
        this.companyId = companyId;
    }
    
    public RequestSyncForDateRangeRequest(
            String companyId) {
        this(Optional.empty(), companyId);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SyncRange> syncRange() {
        return (Optional<SyncRange>) syncRange;
    }

    /**
     * Unique identifier for a company.
     */
    @JsonIgnore
    public String companyId() {
        return companyId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RequestSyncForDateRangeRequest withSyncRange(SyncRange syncRange) {
        Utils.checkNotNull(syncRange, "syncRange");
        this.syncRange = Optional.ofNullable(syncRange);
        return this;
    }

    public RequestSyncForDateRangeRequest withSyncRange(Optional<? extends SyncRange> syncRange) {
        Utils.checkNotNull(syncRange, "syncRange");
        this.syncRange = syncRange;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public RequestSyncForDateRangeRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestSyncForDateRangeRequest other = (RequestSyncForDateRangeRequest) o;
        return 
            Objects.deepEquals(this.syncRange, other.syncRange) &&
            Objects.deepEquals(this.companyId, other.companyId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            syncRange,
            companyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequestSyncForDateRangeRequest.class,
                "syncRange", syncRange,
                "companyId", companyId);
    }
    
    public final static class Builder {
 
        private Optional<? extends SyncRange> syncRange = Optional.empty();
 
        private String companyId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder syncRange(SyncRange syncRange) {
            Utils.checkNotNull(syncRange, "syncRange");
            this.syncRange = Optional.ofNullable(syncRange);
            return this;
        }

        public Builder syncRange(Optional<? extends SyncRange> syncRange) {
            Utils.checkNotNull(syncRange, "syncRange");
            this.syncRange = syncRange;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }
        
        public RequestSyncForDateRangeRequest build() {
            return new RequestSyncForDateRangeRequest(
                syncRange,
                companyId);
        }
    }
}

