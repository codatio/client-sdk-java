/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.operations;

import io.codat.sync.commerce.utils.SpeakeasyMetadata;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class GetSyncFlowUrlRequest {

    /**
     * Accounting platform key
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountingKey")
    private String accountingKey;

    /**
     * Commerce platform key
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=commerceKey")
    private String commerceKey;

    /**
     * Identifier for your merchant, can be the merchant name or Codat company id.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=merchantIdentifier")
    private Optional<? extends String> merchantIdentifier;

    public GetSyncFlowUrlRequest(
            String accountingKey,
            String commerceKey,
            Optional<? extends String> merchantIdentifier) {
        Utils.checkNotNull(accountingKey, "accountingKey");
        Utils.checkNotNull(commerceKey, "commerceKey");
        Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
        this.accountingKey = accountingKey;
        this.commerceKey = commerceKey;
        this.merchantIdentifier = merchantIdentifier;
    }

    /**
     * Accounting platform key
     */
    public String accountingKey() {
        return accountingKey;
    }

    /**
     * Commerce platform key
     */
    public String commerceKey() {
        return commerceKey;
    }

    /**
     * Identifier for your merchant, can be the merchant name or Codat company id.
     */
    public Optional<? extends String> merchantIdentifier() {
        return merchantIdentifier;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Accounting platform key
     */
    public GetSyncFlowUrlRequest withAccountingKey(String accountingKey) {
        Utils.checkNotNull(accountingKey, "accountingKey");
        this.accountingKey = accountingKey;
        return this;
    }

    /**
     * Commerce platform key
     */
    public GetSyncFlowUrlRequest withCommerceKey(String commerceKey) {
        Utils.checkNotNull(commerceKey, "commerceKey");
        this.commerceKey = commerceKey;
        return this;
    }

    /**
     * Identifier for your merchant, can be the merchant name or Codat company id.
     */
    public GetSyncFlowUrlRequest withMerchantIdentifier(String merchantIdentifier) {
        Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
        this.merchantIdentifier = Optional.ofNullable(merchantIdentifier);
        return this;
    }
    
    /**
     * Identifier for your merchant, can be the merchant name or Codat company id.
     */
    public GetSyncFlowUrlRequest withMerchantIdentifier(Optional<? extends String> merchantIdentifier) {
        Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
        this.merchantIdentifier = merchantIdentifier;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSyncFlowUrlRequest other = (GetSyncFlowUrlRequest) o;
        return 
            java.util.Objects.deepEquals(this.accountingKey, other.accountingKey) &&
            java.util.Objects.deepEquals(this.commerceKey, other.commerceKey) &&
            java.util.Objects.deepEquals(this.merchantIdentifier, other.merchantIdentifier);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountingKey,
            commerceKey,
            merchantIdentifier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSyncFlowUrlRequest.class,
                "accountingKey", accountingKey,
                "commerceKey", commerceKey,
                "merchantIdentifier", merchantIdentifier);
    }
    
    public final static class Builder {
 
        private String accountingKey;
 
        private String commerceKey;
 
        private Optional<? extends String> merchantIdentifier = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Accounting platform key
         */
        public Builder accountingKey(String accountingKey) {
            Utils.checkNotNull(accountingKey, "accountingKey");
            this.accountingKey = accountingKey;
            return this;
        }

        /**
         * Commerce platform key
         */
        public Builder commerceKey(String commerceKey) {
            Utils.checkNotNull(commerceKey, "commerceKey");
            this.commerceKey = commerceKey;
            return this;
        }

        /**
         * Identifier for your merchant, can be the merchant name or Codat company id.
         */
        public Builder merchantIdentifier(String merchantIdentifier) {
            Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
            this.merchantIdentifier = Optional.ofNullable(merchantIdentifier);
            return this;
        }
        
        /**
         * Identifier for your merchant, can be the merchant name or Codat company id.
         */
        public Builder merchantIdentifier(Optional<? extends String> merchantIdentifier) {
            Utils.checkNotNull(merchantIdentifier, "merchantIdentifier");
            this.merchantIdentifier = merchantIdentifier;
            return this;
        }
        
        public GetSyncFlowUrlRequest build() {
            return new GetSyncFlowUrlRequest(
                accountingKey,
                commerceKey,
                merchantIdentifier);
        }
    }
}

