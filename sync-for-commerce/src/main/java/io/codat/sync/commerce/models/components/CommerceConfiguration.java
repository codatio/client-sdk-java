/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class CommerceConfiguration {

    /**
     * The country code outlining where the company is based.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryCode")
    private Optional<String> countryCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fees")
    private Optional<? extends FeesConfiguration> fees;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mapSettings")
    private Optional<? extends ConfigurationMapSettings> mapSettings;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newPayments")
    private Optional<? extends NewPaymentsConfiguration> newPayments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payments")
    private Optional<? extends PaymentsConfiguration> payments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales")
    private Optional<? extends SalesConfiguration> sales;

    @JsonCreator
    public CommerceConfiguration(
            @JsonProperty("countryCode") Optional<String> countryCode,
            @JsonProperty("fees") Optional<? extends FeesConfiguration> fees,
            @JsonProperty("mapSettings") Optional<? extends ConfigurationMapSettings> mapSettings,
            @JsonProperty("newPayments") Optional<? extends NewPaymentsConfiguration> newPayments,
            @JsonProperty("payments") Optional<? extends PaymentsConfiguration> payments,
            @JsonProperty("sales") Optional<? extends SalesConfiguration> sales) {
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(fees, "fees");
        Utils.checkNotNull(mapSettings, "mapSettings");
        Utils.checkNotNull(newPayments, "newPayments");
        Utils.checkNotNull(payments, "payments");
        Utils.checkNotNull(sales, "sales");
        this.countryCode = countryCode;
        this.fees = fees;
        this.mapSettings = mapSettings;
        this.newPayments = newPayments;
        this.payments = payments;
        this.sales = sales;
    }
    
    public CommerceConfiguration() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The country code outlining where the company is based.
     */
    @JsonIgnore
    public Optional<String> countryCode() {
        return countryCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FeesConfiguration> fees() {
        return (Optional<FeesConfiguration>) fees;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ConfigurationMapSettings> mapSettings() {
        return (Optional<ConfigurationMapSettings>) mapSettings;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NewPaymentsConfiguration> newPayments() {
        return (Optional<NewPaymentsConfiguration>) newPayments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentsConfiguration> payments() {
        return (Optional<PaymentsConfiguration>) payments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SalesConfiguration> sales() {
        return (Optional<SalesConfiguration>) sales;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The country code outlining where the company is based.
     */
    public CommerceConfiguration withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    /**
     * The country code outlining where the company is based.
     */
    public CommerceConfiguration withCountryCode(Optional<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    public CommerceConfiguration withFees(FeesConfiguration fees) {
        Utils.checkNotNull(fees, "fees");
        this.fees = Optional.ofNullable(fees);
        return this;
    }

    public CommerceConfiguration withFees(Optional<? extends FeesConfiguration> fees) {
        Utils.checkNotNull(fees, "fees");
        this.fees = fees;
        return this;
    }

    public CommerceConfiguration withMapSettings(ConfigurationMapSettings mapSettings) {
        Utils.checkNotNull(mapSettings, "mapSettings");
        this.mapSettings = Optional.ofNullable(mapSettings);
        return this;
    }

    public CommerceConfiguration withMapSettings(Optional<? extends ConfigurationMapSettings> mapSettings) {
        Utils.checkNotNull(mapSettings, "mapSettings");
        this.mapSettings = mapSettings;
        return this;
    }

    public CommerceConfiguration withNewPayments(NewPaymentsConfiguration newPayments) {
        Utils.checkNotNull(newPayments, "newPayments");
        this.newPayments = Optional.ofNullable(newPayments);
        return this;
    }

    public CommerceConfiguration withNewPayments(Optional<? extends NewPaymentsConfiguration> newPayments) {
        Utils.checkNotNull(newPayments, "newPayments");
        this.newPayments = newPayments;
        return this;
    }

    public CommerceConfiguration withPayments(PaymentsConfiguration payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = Optional.ofNullable(payments);
        return this;
    }

    public CommerceConfiguration withPayments(Optional<? extends PaymentsConfiguration> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = payments;
        return this;
    }

    public CommerceConfiguration withSales(SalesConfiguration sales) {
        Utils.checkNotNull(sales, "sales");
        this.sales = Optional.ofNullable(sales);
        return this;
    }

    public CommerceConfiguration withSales(Optional<? extends SalesConfiguration> sales) {
        Utils.checkNotNull(sales, "sales");
        this.sales = sales;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceConfiguration other = (CommerceConfiguration) o;
        return 
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.fees, other.fees) &&
            Objects.deepEquals(this.mapSettings, other.mapSettings) &&
            Objects.deepEquals(this.newPayments, other.newPayments) &&
            Objects.deepEquals(this.payments, other.payments) &&
            Objects.deepEquals(this.sales, other.sales);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            countryCode,
            fees,
            mapSettings,
            newPayments,
            payments,
            sales);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceConfiguration.class,
                "countryCode", countryCode,
                "fees", fees,
                "mapSettings", mapSettings,
                "newPayments", newPayments,
                "payments", payments,
                "sales", sales);
    }
    
    public final static class Builder {
 
        private Optional<String> countryCode = Optional.empty();
 
        private Optional<? extends FeesConfiguration> fees = Optional.empty();
 
        private Optional<? extends ConfigurationMapSettings> mapSettings = Optional.empty();
 
        private Optional<? extends NewPaymentsConfiguration> newPayments = Optional.empty();
 
        private Optional<? extends PaymentsConfiguration> payments = Optional.empty();
 
        private Optional<? extends SalesConfiguration> sales = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The country code outlining where the company is based.
         */
        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        /**
         * The country code outlining where the company is based.
         */
        public Builder countryCode(Optional<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        public Builder fees(FeesConfiguration fees) {
            Utils.checkNotNull(fees, "fees");
            this.fees = Optional.ofNullable(fees);
            return this;
        }

        public Builder fees(Optional<? extends FeesConfiguration> fees) {
            Utils.checkNotNull(fees, "fees");
            this.fees = fees;
            return this;
        }

        public Builder mapSettings(ConfigurationMapSettings mapSettings) {
            Utils.checkNotNull(mapSettings, "mapSettings");
            this.mapSettings = Optional.ofNullable(mapSettings);
            return this;
        }

        public Builder mapSettings(Optional<? extends ConfigurationMapSettings> mapSettings) {
            Utils.checkNotNull(mapSettings, "mapSettings");
            this.mapSettings = mapSettings;
            return this;
        }

        public Builder newPayments(NewPaymentsConfiguration newPayments) {
            Utils.checkNotNull(newPayments, "newPayments");
            this.newPayments = Optional.ofNullable(newPayments);
            return this;
        }

        public Builder newPayments(Optional<? extends NewPaymentsConfiguration> newPayments) {
            Utils.checkNotNull(newPayments, "newPayments");
            this.newPayments = newPayments;
            return this;
        }

        public Builder payments(PaymentsConfiguration payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = Optional.ofNullable(payments);
            return this;
        }

        public Builder payments(Optional<? extends PaymentsConfiguration> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = payments;
            return this;
        }

        public Builder sales(SalesConfiguration sales) {
            Utils.checkNotNull(sales, "sales");
            this.sales = Optional.ofNullable(sales);
            return this;
        }

        public Builder sales(Optional<? extends SalesConfiguration> sales) {
            Utils.checkNotNull(sales, "sales");
            this.sales = sales;
            return this;
        }
        
        public CommerceConfiguration build() {
            return new CommerceConfiguration(
                countryCode,
                fees,
                mapSettings,
                newPayments,
                payments,
                sales);
        }
    }
}

