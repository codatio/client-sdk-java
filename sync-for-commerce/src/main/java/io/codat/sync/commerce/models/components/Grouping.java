/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class Grouping {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupingLevels")
    private Optional<? extends GroupingLevels> groupingLevels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupingPeriod")
    private Optional<? extends GroupingPeriod> groupingPeriod;

    public Grouping(
            @JsonProperty("groupingLevels") Optional<? extends GroupingLevels> groupingLevels,
            @JsonProperty("groupingPeriod") Optional<? extends GroupingPeriod> groupingPeriod) {
        Utils.checkNotNull(groupingLevels, "groupingLevels");
        Utils.checkNotNull(groupingPeriod, "groupingPeriod");
        this.groupingLevels = groupingLevels;
        this.groupingPeriod = groupingPeriod;
    }

    public Optional<? extends GroupingLevels> groupingLevels() {
        return groupingLevels;
    }

    public Optional<? extends GroupingPeriod> groupingPeriod() {
        return groupingPeriod;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public Grouping withGroupingLevels(GroupingLevels groupingLevels) {
        Utils.checkNotNull(groupingLevels, "groupingLevels");
        this.groupingLevels = Optional.ofNullable(groupingLevels);
        return this;
    }
    
    public Grouping withGroupingLevels(Optional<? extends GroupingLevels> groupingLevels) {
        Utils.checkNotNull(groupingLevels, "groupingLevels");
        this.groupingLevels = groupingLevels;
        return this;
    }

    public Grouping withGroupingPeriod(GroupingPeriod groupingPeriod) {
        Utils.checkNotNull(groupingPeriod, "groupingPeriod");
        this.groupingPeriod = Optional.ofNullable(groupingPeriod);
        return this;
    }
    
    public Grouping withGroupingPeriod(Optional<? extends GroupingPeriod> groupingPeriod) {
        Utils.checkNotNull(groupingPeriod, "groupingPeriod");
        this.groupingPeriod = groupingPeriod;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Grouping other = (Grouping) o;
        return 
            java.util.Objects.deepEquals(this.groupingLevels, other.groupingLevels) &&
            java.util.Objects.deepEquals(this.groupingPeriod, other.groupingPeriod);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            groupingLevels,
            groupingPeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Grouping.class,
                "groupingLevels", groupingLevels,
                "groupingPeriod", groupingPeriod);
    }
    
    public final static class Builder {
 
        private Optional<? extends GroupingLevels> groupingLevels = Optional.empty();
 
        private Optional<? extends GroupingPeriod> groupingPeriod = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder groupingLevels(GroupingLevels groupingLevels) {
            Utils.checkNotNull(groupingLevels, "groupingLevels");
            this.groupingLevels = Optional.ofNullable(groupingLevels);
            return this;
        }
        
        public Builder groupingLevels(Optional<? extends GroupingLevels> groupingLevels) {
            Utils.checkNotNull(groupingLevels, "groupingLevels");
            this.groupingLevels = groupingLevels;
            return this;
        }

        public Builder groupingPeriod(GroupingPeriod groupingPeriod) {
            Utils.checkNotNull(groupingPeriod, "groupingPeriod");
            this.groupingPeriod = Optional.ofNullable(groupingPeriod);
            return this;
        }
        
        public Builder groupingPeriod(Optional<? extends GroupingPeriod> groupingPeriod) {
            Utils.checkNotNull(groupingPeriod, "groupingPeriod");
            this.groupingPeriod = groupingPeriod;
            return this;
        }
        
        public Grouping build() {
            return new Grouping(
                groupingLevels,
                groupingPeriod);
        }
    }
}

