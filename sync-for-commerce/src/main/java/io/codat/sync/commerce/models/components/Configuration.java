/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class Configuration {

    /**
     * The company name defined in the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingSoftwareCompanyName")
    private Optional<String> accountingSoftwareCompanyName;

    /**
     * Unique identifier for a company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyId")
    private Optional<? extends Object> companyId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    private Optional<? extends CommerceConfiguration> configuration;

    /**
     * True if Sync for Commerce has been configured for the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configured")
    private Optional<Boolean> configured;

    /**
     * True if Sync for Commerce is enabled for the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enable")
    private Optional<Boolean> enable;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    private Optional<? extends SyncSchedule> schedule;

    @JsonCreator
    public Configuration(
            @JsonProperty("accountingSoftwareCompanyName") Optional<String> accountingSoftwareCompanyName,
            @JsonProperty("companyId") Optional<? extends Object> companyId,
            @JsonProperty("configuration") Optional<? extends CommerceConfiguration> configuration,
            @JsonProperty("configured") Optional<Boolean> configured,
            @JsonProperty("enable") Optional<Boolean> enable,
            @JsonProperty("schedule") Optional<? extends SyncSchedule> schedule) {
        Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(configured, "configured");
        Utils.checkNotNull(enable, "enable");
        Utils.checkNotNull(schedule, "schedule");
        this.accountingSoftwareCompanyName = accountingSoftwareCompanyName;
        this.companyId = companyId;
        this.configuration = configuration;
        this.configured = configured;
        this.enable = enable;
        this.schedule = schedule;
    }
    
    public Configuration() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The company name defined in the accounting software.
     */
    @JsonIgnore
    public Optional<String> accountingSoftwareCompanyName() {
        return accountingSoftwareCompanyName;
    }

    /**
     * Unique identifier for a company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> companyId() {
        return (Optional<Object>) companyId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CommerceConfiguration> configuration() {
        return (Optional<CommerceConfiguration>) configuration;
    }

    /**
     * True if Sync for Commerce has been configured for the company.
     */
    @JsonIgnore
    public Optional<Boolean> configured() {
        return configured;
    }

    /**
     * True if Sync for Commerce is enabled for the company.
     */
    @JsonIgnore
    public Optional<Boolean> enable() {
        return enable;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SyncSchedule> schedule() {
        return (Optional<SyncSchedule>) schedule;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The company name defined in the accounting software.
     */
    public Configuration withAccountingSoftwareCompanyName(String accountingSoftwareCompanyName) {
        Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
        this.accountingSoftwareCompanyName = Optional.ofNullable(accountingSoftwareCompanyName);
        return this;
    }

    /**
     * The company name defined in the accounting software.
     */
    public Configuration withAccountingSoftwareCompanyName(Optional<String> accountingSoftwareCompanyName) {
        Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
        this.accountingSoftwareCompanyName = accountingSoftwareCompanyName;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public Configuration withCompanyId(Object companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public Configuration withCompanyId(Optional<? extends Object> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    public Configuration withConfiguration(CommerceConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = Optional.ofNullable(configuration);
        return this;
    }

    public Configuration withConfiguration(Optional<? extends CommerceConfiguration> configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    /**
     * True if Sync for Commerce has been configured for the company.
     */
    public Configuration withConfigured(boolean configured) {
        Utils.checkNotNull(configured, "configured");
        this.configured = Optional.ofNullable(configured);
        return this;
    }

    /**
     * True if Sync for Commerce has been configured for the company.
     */
    public Configuration withConfigured(Optional<Boolean> configured) {
        Utils.checkNotNull(configured, "configured");
        this.configured = configured;
        return this;
    }

    /**
     * True if Sync for Commerce is enabled for the company.
     */
    public Configuration withEnable(boolean enable) {
        Utils.checkNotNull(enable, "enable");
        this.enable = Optional.ofNullable(enable);
        return this;
    }

    /**
     * True if Sync for Commerce is enabled for the company.
     */
    public Configuration withEnable(Optional<Boolean> enable) {
        Utils.checkNotNull(enable, "enable");
        this.enable = enable;
        return this;
    }

    public Configuration withSchedule(SyncSchedule schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = Optional.ofNullable(schedule);
        return this;
    }

    public Configuration withSchedule(Optional<? extends SyncSchedule> schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = schedule;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Configuration other = (Configuration) o;
        return 
            Objects.deepEquals(this.accountingSoftwareCompanyName, other.accountingSoftwareCompanyName) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.configuration, other.configuration) &&
            Objects.deepEquals(this.configured, other.configured) &&
            Objects.deepEquals(this.enable, other.enable) &&
            Objects.deepEquals(this.schedule, other.schedule);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountingSoftwareCompanyName,
            companyId,
            configuration,
            configured,
            enable,
            schedule);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Configuration.class,
                "accountingSoftwareCompanyName", accountingSoftwareCompanyName,
                "companyId", companyId,
                "configuration", configuration,
                "configured", configured,
                "enable", enable,
                "schedule", schedule);
    }
    
    public final static class Builder {
 
        private Optional<String> accountingSoftwareCompanyName = Optional.empty();
 
        private Optional<? extends Object> companyId = Optional.empty();
 
        private Optional<? extends CommerceConfiguration> configuration = Optional.empty();
 
        private Optional<Boolean> configured = Optional.empty();
 
        private Optional<Boolean> enable = Optional.empty();
 
        private Optional<? extends SyncSchedule> schedule = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The company name defined in the accounting software.
         */
        public Builder accountingSoftwareCompanyName(String accountingSoftwareCompanyName) {
            Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
            this.accountingSoftwareCompanyName = Optional.ofNullable(accountingSoftwareCompanyName);
            return this;
        }

        /**
         * The company name defined in the accounting software.
         */
        public Builder accountingSoftwareCompanyName(Optional<String> accountingSoftwareCompanyName) {
            Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
            this.accountingSoftwareCompanyName = accountingSoftwareCompanyName;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(Object companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(Optional<? extends Object> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        public Builder configuration(CommerceConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        public Builder configuration(Optional<? extends CommerceConfiguration> configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        /**
         * True if Sync for Commerce has been configured for the company.
         */
        public Builder configured(boolean configured) {
            Utils.checkNotNull(configured, "configured");
            this.configured = Optional.ofNullable(configured);
            return this;
        }

        /**
         * True if Sync for Commerce has been configured for the company.
         */
        public Builder configured(Optional<Boolean> configured) {
            Utils.checkNotNull(configured, "configured");
            this.configured = configured;
            return this;
        }

        /**
         * True if Sync for Commerce is enabled for the company.
         */
        public Builder enable(boolean enable) {
            Utils.checkNotNull(enable, "enable");
            this.enable = Optional.ofNullable(enable);
            return this;
        }

        /**
         * True if Sync for Commerce is enabled for the company.
         */
        public Builder enable(Optional<Boolean> enable) {
            Utils.checkNotNull(enable, "enable");
            this.enable = enable;
            return this;
        }

        public Builder schedule(SyncSchedule schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = Optional.ofNullable(schedule);
            return this;
        }

        public Builder schedule(Optional<? extends SyncSchedule> schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = schedule;
            return this;
        }
        
        public Configuration build() {
            return new Configuration(
                accountingSoftwareCompanyName,
                companyId,
                configuration,
                configured,
                enable,
                schedule);
        }
    }
}

