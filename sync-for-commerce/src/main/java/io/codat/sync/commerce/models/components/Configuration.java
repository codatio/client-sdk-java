/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class Configuration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fees")
    private Optional<? extends Fees> fees;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newPayments")
    private Optional<? extends NewPayments> newPayments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payments")
    private Optional<? extends Payments> payments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sales")
    private Optional<? extends Sales> sales;

    public Configuration(
            @JsonProperty("fees") Optional<? extends Fees> fees,
            @JsonProperty("newPayments") Optional<? extends NewPayments> newPayments,
            @JsonProperty("payments") Optional<? extends Payments> payments,
            @JsonProperty("sales") Optional<? extends Sales> sales) {
        Utils.checkNotNull(fees, "fees");
        Utils.checkNotNull(newPayments, "newPayments");
        Utils.checkNotNull(payments, "payments");
        Utils.checkNotNull(sales, "sales");
        this.fees = fees;
        this.newPayments = newPayments;
        this.payments = payments;
        this.sales = sales;
    }

    public Optional<? extends Fees> fees() {
        return fees;
    }

    public Optional<? extends NewPayments> newPayments() {
        return newPayments;
    }

    public Optional<? extends Payments> payments() {
        return payments;
    }

    public Optional<? extends Sales> sales() {
        return sales;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public Configuration withFees(Fees fees) {
        Utils.checkNotNull(fees, "fees");
        this.fees = Optional.ofNullable(fees);
        return this;
    }
    
    public Configuration withFees(Optional<? extends Fees> fees) {
        Utils.checkNotNull(fees, "fees");
        this.fees = fees;
        return this;
    }

    public Configuration withNewPayments(NewPayments newPayments) {
        Utils.checkNotNull(newPayments, "newPayments");
        this.newPayments = Optional.ofNullable(newPayments);
        return this;
    }
    
    public Configuration withNewPayments(Optional<? extends NewPayments> newPayments) {
        Utils.checkNotNull(newPayments, "newPayments");
        this.newPayments = newPayments;
        return this;
    }

    public Configuration withPayments(Payments payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = Optional.ofNullable(payments);
        return this;
    }
    
    public Configuration withPayments(Optional<? extends Payments> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = payments;
        return this;
    }

    public Configuration withSales(Sales sales) {
        Utils.checkNotNull(sales, "sales");
        this.sales = Optional.ofNullable(sales);
        return this;
    }
    
    public Configuration withSales(Optional<? extends Sales> sales) {
        Utils.checkNotNull(sales, "sales");
        this.sales = sales;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Configuration other = (Configuration) o;
        return 
            java.util.Objects.deepEquals(this.fees, other.fees) &&
            java.util.Objects.deepEquals(this.newPayments, other.newPayments) &&
            java.util.Objects.deepEquals(this.payments, other.payments) &&
            java.util.Objects.deepEquals(this.sales, other.sales);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            fees,
            newPayments,
            payments,
            sales);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Configuration.class,
                "fees", fees,
                "newPayments", newPayments,
                "payments", payments,
                "sales", sales);
    }
    
    public final static class Builder {
 
        private Optional<? extends Fees> fees = Optional.empty();
 
        private Optional<? extends NewPayments> newPayments = Optional.empty();
 
        private Optional<? extends Payments> payments = Optional.empty();
 
        private Optional<? extends Sales> sales = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder fees(Fees fees) {
            Utils.checkNotNull(fees, "fees");
            this.fees = Optional.ofNullable(fees);
            return this;
        }
        
        public Builder fees(Optional<? extends Fees> fees) {
            Utils.checkNotNull(fees, "fees");
            this.fees = fees;
            return this;
        }

        public Builder newPayments(NewPayments newPayments) {
            Utils.checkNotNull(newPayments, "newPayments");
            this.newPayments = Optional.ofNullable(newPayments);
            return this;
        }
        
        public Builder newPayments(Optional<? extends NewPayments> newPayments) {
            Utils.checkNotNull(newPayments, "newPayments");
            this.newPayments = newPayments;
            return this;
        }

        public Builder payments(Payments payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = Optional.ofNullable(payments);
            return this;
        }
        
        public Builder payments(Optional<? extends Payments> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = payments;
            return this;
        }

        public Builder sales(Sales sales) {
            Utils.checkNotNull(sales, "sales");
            this.sales = Optional.ofNullable(sales);
            return this;
        }
        
        public Builder sales(Optional<? extends Sales> sales) {
            Utils.checkNotNull(sales, "sales");
            this.sales = sales;
            return this;
        }
        
        public Configuration build() {
            return new Configuration(
                fees,
                newPayments,
                payments,
                sales);
        }
    }
}

