/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class HalRef {

    /**
     * Uri hypertext reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("href")
    private Optional<String> href;

    @JsonCreator
    public HalRef(
            @JsonProperty("href") Optional<String> href) {
        Utils.checkNotNull(href, "href");
        this.href = href;
    }
    
    public HalRef() {
        this(Optional.empty());
    }

    /**
     * Uri hypertext reference.
     */
    @JsonIgnore
    public Optional<String> href() {
        return href;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Uri hypertext reference.
     */
    public HalRef withHref(String href) {
        Utils.checkNotNull(href, "href");
        this.href = Optional.ofNullable(href);
        return this;
    }

    /**
     * Uri hypertext reference.
     */
    public HalRef withHref(Optional<String> href) {
        Utils.checkNotNull(href, "href");
        this.href = href;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HalRef other = (HalRef) o;
        return 
            Objects.deepEquals(this.href, other.href);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            href);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HalRef.class,
                "href", href);
    }
    
    public final static class Builder {
 
        private Optional<String> href = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Uri hypertext reference.
         */
        public Builder href(String href) {
            Utils.checkNotNull(href, "href");
            this.href = Optional.ofNullable(href);
            return this;
        }

        /**
         * Uri hypertext reference.
         */
        public Builder href(Optional<String> href) {
            Utils.checkNotNull(href, "href");
            this.href = href;
            return this;
        }
        
        public HalRef build() {
            return new HalRef(
                href);
        }
    }
}

