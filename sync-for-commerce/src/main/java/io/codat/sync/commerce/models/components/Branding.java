/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class Branding {

    /**
     * Button branding references.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("button")
    private Optional<? extends BrandingButton> button;

    /**
     * Logo branding references.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo")
    private Optional<? extends BrandingLogo> logo;

    /**
     * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceId")
    private Optional<String> sourceId;

    @JsonCreator
    public Branding(
            @JsonProperty("button") Optional<? extends BrandingButton> button,
            @JsonProperty("logo") Optional<? extends BrandingLogo> logo,
            @JsonProperty("sourceId") Optional<String> sourceId) {
        Utils.checkNotNull(button, "button");
        Utils.checkNotNull(logo, "logo");
        Utils.checkNotNull(sourceId, "sourceId");
        this.button = button;
        this.logo = logo;
        this.sourceId = sourceId;
    }
    
    public Branding() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Button branding references.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BrandingButton> button() {
        return (Optional<BrandingButton>) button;
    }

    /**
     * Logo branding references.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BrandingLogo> logo() {
        return (Optional<BrandingLogo>) logo;
    }

    /**
     * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
     */
    @JsonIgnore
    public Optional<String> sourceId() {
        return sourceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Button branding references.
     */
    public Branding withButton(BrandingButton button) {
        Utils.checkNotNull(button, "button");
        this.button = Optional.ofNullable(button);
        return this;
    }

    /**
     * Button branding references.
     */
    public Branding withButton(Optional<? extends BrandingButton> button) {
        Utils.checkNotNull(button, "button");
        this.button = button;
        return this;
    }

    /**
     * Logo branding references.
     */
    public Branding withLogo(BrandingLogo logo) {
        Utils.checkNotNull(logo, "logo");
        this.logo = Optional.ofNullable(logo);
        return this;
    }

    /**
     * Logo branding references.
     */
    public Branding withLogo(Optional<? extends BrandingLogo> logo) {
        Utils.checkNotNull(logo, "logo");
        this.logo = logo;
        return this;
    }

    /**
     * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
     */
    public Branding withSourceId(String sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = Optional.ofNullable(sourceId);
        return this;
    }

    /**
     * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
     */
    public Branding withSourceId(Optional<String> sourceId) {
        Utils.checkNotNull(sourceId, "sourceId");
        this.sourceId = sourceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Branding other = (Branding) o;
        return 
            Objects.deepEquals(this.button, other.button) &&
            Objects.deepEquals(this.logo, other.logo) &&
            Objects.deepEquals(this.sourceId, other.sourceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            button,
            logo,
            sourceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Branding.class,
                "button", button,
                "logo", logo,
                "sourceId", sourceId);
    }
    
    public final static class Builder {
 
        private Optional<? extends BrandingButton> button = Optional.empty();
 
        private Optional<? extends BrandingLogo> logo = Optional.empty();
 
        private Optional<String> sourceId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Button branding references.
         */
        public Builder button(BrandingButton button) {
            Utils.checkNotNull(button, "button");
            this.button = Optional.ofNullable(button);
            return this;
        }

        /**
         * Button branding references.
         */
        public Builder button(Optional<? extends BrandingButton> button) {
            Utils.checkNotNull(button, "button");
            this.button = button;
            return this;
        }

        /**
         * Logo branding references.
         */
        public Builder logo(BrandingLogo logo) {
            Utils.checkNotNull(logo, "logo");
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        /**
         * Logo branding references.
         */
        public Builder logo(Optional<? extends BrandingLogo> logo) {
            Utils.checkNotNull(logo, "logo");
            this.logo = logo;
            return this;
        }

        /**
         * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
         */
        public Builder sourceId(String sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = Optional.ofNullable(sourceId);
            return this;
        }

        /**
         * A source-specific ID used to distinguish between different sources originating from the same data connection. In general, a data connection is a single data source. However, for TrueLayer, `sourceId` is associated with a specific bank and has a many-to-one relationship with the `integrationId`.
         */
        public Builder sourceId(Optional<String> sourceId) {
            Utils.checkNotNull(sourceId, "sourceId");
            this.sourceId = sourceId;
            return this;
        }
        
        public Branding build() {
            return new Branding(
                button,
                logo,
                sourceId);
        }
    }
}

