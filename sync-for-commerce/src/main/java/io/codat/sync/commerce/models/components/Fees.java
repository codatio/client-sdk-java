/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Fees {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts")
    private JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feesSupplier")
    private Optional<? extends FeesSupplier> feesSupplier;

    /**
     * Boolean indicator to enable syncing fees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncFees")
    private Optional<? extends Boolean> syncFees;

    public Fees(
            @JsonProperty("accounts") JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts,
            @JsonProperty("feesSupplier") Optional<? extends FeesSupplier> feesSupplier,
            @JsonProperty("syncFees") Optional<? extends Boolean> syncFees) {
        Utils.checkNotNull(accounts, "accounts");
        Utils.checkNotNull(feesSupplier, "feesSupplier");
        Utils.checkNotNull(syncFees, "syncFees");
        this.accounts = accounts;
        this.feesSupplier = feesSupplier;
        this.syncFees = syncFees;
    }

    public JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts() {
        return accounts;
    }

    public Optional<? extends FeesSupplier> feesSupplier() {
        return feesSupplier;
    }

    /**
     * Boolean indicator to enable syncing fees.
     */
    public Optional<? extends Boolean> syncFees() {
        return syncFees;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public Fees withAccounts(java.util.Map<String, ConfigAccount> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = JsonNullable.of(accounts);
        return this;
    }

    public Fees withAccounts(JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = accounts;
        return this;
    }

    public Fees withFeesSupplier(FeesSupplier feesSupplier) {
        Utils.checkNotNull(feesSupplier, "feesSupplier");
        this.feesSupplier = Optional.ofNullable(feesSupplier);
        return this;
    }
    
    public Fees withFeesSupplier(Optional<? extends FeesSupplier> feesSupplier) {
        Utils.checkNotNull(feesSupplier, "feesSupplier");
        this.feesSupplier = feesSupplier;
        return this;
    }

    /**
     * Boolean indicator to enable syncing fees.
     */
    public Fees withSyncFees(boolean syncFees) {
        Utils.checkNotNull(syncFees, "syncFees");
        this.syncFees = Optional.ofNullable(syncFees);
        return this;
    }
    
    /**
     * Boolean indicator to enable syncing fees.
     */
    public Fees withSyncFees(Optional<? extends Boolean> syncFees) {
        Utils.checkNotNull(syncFees, "syncFees");
        this.syncFees = syncFees;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Fees other = (Fees) o;
        return 
            java.util.Objects.deepEquals(this.accounts, other.accounts) &&
            java.util.Objects.deepEquals(this.feesSupplier, other.feesSupplier) &&
            java.util.Objects.deepEquals(this.syncFees, other.syncFees);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accounts,
            feesSupplier,
            syncFees);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Fees.class,
                "accounts", accounts,
                "feesSupplier", feesSupplier,
                "syncFees", syncFees);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts = JsonNullable.undefined();
 
        private Optional<? extends FeesSupplier> feesSupplier = Optional.empty();
 
        private Optional<? extends Boolean> syncFees = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accounts(java.util.Map<String, ConfigAccount> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = JsonNullable.of(accounts);
            return this;
        }

        public Builder accounts(JsonNullable<? extends java.util.Map<String, ConfigAccount>> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = accounts;
            return this;
        }

        public Builder feesSupplier(FeesSupplier feesSupplier) {
            Utils.checkNotNull(feesSupplier, "feesSupplier");
            this.feesSupplier = Optional.ofNullable(feesSupplier);
            return this;
        }
        
        public Builder feesSupplier(Optional<? extends FeesSupplier> feesSupplier) {
            Utils.checkNotNull(feesSupplier, "feesSupplier");
            this.feesSupplier = feesSupplier;
            return this;
        }

        /**
         * Boolean indicator to enable syncing fees.
         */
        public Builder syncFees(boolean syncFees) {
            Utils.checkNotNull(syncFees, "syncFees");
            this.syncFees = Optional.ofNullable(syncFees);
            return this;
        }
        
        /**
         * Boolean indicator to enable syncing fees.
         */
        public Builder syncFees(Optional<? extends Boolean> syncFees) {
            Utils.checkNotNull(syncFees, "syncFees");
            this.syncFees = syncFees;
            return this;
        }
        
        public Fees build() {
            return new Fees(
                accounts,
                feesSupplier,
                syncFees);
        }
    }
}

