/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * CompanyReferenceLinks - A collection of links for the company.
 */

public class CompanyReferenceLinks {

    /**
     * Link to the company page in the portal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portal")
    private Optional<String> portal;

    @JsonCreator
    public CompanyReferenceLinks(
            @JsonProperty("portal") Optional<String> portal) {
        Utils.checkNotNull(portal, "portal");
        this.portal = portal;
    }
    
    public CompanyReferenceLinks() {
        this(Optional.empty());
    }

    /**
     * Link to the company page in the portal.
     */
    @JsonIgnore
    public Optional<String> portal() {
        return portal;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Link to the company page in the portal.
     */
    public CompanyReferenceLinks withPortal(String portal) {
        Utils.checkNotNull(portal, "portal");
        this.portal = Optional.ofNullable(portal);
        return this;
    }

    /**
     * Link to the company page in the portal.
     */
    public CompanyReferenceLinks withPortal(Optional<String> portal) {
        Utils.checkNotNull(portal, "portal");
        this.portal = portal;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyReferenceLinks other = (CompanyReferenceLinks) o;
        return 
            Objects.deepEquals(this.portal, other.portal);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            portal);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyReferenceLinks.class,
                "portal", portal);
    }
    
    public final static class Builder {
 
        private Optional<String> portal = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Link to the company page in the portal.
         */
        public Builder portal(String portal) {
            Utils.checkNotNull(portal, "portal");
            this.portal = Optional.ofNullable(portal);
            return this;
        }

        /**
         * Link to the company page in the portal.
         */
        public Builder portal(Optional<String> portal) {
            Utils.checkNotNull(portal, "portal");
            this.portal = portal;
            return this;
        }
        
        public CompanyReferenceLinks build() {
            return new CompanyReferenceLinks(
                portal);
        }
    }
}

