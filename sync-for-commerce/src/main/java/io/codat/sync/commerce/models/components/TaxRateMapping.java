/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.commerce.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.commerce.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class TaxRateMapping {

    /**
     * Selected tax rate id from the list of tax rates on the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedAccountingTaxRateId")
    private JsonNullable<String> selectedAccountingTaxRateId;

    /**
     * Selected tax component id from the list of tax components on the commerce software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedCommerceTaxRateIds")
    private JsonNullable<? extends List<String>> selectedCommerceTaxRateIds;

    @JsonCreator
    public TaxRateMapping(
            @JsonProperty("selectedAccountingTaxRateId") JsonNullable<String> selectedAccountingTaxRateId,
            @JsonProperty("selectedCommerceTaxRateIds") JsonNullable<? extends List<String>> selectedCommerceTaxRateIds) {
        Utils.checkNotNull(selectedAccountingTaxRateId, "selectedAccountingTaxRateId");
        Utils.checkNotNull(selectedCommerceTaxRateIds, "selectedCommerceTaxRateIds");
        this.selectedAccountingTaxRateId = selectedAccountingTaxRateId;
        this.selectedCommerceTaxRateIds = selectedCommerceTaxRateIds;
    }
    
    public TaxRateMapping() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Selected tax rate id from the list of tax rates on the accounting software.
     */
    @JsonIgnore
    public JsonNullable<String> selectedAccountingTaxRateId() {
        return selectedAccountingTaxRateId;
    }

    /**
     * Selected tax component id from the list of tax components on the commerce software.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> selectedCommerceTaxRateIds() {
        return (JsonNullable<List<String>>) selectedCommerceTaxRateIds;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Selected tax rate id from the list of tax rates on the accounting software.
     */
    public TaxRateMapping withSelectedAccountingTaxRateId(String selectedAccountingTaxRateId) {
        Utils.checkNotNull(selectedAccountingTaxRateId, "selectedAccountingTaxRateId");
        this.selectedAccountingTaxRateId = JsonNullable.of(selectedAccountingTaxRateId);
        return this;
    }

    /**
     * Selected tax rate id from the list of tax rates on the accounting software.
     */
    public TaxRateMapping withSelectedAccountingTaxRateId(JsonNullable<String> selectedAccountingTaxRateId) {
        Utils.checkNotNull(selectedAccountingTaxRateId, "selectedAccountingTaxRateId");
        this.selectedAccountingTaxRateId = selectedAccountingTaxRateId;
        return this;
    }

    /**
     * Selected tax component id from the list of tax components on the commerce software.
     */
    public TaxRateMapping withSelectedCommerceTaxRateIds(List<String> selectedCommerceTaxRateIds) {
        Utils.checkNotNull(selectedCommerceTaxRateIds, "selectedCommerceTaxRateIds");
        this.selectedCommerceTaxRateIds = JsonNullable.of(selectedCommerceTaxRateIds);
        return this;
    }

    /**
     * Selected tax component id from the list of tax components on the commerce software.
     */
    public TaxRateMapping withSelectedCommerceTaxRateIds(JsonNullable<? extends List<String>> selectedCommerceTaxRateIds) {
        Utils.checkNotNull(selectedCommerceTaxRateIds, "selectedCommerceTaxRateIds");
        this.selectedCommerceTaxRateIds = selectedCommerceTaxRateIds;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxRateMapping other = (TaxRateMapping) o;
        return 
            Objects.deepEquals(this.selectedAccountingTaxRateId, other.selectedAccountingTaxRateId) &&
            Objects.deepEquals(this.selectedCommerceTaxRateIds, other.selectedCommerceTaxRateIds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            selectedAccountingTaxRateId,
            selectedCommerceTaxRateIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxRateMapping.class,
                "selectedAccountingTaxRateId", selectedAccountingTaxRateId,
                "selectedCommerceTaxRateIds", selectedCommerceTaxRateIds);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> selectedAccountingTaxRateId = JsonNullable.undefined();
 
        private JsonNullable<? extends List<String>> selectedCommerceTaxRateIds = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Selected tax rate id from the list of tax rates on the accounting software.
         */
        public Builder selectedAccountingTaxRateId(String selectedAccountingTaxRateId) {
            Utils.checkNotNull(selectedAccountingTaxRateId, "selectedAccountingTaxRateId");
            this.selectedAccountingTaxRateId = JsonNullable.of(selectedAccountingTaxRateId);
            return this;
        }

        /**
         * Selected tax rate id from the list of tax rates on the accounting software.
         */
        public Builder selectedAccountingTaxRateId(JsonNullable<String> selectedAccountingTaxRateId) {
            Utils.checkNotNull(selectedAccountingTaxRateId, "selectedAccountingTaxRateId");
            this.selectedAccountingTaxRateId = selectedAccountingTaxRateId;
            return this;
        }

        /**
         * Selected tax component id from the list of tax components on the commerce software.
         */
        public Builder selectedCommerceTaxRateIds(List<String> selectedCommerceTaxRateIds) {
            Utils.checkNotNull(selectedCommerceTaxRateIds, "selectedCommerceTaxRateIds");
            this.selectedCommerceTaxRateIds = JsonNullable.of(selectedCommerceTaxRateIds);
            return this;
        }

        /**
         * Selected tax component id from the list of tax components on the commerce software.
         */
        public Builder selectedCommerceTaxRateIds(JsonNullable<? extends List<String>> selectedCommerceTaxRateIds) {
            Utils.checkNotNull(selectedCommerceTaxRateIds, "selectedCommerceTaxRateIds");
            this.selectedCommerceTaxRateIds = selectedCommerceTaxRateIds;
            return this;
        }
        
        public TaxRateMapping build() {
            return new TaxRateMapping(
                selectedAccountingTaxRateId,
                selectedCommerceTaxRateIds);
        }
    }
}

