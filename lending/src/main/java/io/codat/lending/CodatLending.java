/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending;

import io.codat.lending.models.operations.SDKMethodInterfaces.*;
import io.codat.lending.utils.HTTPClient;
import io.codat.lending.utils.RetryConfig;
import io.codat.lending.utils.SpeakeasyHTTPClient;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

/**
 * Lending API: Our Lending API helps you make smarter credit decisions on small businesses by enabling you to pull your customers' latest data from accounting, banking, and commerce software they are already using. It also includes features to help providers verify the accuracy of data and process it more efficiently.
 * 
 * The Lending API is built on top of the latest accounting, commerce, and banking data, providing you with the most important data points you need to get a full picture of SMB creditworthiness and make a comprehensive assessment of your customers.
 * 
 * [Explore product](https://docs.codat.io/lending/overview) | [See OpenAPI spec](https://github.com/codatio/oas)
 * 
 * &lt;!-- Start Codat Tags Table --&gt;
 * ## Endpoints
 * 
 * | Endpoints | Description |
 * | :- |:- |
 * | Companies | Create and manage your SMB users' companies. |
 * | Connections | Create new and manage existing data connections for a company. |
 * | Bank statements | Retrieve banking data from linked bank accounts. |
 * | Sales | Retrieve standardized sales data from a linked commerce software. |
 * | Financial statements | Financial data and reports from a linked accounting software. |
 * | Liabilities | Debt and other liabilities. |
 * | Accounts payable | Data from a linked accounting software representing money the business owes money to its suppliers. |
 * | Accounts receivable | Data from a linked accounting software representing money owed to the business for sold goods or services. |
 * | Transactions | Data from a linked accounting software representing transactions. |
 * | Company info | View company information fetched from the source platform. |
 * | Data integrity | Match mutable accounting data with immutable banking data to increase confidence in financial data. |
 * | Excel reports | Download reports in Excel format. |
 * | Manage data | Control how data is retrieved from an integration. |
 * | File upload | Endpoints to manage uploaded files. |
 * | Loan writeback | Implement the [loan writeback](https://docs.codat.io/lending/guides/loan-writeback/introduction) procedure in your lending process to maintain an accurate position of a loan during the entire lending cycle. |
 * &lt;!-- End Codat Tags Table --&gt;
 */
public class CodatLending {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * Production
         */
        "https://api.codat.io",
    };

    /**
     * Create and manage your SMB users' companies.
     */
    private final Companies companies;

    /**
     * Create new and manage existing data connections for a company.
     */
    private final Connections connections;

    /**
     * Retrieve banking data from linked bank accounts.
     */
    private final BankStatements bankStatements;

    private final Transactions transactions;

    /**
     * Access bank transactions from an accounting software.
     */
    private final CodatLendingAccountingBankData accountingBankData;

    private final Banking banking;

    private final AccountsPayable accountsPayable;

    private final Sales sales;

    /**
     * View company information fetched from the source platform.
     */
    private final CompanyInfo companyInfo;

    private final AccountsReceivable accountsReceivable;

    /**
     * Endpoints to manage uploaded files.
     */
    private final FileUpload fileUpload;

    private final LoanWriteback loanWriteback;

    private final FinancialStatements financialStatements;

    private final ManageData manageData;

    /**
     * Debt and other liabilities.
     */
    private final Liabilities liabilities;

    /**
     * Match mutable accounting data with immutable banking data to increase confidence in financial data.
     */
    private final DataIntegrity dataIntegrity;

    /**
     * Download reports in Excel format.
     */
    private final ExcelReports excelReports;

    /**
     * Create and manage your SMB users' companies.
     */
    public Companies companies() {
        return companies;
    }

    /**
     * Create new and manage existing data connections for a company.
     */
    public Connections connections() {
        return connections;
    }

    /**
     * Retrieve banking data from linked bank accounts.
     */
    public BankStatements bankStatements() {
        return bankStatements;
    }

    public Transactions transactions() {
        return transactions;
    }

    /**
     * Access bank transactions from an accounting software.
     */
    public CodatLendingAccountingBankData accountingBankData() {
        return accountingBankData;
    }

    public Banking banking() {
        return banking;
    }

    public AccountsPayable accountsPayable() {
        return accountsPayable;
    }

    public Sales sales() {
        return sales;
    }

    /**
     * View company information fetched from the source platform.
     */
    public CompanyInfo companyInfo() {
        return companyInfo;
    }

    public AccountsReceivable accountsReceivable() {
        return accountsReceivable;
    }

    /**
     * Endpoints to manage uploaded files.
     */
    public FileUpload fileUpload() {
        return fileUpload;
    }

    public LoanWriteback loanWriteback() {
        return loanWriteback;
    }

    public FinancialStatements financialStatements() {
        return financialStatements;
    }

    public ManageData manageData() {
        return manageData;
    }

    /**
     * Debt and other liabilities.
     */
    public Liabilities liabilities() {
        return liabilities;
    }

    /**
     * Match mutable accounting data with immutable banking data to increase confidence in financial data.
     */
    public DataIntegrity dataIntegrity() {
        return dataIntegrity;
    }

    /**
     * Download reports in Excel format.
     */
    public ExcelReports excelReports() {
        return excelReports;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests.
         * @return The builder instance.
         */
        public Builder security(io.codat.lending.models.shared.Security security) {
            this.sdkConfiguration.securitySource = SecuritySource.of(security);
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.sdkConfiguration.serverUrl = io.codat.lending.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        // Visible for testing, will be accessed via reflection
        void _hooks(io.codat.lending.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);    
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public CodatLending build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new CodatLending(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private CodatLending(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.companies = new Companies(sdkConfiguration);
        this.connections = new Connections(sdkConfiguration);
        this.bankStatements = new BankStatements(sdkConfiguration);
        this.transactions = new Transactions(sdkConfiguration);
        this.accountingBankData = new CodatLendingAccountingBankData(sdkConfiguration);
        this.banking = new Banking(sdkConfiguration);
        this.accountsPayable = new AccountsPayable(sdkConfiguration);
        this.sales = new Sales(sdkConfiguration);
        this.companyInfo = new CompanyInfo(sdkConfiguration);
        this.accountsReceivable = new AccountsReceivable(sdkConfiguration);
        this.fileUpload = new FileUpload(sdkConfiguration);
        this.loanWriteback = new LoanWriteback(sdkConfiguration);
        this.financialStatements = new FinancialStatements(sdkConfiguration);
        this.manageData = new ManageData(sdkConfiguration);
        this.liabilities = new Liabilities(sdkConfiguration);
        this.dataIntegrity = new DataIntegrity(sdkConfiguration);
        this.excelReports = new ExcelReports(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
