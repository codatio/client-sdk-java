/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending;

import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.lending.models.errors.ErrorMessage;
import io.codat.lending.models.errors.SDKError;
import io.codat.lending.models.operations.GetCommerceCustomerRetentionMetricsRequest;
import io.codat.lending.models.operations.GetCommerceCustomerRetentionMetricsRequestBuilder;
import io.codat.lending.models.operations.GetCommerceCustomerRetentionMetricsResponse;
import io.codat.lending.models.operations.GetCommerceLifetimeValueMetricsRequest;
import io.codat.lending.models.operations.GetCommerceLifetimeValueMetricsRequestBuilder;
import io.codat.lending.models.operations.GetCommerceLifetimeValueMetricsResponse;
import io.codat.lending.models.operations.GetCommerceRevenueMetricsRequest;
import io.codat.lending.models.operations.GetCommerceRevenueMetricsRequestBuilder;
import io.codat.lending.models.operations.GetCommerceRevenueMetricsResponse;
import io.codat.lending.models.operations.SDKMethodInterfaces.*;
import io.codat.lending.models.shared.CommerceReport;
import io.codat.lending.utils.BackoffStrategy;
import io.codat.lending.utils.HTTPClient;
import io.codat.lending.utils.HTTPRequest;
import io.codat.lending.utils.Hook.AfterErrorContextImpl;
import io.codat.lending.utils.Hook.AfterSuccessContextImpl;
import io.codat.lending.utils.Hook.BeforeRequestContextImpl;
import io.codat.lending.utils.Options;
import io.codat.lending.utils.Retries.NonRetryableException;
import io.codat.lending.utils.Retries;
import io.codat.lending.utils.RetryConfig;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit; 

public class Metrics implements
            MethodCallGetCommerceCustomerRetentionMetrics,
            MethodCallGetCommerceLifetimeValueMetrics,
            MethodCallGetCommerceRevenueMetrics {

    private final SDKConfiguration sdkConfiguration;

    Metrics(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get customer retention metrics
     * The *Get customer retention metrics* endpoint returns customer retention insights for a specific company's commerce connection over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company. 
     * 
     * #### Customer retention metrics
     * 
     * - __Existing customers__: the number of unique customers that have placed an order(s) in the specified period and any previous period. 
     * - __New customers__: the number of unique customers that have placed an order(s) in the specified period and none in any previous period.
     * - __Total customers__: the total number of existing and new customers within the specified period.
     * - __Retention rate__: the ratio of existing customers within the specified period compared to the total customers at the end of the previous period represented as a percentage.
     * - __Repeat rate__: the ratio of existing customers to total customers over the specified period represented as a percentage.
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate customer retention metrics.
     * 
     * #### Response structure
     * 
     * The Customer retention report's dimensions and measures are:
     * 
     * | Index                       | Dimensions                 |
     * |-----------------------------|----------------------------|
     * | `index` = 0                 | Period                     |
     * | `index` = 1                 | Customer retention metrics |
     * 
     * | Index                | Measures    |
     * |----------------------|------------|
     * | `index` = 0          | Count      |
     * | `index` = 1          | Percentage |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * @return The call builder
     */
    public GetCommerceCustomerRetentionMetricsRequestBuilder getCustomerRetention() {
        return new GetCommerceCustomerRetentionMetricsRequestBuilder(this);
    }

    /**
     * Get customer retention metrics
     * The *Get customer retention metrics* endpoint returns customer retention insights for a specific company's commerce connection over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company. 
     * 
     * #### Customer retention metrics
     * 
     * - __Existing customers__: the number of unique customers that have placed an order(s) in the specified period and any previous period. 
     * - __New customers__: the number of unique customers that have placed an order(s) in the specified period and none in any previous period.
     * - __Total customers__: the total number of existing and new customers within the specified period.
     * - __Retention rate__: the ratio of existing customers within the specified period compared to the total customers at the end of the previous period represented as a percentage.
     * - __Repeat rate__: the ratio of existing customers to total customers over the specified period represented as a percentage.
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate customer retention metrics.
     * 
     * #### Response structure
     * 
     * The Customer retention report's dimensions and measures are:
     * 
     * | Index                       | Dimensions                 |
     * |-----------------------------|----------------------------|
     * | `index` = 0                 | Period                     |
     * | `index` = 1                 | Customer retention metrics |
     * 
     * | Index                | Measures    |
     * |----------------------|------------|
     * | `index` = 0          | Count      |
     * | `index` = 1          | Percentage |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCommerceCustomerRetentionMetricsResponse getCustomerRetention(
            GetCommerceCustomerRetentionMetricsRequest request) throws Exception {
        return getCustomerRetention(request, Optional.empty());
    }
    
    /**
     * Get customer retention metrics
     * The *Get customer retention metrics* endpoint returns customer retention insights for a specific company's commerce connection over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company. 
     * 
     * #### Customer retention metrics
     * 
     * - __Existing customers__: the number of unique customers that have placed an order(s) in the specified period and any previous period. 
     * - __New customers__: the number of unique customers that have placed an order(s) in the specified period and none in any previous period.
     * - __Total customers__: the total number of existing and new customers within the specified period.
     * - __Retention rate__: the ratio of existing customers within the specified period compared to the total customers at the end of the previous period represented as a percentage.
     * - __Repeat rate__: the ratio of existing customers to total customers over the specified period represented as a percentage.
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate customer retention metrics.
     * 
     * #### Response structure
     * 
     * The Customer retention report's dimensions and measures are:
     * 
     * | Index                       | Dimensions                 |
     * |-----------------------------|----------------------------|
     * | `index` = 0                 | Period                     |
     * | `index` = 1                 | Customer retention metrics |
     * 
     * | Index                | Measures    |
     * |----------------------|------------|
     * | `index` = 0          | Count      |
     * | `index` = 1          | Percentage |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * @param request The request object containing all of the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCommerceCustomerRetentionMetricsResponse getCustomerRetention(
            GetCommerceCustomerRetentionMetricsRequest request,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetCommerceCustomerRetentionMetricsRequest.class,
                _baseUrl,
                "/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/customerRetention",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetCommerceCustomerRetentionMetricsRequest.class,
                request, 
                null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "get-commerce-customer-retention-metrics", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "get-commerce-customer-retention-metrics",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "get-commerce-customer-retention-metrics", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetCommerceCustomerRetentionMetricsResponse.Builder _resBuilder = 
            GetCommerceCustomerRetentionMetricsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetCommerceCustomerRetentionMetricsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CommerceReport _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CommerceReport>() {});
                _res.withCommerceReport(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "402", "403", "404", "429", "500", "503")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ErrorMessage _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ErrorMessage>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get lifetime value metrics
     * The *Get lifetime value metrics* endpoint returns the average revenue that a specific company will generate throughout its lifespan over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company.
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate the lifetime value metrics.
     * 
     * #### Response structure
     * 
     * The Lifetime value report's dimensions and measures are:
     * 
     * | Index         | Dimensions             |
     * |---------------|------------------------|
     * | `index` = 0   | Period                 |
     * | `index` = 1   | Lifetime value metrics |
     * 
     * | Index             | Measures |
     * |-------------------|---------|
     * |   `index` = 1     | Value   |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * 
     * @return The call builder
     */
    public GetCommerceLifetimeValueMetricsRequestBuilder getLifetimeValue() {
        return new GetCommerceLifetimeValueMetricsRequestBuilder(this);
    }

    /**
     * Get lifetime value metrics
     * The *Get lifetime value metrics* endpoint returns the average revenue that a specific company will generate throughout its lifespan over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company.
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate the lifetime value metrics.
     * 
     * #### Response structure
     * 
     * The Lifetime value report's dimensions and measures are:
     * 
     * | Index         | Dimensions             |
     * |---------------|------------------------|
     * | `index` = 0   | Period                 |
     * | `index` = 1   | Lifetime value metrics |
     * 
     * | Index             | Measures |
     * |-------------------|---------|
     * |   `index` = 1     | Value   |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCommerceLifetimeValueMetricsResponse getLifetimeValue(
            GetCommerceLifetimeValueMetricsRequest request) throws Exception {
        return getLifetimeValue(request, Optional.empty());
    }
    
    /**
     * Get lifetime value metrics
     * The *Get lifetime value metrics* endpoint returns the average revenue that a specific company will generate throughout its lifespan over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company.
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate the lifetime value metrics.
     * 
     * #### Response structure
     * 
     * The Lifetime value report's dimensions and measures are:
     * 
     * | Index         | Dimensions             |
     * |---------------|------------------------|
     * | `index` = 0   | Period                 |
     * | `index` = 1   | Lifetime value metrics |
     * 
     * | Index             | Measures |
     * |-------------------|---------|
     * |   `index` = 1     | Value   |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCommerceLifetimeValueMetricsResponse getLifetimeValue(
            GetCommerceLifetimeValueMetricsRequest request,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetCommerceLifetimeValueMetricsRequest.class,
                _baseUrl,
                "/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/lifetimeValue",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetCommerceLifetimeValueMetricsRequest.class,
                request, 
                null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "get-commerce-lifetime-value-metrics", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "get-commerce-lifetime-value-metrics",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "get-commerce-lifetime-value-metrics", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetCommerceLifetimeValueMetricsResponse.Builder _resBuilder = 
            GetCommerceLifetimeValueMetricsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetCommerceLifetimeValueMetricsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CommerceReport _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CommerceReport>() {});
                _res.withCommerceReport(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "402", "403", "404", "429", "500", "503")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ErrorMessage _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ErrorMessage>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get commerce revenue metrics
     * The *Get revenue report* endpoint returns the revenue and revenue growth for a specific company connection over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company. 
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate the revenue metrics.
     * 
     * #### Response structure
     * 
     * The Revenue report's dimensions and measures are:
     * 
     * | Index         | Dimensions |
     * |---------------|------------|
     * |   `index` = 0 | Period     |
     * |   `index` = 1 | Revenue    |
     * 
     * | Index         | Measures                                                                                                                 |
     * |---------------|--------------------------------------------------------------------------------------------------------------------------|
     * | `index` = 0   | Value                                                                                                                    |
     * | `index` = 1   | Percentage change, defined as the change between the current and previous periods' values and expressed as a percentage. |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * 
     * @return The call builder
     */
    public GetCommerceRevenueMetricsRequestBuilder getRevenue() {
        return new GetCommerceRevenueMetricsRequestBuilder(this);
    }

    /**
     * Get commerce revenue metrics
     * The *Get revenue report* endpoint returns the revenue and revenue growth for a specific company connection over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company. 
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate the revenue metrics.
     * 
     * #### Response structure
     * 
     * The Revenue report's dimensions and measures are:
     * 
     * | Index         | Dimensions |
     * |---------------|------------|
     * |   `index` = 0 | Period     |
     * |   `index` = 1 | Revenue    |
     * 
     * | Index         | Measures                                                                                                                 |
     * |---------------|--------------------------------------------------------------------------------------------------------------------------|
     * | `index` = 0   | Value                                                                                                                    |
     * | `index` = 1   | Percentage change, defined as the change between the current and previous periods' values and expressed as a percentage. |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCommerceRevenueMetricsResponse getRevenue(
            GetCommerceRevenueMetricsRequest request) throws Exception {
        return getRevenue(request, Optional.empty());
    }
    
    /**
     * Get commerce revenue metrics
     * The *Get revenue report* endpoint returns the revenue and revenue growth for a specific company connection over one or more periods of time.
     * 
     * This detail helps you assess a merchant's health and advise them on performance improvement strategies. It also provides you with key insights you need to assess the credit risk of a company. 
     * 
     * [Learn more](https://docs.codat.io/lending/features/sales-overview#metrics) about the formulas used to calculate the revenue metrics.
     * 
     * #### Response structure
     * 
     * The Revenue report's dimensions and measures are:
     * 
     * | Index         | Dimensions |
     * |---------------|------------|
     * |   `index` = 0 | Period     |
     * |   `index` = 1 | Revenue    |
     * 
     * | Index         | Measures                                                                                                                 |
     * |---------------|--------------------------------------------------------------------------------------------------------------------------|
     * | `index` = 0   | Value                                                                                                                    |
     * | `index` = 1   | Percentage change, defined as the change between the current and previous periods' values and expressed as a percentage. |
     * 
     * The report data then combines multiple reporting dimensions and measures and outputs the value of each combination.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @param options additional options
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCommerceRevenueMetricsResponse getRevenue(
            GetCommerceRevenueMetricsRequest request,
            Optional<Options> options) throws Exception {

        if (options.isPresent()) {
          options.get().validate(Arrays.asList(Options.Option.RETRY_CONFIG));
        }
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetCommerceRevenueMetricsRequest.class,
                _baseUrl,
                "/data/companies/{companyId}/connections/{connectionId}/assess/commerceMetrics/revenue",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetCommerceRevenueMetricsRequest.class,
                request, 
                null));

        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());

        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HTTPRequest _finalReq = _req;
        RetryConfig _retryConfig;
        if (options.isPresent() && options.get().retryConfig().isPresent()) {
            _retryConfig = options.get().retryConfig().get();
        } else if (this.sdkConfiguration.retryConfig.isPresent()) {
            _retryConfig = this.sdkConfiguration.retryConfig.get();
        } else {
            _retryConfig = RetryConfig.builder()
                .backoff(BackoffStrategy.builder()
                            .initialInterval(500, TimeUnit.MILLISECONDS)
                            .maxInterval(60000, TimeUnit.MILLISECONDS)
                            .baseFactor((double)(1.5))
                            .maxElapsedTime(3600000, TimeUnit.MILLISECONDS)
                            .retryConnectError(true)
                            .build())
                .build();
        }
        List<String> _statusCodes = new ArrayList<>();
        _statusCodes.add("408");
        _statusCodes.add("429");
        _statusCodes.add("5XX");
        Retries _retries = Retries.builder()
            .action(() -> {
                HttpRequest _r = null;
                try {
                    _r = sdkConfiguration.hooks()
                        .beforeRequest(
                            new BeforeRequestContextImpl(
                                "get-commerce-revenue-metrics", 
                                Optional.of(List.of()), 
                                sdkConfiguration.securitySource()),
                            _finalReq.build());
                } catch (Exception _e) {
                    throw new NonRetryableException(_e);
                }
                try {
                    return _client.send(_r);
                } catch (Exception _e) {
                    return sdkConfiguration.hooks()
                        .afterError(
                            new AfterErrorContextImpl(
                                "get-commerce-revenue-metrics",
                                 Optional.of(List.of()),
                                 sdkConfiguration.securitySource()), 
                            Optional.empty(),
                            Optional.of(_e));
                }
            })
            .retryConfig(_retryConfig)
            .statusCodes(_statusCodes)
            .build();
        HttpResponse<InputStream> _httpRes = sdkConfiguration.hooks()
                 .afterSuccess(
                     new AfterSuccessContextImpl(
                         "get-commerce-revenue-metrics", 
                         Optional.of(List.of()), 
                         sdkConfiguration.securitySource()),
                     _retries.run());
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetCommerceRevenueMetricsResponse.Builder _resBuilder = 
            GetCommerceRevenueMetricsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetCommerceRevenueMetricsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CommerceReport _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CommerceReport>() {});
                _res.withCommerceReport(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "400", "401", "402", "403", "404", "429", "500", "503")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ErrorMessage _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ErrorMessage>() {});
                throw _out;
            } else {
                throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX", "5XX")) {
            // no content 
            throw new SDKError(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new SDKError(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
