/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * CommerceCompanyInfo - In the Codat system, company profile includes standard commercial details about 
 * a linked company, such as their address, phone number, and company registration.
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&amp;dataType=companyInfo) for this data type.
 * 
 */

public class CommerceCompanyInfo {

    /**
     * The available and current cash balances for the company's accounts
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountBalances")
    private Optional<? extends List<AccountBalance>> accountBalances;

    /**
     * Addresses associated with the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<CommerceAddress>> addresses;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseCurrency")
    private Optional<String> baseCurrency;

    /**
     * Identifier or reference for the company in the commerce software
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commercePlatformRef")
    private Optional<String> commercePlatformRef;

    /**
     * The full legal name of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyLegalName")
    private Optional<String> companyLegalName;

    /**
     * The name of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyName")
    private Optional<String> companyName;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdDate")
    private Optional<String> createdDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<String> modifiedDate;

    /**
     * Phone numbers associated with the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumbers")
    private Optional<? extends List<PhoneNumber>> phoneNumbers;

    /**
     * The registration number of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationNumber")
    private Optional<String> registrationNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<String> sourceModifiedDate;

    /**
     * URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceUrls")
    private Optional<? extends Map<String, String>> sourceUrls;

    /**
     * Weblinks associated with the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webLinks")
    private Optional<? extends List<WebLink>> webLinks;

    @JsonCreator
    public CommerceCompanyInfo(
            @JsonProperty("accountBalances") Optional<? extends List<AccountBalance>> accountBalances,
            @JsonProperty("addresses") Optional<? extends List<CommerceAddress>> addresses,
            @JsonProperty("baseCurrency") Optional<String> baseCurrency,
            @JsonProperty("commercePlatformRef") Optional<String> commercePlatformRef,
            @JsonProperty("companyLegalName") Optional<String> companyLegalName,
            @JsonProperty("companyName") Optional<String> companyName,
            @JsonProperty("createdDate") Optional<String> createdDate,
            @JsonProperty("modifiedDate") Optional<String> modifiedDate,
            @JsonProperty("phoneNumbers") Optional<? extends List<PhoneNumber>> phoneNumbers,
            @JsonProperty("registrationNumber") Optional<String> registrationNumber,
            @JsonProperty("sourceModifiedDate") Optional<String> sourceModifiedDate,
            @JsonProperty("sourceUrls") Optional<? extends Map<String, String>> sourceUrls,
            @JsonProperty("webLinks") Optional<? extends List<WebLink>> webLinks) {
        Utils.checkNotNull(accountBalances, "accountBalances");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        Utils.checkNotNull(commercePlatformRef, "commercePlatformRef");
        Utils.checkNotNull(companyLegalName, "companyLegalName");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(sourceUrls, "sourceUrls");
        Utils.checkNotNull(webLinks, "webLinks");
        this.accountBalances = accountBalances;
        this.addresses = addresses;
        this.baseCurrency = baseCurrency;
        this.commercePlatformRef = commercePlatformRef;
        this.companyLegalName = companyLegalName;
        this.companyName = companyName;
        this.createdDate = createdDate;
        this.modifiedDate = modifiedDate;
        this.phoneNumbers = phoneNumbers;
        this.registrationNumber = registrationNumber;
        this.sourceModifiedDate = sourceModifiedDate;
        this.sourceUrls = sourceUrls;
        this.webLinks = webLinks;
    }
    
    public CommerceCompanyInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The available and current cash balances for the company's accounts
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountBalance>> accountBalances() {
        return (Optional<List<AccountBalance>>) accountBalances;
    }

    /**
     * Addresses associated with the company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceAddress>> addresses() {
        return (Optional<List<CommerceAddress>>) addresses;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonIgnore
    public Optional<String> baseCurrency() {
        return baseCurrency;
    }

    /**
     * Identifier or reference for the company in the commerce software
     */
    @JsonIgnore
    public Optional<String> commercePlatformRef() {
        return commercePlatformRef;
    }

    /**
     * The full legal name of the company
     */
    @JsonIgnore
    public Optional<String> companyLegalName() {
        return companyLegalName;
    }

    /**
     * The name of the company
     */
    @JsonIgnore
    public Optional<String> companyName() {
        return companyName;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> createdDate() {
        return createdDate;
    }

    @JsonIgnore
    public Optional<String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * Phone numbers associated with the company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PhoneNumber>> phoneNumbers() {
        return (Optional<List<PhoneNumber>>) phoneNumbers;
    }

    /**
     * The registration number of the company
     */
    @JsonIgnore
    public Optional<String> registrationNumber() {
        return registrationNumber;
    }

    @JsonIgnore
    public Optional<String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> sourceUrls() {
        return (Optional<Map<String, String>>) sourceUrls;
    }

    /**
     * Weblinks associated with the company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<WebLink>> webLinks() {
        return (Optional<List<WebLink>>) webLinks;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The available and current cash balances for the company's accounts
     */
    public CommerceCompanyInfo withAccountBalances(List<AccountBalance> accountBalances) {
        Utils.checkNotNull(accountBalances, "accountBalances");
        this.accountBalances = Optional.ofNullable(accountBalances);
        return this;
    }

    /**
     * The available and current cash balances for the company's accounts
     */
    public CommerceCompanyInfo withAccountBalances(Optional<? extends List<AccountBalance>> accountBalances) {
        Utils.checkNotNull(accountBalances, "accountBalances");
        this.accountBalances = accountBalances;
        return this;
    }

    /**
     * Addresses associated with the company
     */
    public CommerceCompanyInfo withAddresses(List<CommerceAddress> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    /**
     * Addresses associated with the company
     */
    public CommerceCompanyInfo withAddresses(Optional<? extends List<CommerceAddress>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public CommerceCompanyInfo withBaseCurrency(String baseCurrency) {
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        this.baseCurrency = Optional.ofNullable(baseCurrency);
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public CommerceCompanyInfo withBaseCurrency(Optional<String> baseCurrency) {
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        this.baseCurrency = baseCurrency;
        return this;
    }

    /**
     * Identifier or reference for the company in the commerce software
     */
    public CommerceCompanyInfo withCommercePlatformRef(String commercePlatformRef) {
        Utils.checkNotNull(commercePlatformRef, "commercePlatformRef");
        this.commercePlatformRef = Optional.ofNullable(commercePlatformRef);
        return this;
    }

    /**
     * Identifier or reference for the company in the commerce software
     */
    public CommerceCompanyInfo withCommercePlatformRef(Optional<String> commercePlatformRef) {
        Utils.checkNotNull(commercePlatformRef, "commercePlatformRef");
        this.commercePlatformRef = commercePlatformRef;
        return this;
    }

    /**
     * The full legal name of the company
     */
    public CommerceCompanyInfo withCompanyLegalName(String companyLegalName) {
        Utils.checkNotNull(companyLegalName, "companyLegalName");
        this.companyLegalName = Optional.ofNullable(companyLegalName);
        return this;
    }

    /**
     * The full legal name of the company
     */
    public CommerceCompanyInfo withCompanyLegalName(Optional<String> companyLegalName) {
        Utils.checkNotNull(companyLegalName, "companyLegalName");
        this.companyLegalName = companyLegalName;
        return this;
    }

    /**
     * The name of the company
     */
    public CommerceCompanyInfo withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = Optional.ofNullable(companyName);
        return this;
    }

    /**
     * The name of the company
     */
    public CommerceCompanyInfo withCompanyName(Optional<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public CommerceCompanyInfo withCreatedDate(String createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = Optional.ofNullable(createdDate);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public CommerceCompanyInfo withCreatedDate(Optional<String> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    public CommerceCompanyInfo withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }

    public CommerceCompanyInfo withModifiedDate(Optional<String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * Phone numbers associated with the company
     */
    public CommerceCompanyInfo withPhoneNumbers(List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    /**
     * Phone numbers associated with the company
     */
    public CommerceCompanyInfo withPhoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    /**
     * The registration number of the company
     */
    public CommerceCompanyInfo withRegistrationNumber(String registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = Optional.ofNullable(registrationNumber);
        return this;
    }

    /**
     * The registration number of the company
     */
    public CommerceCompanyInfo withRegistrationNumber(Optional<String> registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = registrationNumber;
        return this;
    }

    public CommerceCompanyInfo withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }

    public CommerceCompanyInfo withSourceModifiedDate(Optional<String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system
     */
    public CommerceCompanyInfo withSourceUrls(Map<String, String> sourceUrls) {
        Utils.checkNotNull(sourceUrls, "sourceUrls");
        this.sourceUrls = Optional.ofNullable(sourceUrls);
        return this;
    }

    /**
     * URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system
     */
    public CommerceCompanyInfo withSourceUrls(Optional<? extends Map<String, String>> sourceUrls) {
        Utils.checkNotNull(sourceUrls, "sourceUrls");
        this.sourceUrls = sourceUrls;
        return this;
    }

    /**
     * Weblinks associated with the company
     */
    public CommerceCompanyInfo withWebLinks(List<WebLink> webLinks) {
        Utils.checkNotNull(webLinks, "webLinks");
        this.webLinks = Optional.ofNullable(webLinks);
        return this;
    }

    /**
     * Weblinks associated with the company
     */
    public CommerceCompanyInfo withWebLinks(Optional<? extends List<WebLink>> webLinks) {
        Utils.checkNotNull(webLinks, "webLinks");
        this.webLinks = webLinks;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceCompanyInfo other = (CommerceCompanyInfo) o;
        return 
            Objects.deepEquals(this.accountBalances, other.accountBalances) &&
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.baseCurrency, other.baseCurrency) &&
            Objects.deepEquals(this.commercePlatformRef, other.commercePlatformRef) &&
            Objects.deepEquals(this.companyLegalName, other.companyLegalName) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.createdDate, other.createdDate) &&
            Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.registrationNumber, other.registrationNumber) &&
            Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            Objects.deepEquals(this.sourceUrls, other.sourceUrls) &&
            Objects.deepEquals(this.webLinks, other.webLinks);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountBalances,
            addresses,
            baseCurrency,
            commercePlatformRef,
            companyLegalName,
            companyName,
            createdDate,
            modifiedDate,
            phoneNumbers,
            registrationNumber,
            sourceModifiedDate,
            sourceUrls,
            webLinks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceCompanyInfo.class,
                "accountBalances", accountBalances,
                "addresses", addresses,
                "baseCurrency", baseCurrency,
                "commercePlatformRef", commercePlatformRef,
                "companyLegalName", companyLegalName,
                "companyName", companyName,
                "createdDate", createdDate,
                "modifiedDate", modifiedDate,
                "phoneNumbers", phoneNumbers,
                "registrationNumber", registrationNumber,
                "sourceModifiedDate", sourceModifiedDate,
                "sourceUrls", sourceUrls,
                "webLinks", webLinks);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AccountBalance>> accountBalances = Optional.empty();
 
        private Optional<? extends List<CommerceAddress>> addresses = Optional.empty();
 
        private Optional<String> baseCurrency = Optional.empty();
 
        private Optional<String> commercePlatformRef = Optional.empty();
 
        private Optional<String> companyLegalName = Optional.empty();
 
        private Optional<String> companyName = Optional.empty();
 
        private Optional<String> createdDate = Optional.empty();
 
        private Optional<String> modifiedDate = Optional.empty();
 
        private Optional<? extends List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<String> registrationNumber = Optional.empty();
 
        private Optional<String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends Map<String, String>> sourceUrls = Optional.empty();
 
        private Optional<? extends List<WebLink>> webLinks = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The available and current cash balances for the company's accounts
         */
        public Builder accountBalances(List<AccountBalance> accountBalances) {
            Utils.checkNotNull(accountBalances, "accountBalances");
            this.accountBalances = Optional.ofNullable(accountBalances);
            return this;
        }

        /**
         * The available and current cash balances for the company's accounts
         */
        public Builder accountBalances(Optional<? extends List<AccountBalance>> accountBalances) {
            Utils.checkNotNull(accountBalances, "accountBalances");
            this.accountBalances = accountBalances;
            return this;
        }

        /**
         * Addresses associated with the company
         */
        public Builder addresses(List<CommerceAddress> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        /**
         * Addresses associated with the company
         */
        public Builder addresses(Optional<? extends List<CommerceAddress>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder baseCurrency(String baseCurrency) {
            Utils.checkNotNull(baseCurrency, "baseCurrency");
            this.baseCurrency = Optional.ofNullable(baseCurrency);
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder baseCurrency(Optional<String> baseCurrency) {
            Utils.checkNotNull(baseCurrency, "baseCurrency");
            this.baseCurrency = baseCurrency;
            return this;
        }

        /**
         * Identifier or reference for the company in the commerce software
         */
        public Builder commercePlatformRef(String commercePlatformRef) {
            Utils.checkNotNull(commercePlatformRef, "commercePlatformRef");
            this.commercePlatformRef = Optional.ofNullable(commercePlatformRef);
            return this;
        }

        /**
         * Identifier or reference for the company in the commerce software
         */
        public Builder commercePlatformRef(Optional<String> commercePlatformRef) {
            Utils.checkNotNull(commercePlatformRef, "commercePlatformRef");
            this.commercePlatformRef = commercePlatformRef;
            return this;
        }

        /**
         * The full legal name of the company
         */
        public Builder companyLegalName(String companyLegalName) {
            Utils.checkNotNull(companyLegalName, "companyLegalName");
            this.companyLegalName = Optional.ofNullable(companyLegalName);
            return this;
        }

        /**
         * The full legal name of the company
         */
        public Builder companyLegalName(Optional<String> companyLegalName) {
            Utils.checkNotNull(companyLegalName, "companyLegalName");
            this.companyLegalName = companyLegalName;
            return this;
        }

        /**
         * The name of the company
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        /**
         * The name of the company
         */
        public Builder companyName(Optional<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder createdDate(String createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = Optional.ofNullable(createdDate);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder createdDate(Optional<String> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        public Builder modifiedDate(Optional<String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * Phone numbers associated with the company
         */
        public Builder phoneNumbers(List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        /**
         * Phone numbers associated with the company
         */
        public Builder phoneNumbers(Optional<? extends List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        /**
         * The registration number of the company
         */
        public Builder registrationNumber(String registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = Optional.ofNullable(registrationNumber);
            return this;
        }

        /**
         * The registration number of the company
         */
        public Builder registrationNumber(Optional<String> registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = registrationNumber;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(Optional<String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system
         */
        public Builder sourceUrls(Map<String, String> sourceUrls) {
            Utils.checkNotNull(sourceUrls, "sourceUrls");
            this.sourceUrls = Optional.ofNullable(sourceUrls);
            return this;
        }

        /**
         * URL addresses for the originating system. For example, potential use cases include 'deeplinking' to the originating system
         */
        public Builder sourceUrls(Optional<? extends Map<String, String>> sourceUrls) {
            Utils.checkNotNull(sourceUrls, "sourceUrls");
            this.sourceUrls = sourceUrls;
            return this;
        }

        /**
         * Weblinks associated with the company
         */
        public Builder webLinks(List<WebLink> webLinks) {
            Utils.checkNotNull(webLinks, "webLinks");
            this.webLinks = Optional.ofNullable(webLinks);
            return this;
        }

        /**
         * Weblinks associated with the company
         */
        public Builder webLinks(Optional<? extends List<WebLink>> webLinks) {
            Utils.checkNotNull(webLinks, "webLinks");
            this.webLinks = webLinks;
            return this;
        }
        
        public CommerceCompanyInfo build() {
            return new CommerceCompanyInfo(
                accountBalances,
                addresses,
                baseCurrency,
                commercePlatformRef,
                companyLegalName,
                companyName,
                createdDate,
                modifiedDate,
                phoneNumbers,
                registrationNumber,
                sourceModifiedDate,
                sourceUrls,
                webLinks);
        }
    }
}

