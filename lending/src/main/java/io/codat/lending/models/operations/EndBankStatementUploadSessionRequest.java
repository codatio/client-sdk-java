/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.codat.lending.models.shared.EndUploadSessionRequest;
import io.codat.lending.utils.SpeakeasyMetadata;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class EndBankStatementUploadSessionRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends EndUploadSessionRequest> endUploadSessionRequest;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * Unique identifier for a connection.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectionId")
    private String connectionId;

    /**
     * Unique identifier for the dataset that completed its sync.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=datasetId")
    private String datasetId;

    @JsonCreator
    public EndBankStatementUploadSessionRequest(
            Optional<? extends EndUploadSessionRequest> endUploadSessionRequest,
            String companyId,
            String connectionId,
            String datasetId) {
        Utils.checkNotNull(endUploadSessionRequest, "endUploadSessionRequest");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(datasetId, "datasetId");
        this.endUploadSessionRequest = endUploadSessionRequest;
        this.companyId = companyId;
        this.connectionId = connectionId;
        this.datasetId = datasetId;
    }
    
    public EndBankStatementUploadSessionRequest(
            String companyId,
            String connectionId,
            String datasetId) {
        this(Optional.empty(), companyId, connectionId, datasetId);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EndUploadSessionRequest> endUploadSessionRequest() {
        return (Optional<EndUploadSessionRequest>) endUploadSessionRequest;
    }

    /**
     * Unique identifier for a company.
     */
    @JsonIgnore
    public String companyId() {
        return companyId;
    }

    /**
     * Unique identifier for a connection.
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * Unique identifier for the dataset that completed its sync.
     */
    @JsonIgnore
    public String datasetId() {
        return datasetId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public EndBankStatementUploadSessionRequest withEndUploadSessionRequest(EndUploadSessionRequest endUploadSessionRequest) {
        Utils.checkNotNull(endUploadSessionRequest, "endUploadSessionRequest");
        this.endUploadSessionRequest = Optional.ofNullable(endUploadSessionRequest);
        return this;
    }

    public EndBankStatementUploadSessionRequest withEndUploadSessionRequest(Optional<? extends EndUploadSessionRequest> endUploadSessionRequest) {
        Utils.checkNotNull(endUploadSessionRequest, "endUploadSessionRequest");
        this.endUploadSessionRequest = endUploadSessionRequest;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public EndBankStatementUploadSessionRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Unique identifier for a connection.
     */
    public EndBankStatementUploadSessionRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Unique identifier for the dataset that completed its sync.
     */
    public EndBankStatementUploadSessionRequest withDatasetId(String datasetId) {
        Utils.checkNotNull(datasetId, "datasetId");
        this.datasetId = datasetId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EndBankStatementUploadSessionRequest other = (EndBankStatementUploadSessionRequest) o;
        return 
            Objects.deepEquals(this.endUploadSessionRequest, other.endUploadSessionRequest) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.datasetId, other.datasetId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            endUploadSessionRequest,
            companyId,
            connectionId,
            datasetId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EndBankStatementUploadSessionRequest.class,
                "endUploadSessionRequest", endUploadSessionRequest,
                "companyId", companyId,
                "connectionId", connectionId,
                "datasetId", datasetId);
    }
    
    public final static class Builder {
 
        private Optional<? extends EndUploadSessionRequest> endUploadSessionRequest = Optional.empty();
 
        private String companyId;
 
        private String connectionId;
 
        private String datasetId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder endUploadSessionRequest(EndUploadSessionRequest endUploadSessionRequest) {
            Utils.checkNotNull(endUploadSessionRequest, "endUploadSessionRequest");
            this.endUploadSessionRequest = Optional.ofNullable(endUploadSessionRequest);
            return this;
        }

        public Builder endUploadSessionRequest(Optional<? extends EndUploadSessionRequest> endUploadSessionRequest) {
            Utils.checkNotNull(endUploadSessionRequest, "endUploadSessionRequest");
            this.endUploadSessionRequest = endUploadSessionRequest;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Unique identifier for a connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * Unique identifier for the dataset that completed its sync.
         */
        public Builder datasetId(String datasetId) {
            Utils.checkNotNull(datasetId, "datasetId");
            this.datasetId = datasetId;
            return this;
        }
        
        public EndBankStatementUploadSessionRequest build() {
            return new EndBankStatementUploadSessionRequest(
                endUploadSessionRequest,
                companyId,
                connectionId,
                datasetId);
        }
    }
}

