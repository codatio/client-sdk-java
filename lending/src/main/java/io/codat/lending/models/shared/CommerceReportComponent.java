/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class CommerceReportComponent {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    private Optional<? extends List<CommerceReportComponent>> components;

    /**
     * The component's dimension.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimension")
    private Optional<Long> dimension;

    /**
     * The component's display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensionDisplayName")
    private Optional<String> dimensionDisplayName;

    /**
     * The component's item number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item")
    private Optional<Long> item;

    /**
     * The component's item display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemDisplayName")
    private Optional<String> itemDisplayName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("measures")
    private Optional<? extends List<ReportComponentMeasure>> measures;

    @JsonCreator
    public CommerceReportComponent(
            @JsonProperty("components") Optional<? extends List<CommerceReportComponent>> components,
            @JsonProperty("dimension") Optional<Long> dimension,
            @JsonProperty("dimensionDisplayName") Optional<String> dimensionDisplayName,
            @JsonProperty("item") Optional<Long> item,
            @JsonProperty("itemDisplayName") Optional<String> itemDisplayName,
            @JsonProperty("measures") Optional<? extends List<ReportComponentMeasure>> measures) {
        Utils.checkNotNull(components, "components");
        Utils.checkNotNull(dimension, "dimension");
        Utils.checkNotNull(dimensionDisplayName, "dimensionDisplayName");
        Utils.checkNotNull(item, "item");
        Utils.checkNotNull(itemDisplayName, "itemDisplayName");
        Utils.checkNotNull(measures, "measures");
        this.components = components;
        this.dimension = dimension;
        this.dimensionDisplayName = dimensionDisplayName;
        this.item = item;
        this.itemDisplayName = itemDisplayName;
        this.measures = measures;
    }
    
    public CommerceReportComponent() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceReportComponent>> components() {
        return (Optional<List<CommerceReportComponent>>) components;
    }

    /**
     * The component's dimension.
     */
    @JsonIgnore
    public Optional<Long> dimension() {
        return dimension;
    }

    /**
     * The component's display name.
     */
    @JsonIgnore
    public Optional<String> dimensionDisplayName() {
        return dimensionDisplayName;
    }

    /**
     * The component's item number.
     */
    @JsonIgnore
    public Optional<Long> item() {
        return item;
    }

    /**
     * The component's item display name.
     */
    @JsonIgnore
    public Optional<String> itemDisplayName() {
        return itemDisplayName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ReportComponentMeasure>> measures() {
        return (Optional<List<ReportComponentMeasure>>) measures;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CommerceReportComponent withComponents(List<CommerceReportComponent> components) {
        Utils.checkNotNull(components, "components");
        this.components = Optional.ofNullable(components);
        return this;
    }

    public CommerceReportComponent withComponents(Optional<? extends List<CommerceReportComponent>> components) {
        Utils.checkNotNull(components, "components");
        this.components = components;
        return this;
    }

    /**
     * The component's dimension.
     */
    public CommerceReportComponent withDimension(long dimension) {
        Utils.checkNotNull(dimension, "dimension");
        this.dimension = Optional.ofNullable(dimension);
        return this;
    }

    /**
     * The component's dimension.
     */
    public CommerceReportComponent withDimension(Optional<Long> dimension) {
        Utils.checkNotNull(dimension, "dimension");
        this.dimension = dimension;
        return this;
    }

    /**
     * The component's display name.
     */
    public CommerceReportComponent withDimensionDisplayName(String dimensionDisplayName) {
        Utils.checkNotNull(dimensionDisplayName, "dimensionDisplayName");
        this.dimensionDisplayName = Optional.ofNullable(dimensionDisplayName);
        return this;
    }

    /**
     * The component's display name.
     */
    public CommerceReportComponent withDimensionDisplayName(Optional<String> dimensionDisplayName) {
        Utils.checkNotNull(dimensionDisplayName, "dimensionDisplayName");
        this.dimensionDisplayName = dimensionDisplayName;
        return this;
    }

    /**
     * The component's item number.
     */
    public CommerceReportComponent withItem(long item) {
        Utils.checkNotNull(item, "item");
        this.item = Optional.ofNullable(item);
        return this;
    }

    /**
     * The component's item number.
     */
    public CommerceReportComponent withItem(Optional<Long> item) {
        Utils.checkNotNull(item, "item");
        this.item = item;
        return this;
    }

    /**
     * The component's item display name.
     */
    public CommerceReportComponent withItemDisplayName(String itemDisplayName) {
        Utils.checkNotNull(itemDisplayName, "itemDisplayName");
        this.itemDisplayName = Optional.ofNullable(itemDisplayName);
        return this;
    }

    /**
     * The component's item display name.
     */
    public CommerceReportComponent withItemDisplayName(Optional<String> itemDisplayName) {
        Utils.checkNotNull(itemDisplayName, "itemDisplayName");
        this.itemDisplayName = itemDisplayName;
        return this;
    }

    public CommerceReportComponent withMeasures(List<ReportComponentMeasure> measures) {
        Utils.checkNotNull(measures, "measures");
        this.measures = Optional.ofNullable(measures);
        return this;
    }

    public CommerceReportComponent withMeasures(Optional<? extends List<ReportComponentMeasure>> measures) {
        Utils.checkNotNull(measures, "measures");
        this.measures = measures;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceReportComponent other = (CommerceReportComponent) o;
        return 
            Objects.deepEquals(this.components, other.components) &&
            Objects.deepEquals(this.dimension, other.dimension) &&
            Objects.deepEquals(this.dimensionDisplayName, other.dimensionDisplayName) &&
            Objects.deepEquals(this.item, other.item) &&
            Objects.deepEquals(this.itemDisplayName, other.itemDisplayName) &&
            Objects.deepEquals(this.measures, other.measures);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            components,
            dimension,
            dimensionDisplayName,
            item,
            itemDisplayName,
            measures);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceReportComponent.class,
                "components", components,
                "dimension", dimension,
                "dimensionDisplayName", dimensionDisplayName,
                "item", item,
                "itemDisplayName", itemDisplayName,
                "measures", measures);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<CommerceReportComponent>> components = Optional.empty();
 
        private Optional<Long> dimension = Optional.empty();
 
        private Optional<String> dimensionDisplayName = Optional.empty();
 
        private Optional<Long> item = Optional.empty();
 
        private Optional<String> itemDisplayName = Optional.empty();
 
        private Optional<? extends List<ReportComponentMeasure>> measures = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder components(List<CommerceReportComponent> components) {
            Utils.checkNotNull(components, "components");
            this.components = Optional.ofNullable(components);
            return this;
        }

        public Builder components(Optional<? extends List<CommerceReportComponent>> components) {
            Utils.checkNotNull(components, "components");
            this.components = components;
            return this;
        }

        /**
         * The component's dimension.
         */
        public Builder dimension(long dimension) {
            Utils.checkNotNull(dimension, "dimension");
            this.dimension = Optional.ofNullable(dimension);
            return this;
        }

        /**
         * The component's dimension.
         */
        public Builder dimension(Optional<Long> dimension) {
            Utils.checkNotNull(dimension, "dimension");
            this.dimension = dimension;
            return this;
        }

        /**
         * The component's display name.
         */
        public Builder dimensionDisplayName(String dimensionDisplayName) {
            Utils.checkNotNull(dimensionDisplayName, "dimensionDisplayName");
            this.dimensionDisplayName = Optional.ofNullable(dimensionDisplayName);
            return this;
        }

        /**
         * The component's display name.
         */
        public Builder dimensionDisplayName(Optional<String> dimensionDisplayName) {
            Utils.checkNotNull(dimensionDisplayName, "dimensionDisplayName");
            this.dimensionDisplayName = dimensionDisplayName;
            return this;
        }

        /**
         * The component's item number.
         */
        public Builder item(long item) {
            Utils.checkNotNull(item, "item");
            this.item = Optional.ofNullable(item);
            return this;
        }

        /**
         * The component's item number.
         */
        public Builder item(Optional<Long> item) {
            Utils.checkNotNull(item, "item");
            this.item = item;
            return this;
        }

        /**
         * The component's item display name.
         */
        public Builder itemDisplayName(String itemDisplayName) {
            Utils.checkNotNull(itemDisplayName, "itemDisplayName");
            this.itemDisplayName = Optional.ofNullable(itemDisplayName);
            return this;
        }

        /**
         * The component's item display name.
         */
        public Builder itemDisplayName(Optional<String> itemDisplayName) {
            Utils.checkNotNull(itemDisplayName, "itemDisplayName");
            this.itemDisplayName = itemDisplayName;
            return this;
        }

        public Builder measures(List<ReportComponentMeasure> measures) {
            Utils.checkNotNull(measures, "measures");
            this.measures = Optional.ofNullable(measures);
            return this;
        }

        public Builder measures(Optional<? extends List<ReportComponentMeasure>> measures) {
            Utils.checkNotNull(measures, "measures");
            this.measures = measures;
            return this;
        }
        
        public CommerceReportComponent build() {
            return new CommerceReportComponent(
                components,
                dimension,
                dimensionDisplayName,
                item,
                itemDisplayName,
                measures);
        }
    }
}

