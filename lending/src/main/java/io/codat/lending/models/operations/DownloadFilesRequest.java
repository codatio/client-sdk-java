/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.operations;

import io.codat.lending.utils.SpeakeasyMetadata;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class DownloadFilesRequest {

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * Only download files uploaded on this date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=date")
    private Optional<? extends String> date;

    public DownloadFilesRequest(
            String companyId,
            Optional<? extends String> date) {
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(date, "date");
        this.companyId = companyId;
        this.date = date;
    }

    /**
     * Unique identifier for a company.
     */
    public String companyId() {
        return companyId;
    }

    /**
     * Only download files uploaded on this date.
     */
    public Optional<? extends String> date() {
        return date;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for a company.
     */
    public DownloadFilesRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Only download files uploaded on this date.
     */
    public DownloadFilesRequest withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }
    
    /**
     * Only download files uploaded on this date.
     */
    public DownloadFilesRequest withDate(Optional<? extends String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DownloadFilesRequest other = (DownloadFilesRequest) o;
        return 
            java.util.Objects.deepEquals(this.companyId, other.companyId) &&
            java.util.Objects.deepEquals(this.date, other.date);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            companyId,
            date);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DownloadFilesRequest.class,
                "companyId", companyId,
                "date", date);
    }
    
    public final static class Builder {
 
        private String companyId;
 
        private Optional<? extends String> date = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Only download files uploaded on this date.
         */
        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }
        
        /**
         * Only download files uploaded on this date.
         */
        public Builder date(Optional<? extends String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }
        
        public DownloadFilesRequest build() {
            return new DownloadFilesRequest(
                companyId,
                date);
        }
    }
}

