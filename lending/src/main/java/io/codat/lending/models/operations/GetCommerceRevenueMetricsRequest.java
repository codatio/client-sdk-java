/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.operations;

import io.codat.lending.utils.SpeakeasyMetadata;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class GetCommerceRevenueMetricsRequest {

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * Unique identifier for a connection.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectionId")
    private String connectionId;

    /**
     * Shows the dimensionDisplayName and itemDisplayName in measures to make the report data human-readable.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeDisplayNames")
    private Optional<? extends Boolean> includeDisplayNames;

    /**
     * The number of periods to return. There will be no pagination as a query parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=numberOfPeriods")
    private long numberOfPeriods;

    /**
     * The number of months per period. E.g. 2 = 2 months per period.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=periodLength")
    private long periodLength;

    /**
     * The period unit of time returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=periodUnit")
    private io.codat.lending.models.shared.PeriodUnit periodUnit;

    /**
     * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=reportDate")
    private String reportDate;

    public GetCommerceRevenueMetricsRequest(
            String companyId,
            String connectionId,
            Optional<? extends Boolean> includeDisplayNames,
            long numberOfPeriods,
            long periodLength,
            io.codat.lending.models.shared.PeriodUnit periodUnit,
            String reportDate) {
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(includeDisplayNames, "includeDisplayNames");
        Utils.checkNotNull(numberOfPeriods, "numberOfPeriods");
        Utils.checkNotNull(periodLength, "periodLength");
        Utils.checkNotNull(periodUnit, "periodUnit");
        Utils.checkNotNull(reportDate, "reportDate");
        this.companyId = companyId;
        this.connectionId = connectionId;
        this.includeDisplayNames = includeDisplayNames;
        this.numberOfPeriods = numberOfPeriods;
        this.periodLength = periodLength;
        this.periodUnit = periodUnit;
        this.reportDate = reportDate;
    }

    /**
     * Unique identifier for a company.
     */
    public String companyId() {
        return companyId;
    }

    /**
     * Unique identifier for a connection.
     */
    public String connectionId() {
        return connectionId;
    }

    /**
     * Shows the dimensionDisplayName and itemDisplayName in measures to make the report data human-readable.
     */
    public Optional<? extends Boolean> includeDisplayNames() {
        return includeDisplayNames;
    }

    /**
     * The number of periods to return. There will be no pagination as a query parameter.
     */
    public long numberOfPeriods() {
        return numberOfPeriods;
    }

    /**
     * The number of months per period. E.g. 2 = 2 months per period.
     */
    public long periodLength() {
        return periodLength;
    }

    /**
     * The period unit of time returned.
     */
    public io.codat.lending.models.shared.PeriodUnit periodUnit() {
        return periodUnit;
    }

    /**
     * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
     */
    public String reportDate() {
        return reportDate;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for a company.
     */
    public GetCommerceRevenueMetricsRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Unique identifier for a connection.
     */
    public GetCommerceRevenueMetricsRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Shows the dimensionDisplayName and itemDisplayName in measures to make the report data human-readable.
     */
    public GetCommerceRevenueMetricsRequest withIncludeDisplayNames(boolean includeDisplayNames) {
        Utils.checkNotNull(includeDisplayNames, "includeDisplayNames");
        this.includeDisplayNames = Optional.ofNullable(includeDisplayNames);
        return this;
    }
    
    /**
     * Shows the dimensionDisplayName and itemDisplayName in measures to make the report data human-readable.
     */
    public GetCommerceRevenueMetricsRequest withIncludeDisplayNames(Optional<? extends Boolean> includeDisplayNames) {
        Utils.checkNotNull(includeDisplayNames, "includeDisplayNames");
        this.includeDisplayNames = includeDisplayNames;
        return this;
    }

    /**
     * The number of periods to return. There will be no pagination as a query parameter.
     */
    public GetCommerceRevenueMetricsRequest withNumberOfPeriods(long numberOfPeriods) {
        Utils.checkNotNull(numberOfPeriods, "numberOfPeriods");
        this.numberOfPeriods = numberOfPeriods;
        return this;
    }

    /**
     * The number of months per period. E.g. 2 = 2 months per period.
     */
    public GetCommerceRevenueMetricsRequest withPeriodLength(long periodLength) {
        Utils.checkNotNull(periodLength, "periodLength");
        this.periodLength = periodLength;
        return this;
    }

    /**
     * The period unit of time returned.
     */
    public GetCommerceRevenueMetricsRequest withPeriodUnit(io.codat.lending.models.shared.PeriodUnit periodUnit) {
        Utils.checkNotNull(periodUnit, "periodUnit");
        this.periodUnit = periodUnit;
        return this;
    }

    /**
     * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
     */
    public GetCommerceRevenueMetricsRequest withReportDate(String reportDate) {
        Utils.checkNotNull(reportDate, "reportDate");
        this.reportDate = reportDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCommerceRevenueMetricsRequest other = (GetCommerceRevenueMetricsRequest) o;
        return 
            java.util.Objects.deepEquals(this.companyId, other.companyId) &&
            java.util.Objects.deepEquals(this.connectionId, other.connectionId) &&
            java.util.Objects.deepEquals(this.includeDisplayNames, other.includeDisplayNames) &&
            java.util.Objects.deepEquals(this.numberOfPeriods, other.numberOfPeriods) &&
            java.util.Objects.deepEquals(this.periodLength, other.periodLength) &&
            java.util.Objects.deepEquals(this.periodUnit, other.periodUnit) &&
            java.util.Objects.deepEquals(this.reportDate, other.reportDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            companyId,
            connectionId,
            includeDisplayNames,
            numberOfPeriods,
            periodLength,
            periodUnit,
            reportDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCommerceRevenueMetricsRequest.class,
                "companyId", companyId,
                "connectionId", connectionId,
                "includeDisplayNames", includeDisplayNames,
                "numberOfPeriods", numberOfPeriods,
                "periodLength", periodLength,
                "periodUnit", periodUnit,
                "reportDate", reportDate);
    }
    
    public final static class Builder {
 
        private String companyId;
 
        private String connectionId;
 
        private Optional<? extends Boolean> includeDisplayNames = Optional.empty();
 
        private Long numberOfPeriods;
 
        private Long periodLength;
 
        private io.codat.lending.models.shared.PeriodUnit periodUnit;
 
        private String reportDate;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Unique identifier for a connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * Shows the dimensionDisplayName and itemDisplayName in measures to make the report data human-readable.
         */
        public Builder includeDisplayNames(boolean includeDisplayNames) {
            Utils.checkNotNull(includeDisplayNames, "includeDisplayNames");
            this.includeDisplayNames = Optional.ofNullable(includeDisplayNames);
            return this;
        }
        
        /**
         * Shows the dimensionDisplayName and itemDisplayName in measures to make the report data human-readable.
         */
        public Builder includeDisplayNames(Optional<? extends Boolean> includeDisplayNames) {
            Utils.checkNotNull(includeDisplayNames, "includeDisplayNames");
            this.includeDisplayNames = includeDisplayNames;
            return this;
        }

        /**
         * The number of periods to return. There will be no pagination as a query parameter.
         */
        public Builder numberOfPeriods(long numberOfPeriods) {
            Utils.checkNotNull(numberOfPeriods, "numberOfPeriods");
            this.numberOfPeriods = numberOfPeriods;
            return this;
        }

        /**
         * The number of months per period. E.g. 2 = 2 months per period.
         */
        public Builder periodLength(long periodLength) {
            Utils.checkNotNull(periodLength, "periodLength");
            this.periodLength = periodLength;
            return this;
        }

        /**
         * The period unit of time returned.
         */
        public Builder periodUnit(io.codat.lending.models.shared.PeriodUnit periodUnit) {
            Utils.checkNotNull(periodUnit, "periodUnit");
            this.periodUnit = periodUnit;
            return this;
        }

        /**
         * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
         */
        public Builder reportDate(String reportDate) {
            Utils.checkNotNull(reportDate, "reportDate");
            this.reportDate = reportDate;
            return this;
        }
        
        public GetCommerceRevenueMetricsRequest build() {
            return new GetCommerceRevenueMetricsRequest(
                companyId,
                connectionId,
                includeDisplayNames,
                numberOfPeriods,
                periodLength,
                periodUnit,
                reportDate);
        }
    }
}

