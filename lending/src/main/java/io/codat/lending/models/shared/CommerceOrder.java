/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;

/**
 * CommerceOrder - Orders contain the transaction details for all products sold by the company, and include details of any payments, service charges, or refunds related to each order. You can use data from the Orders endpoints to calculate key metrics, such as gross sales values and monthly recurring revenue (MRR).
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&amp;dataType=commerce-orders) for this data type.
 * 
 */

public class CommerceOrder {

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closedDate")
    private Optional<? extends String> closedDate;

    /**
     * The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.
     * 
     * Depending on the platform the value of this property will either be an &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="_blank"&gt;ISO 3166&lt;/a&gt; code (2-alpha or 3-alpha) or free-form text returned as a string name in our model. 
     * 
     * For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/lending-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<? extends String> country;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdDate")
    private Optional<? extends String> createdDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    /**
     * Reference to the customer that placed the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerRef")
    private Optional<? extends CommerceCustomerRef> customerRef;

    /**
     * A unique, persistent identifier for this record
     */
    @JsonProperty("id")
    private String id;

    /**
     * Reference to the geographic location where the order was placed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationRef")
    private Optional<? extends LocationRef> locationRef;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<? extends String> modifiedDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderLineItems")
    private Optional<? extends java.util.List<OrderLineItem>> orderLineItems;

    /**
     * Friendly reference for the order in the commerce or point of sale platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderNumber")
    private Optional<? extends String> orderNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payments")
    private Optional<? extends java.util.List<PaymentRef>> payments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceCharges")
    private Optional<? extends java.util.List<ServiceCharge>> serviceCharges;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<? extends String> sourceModifiedDate;

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalData")
    private Optional<? extends SupplementalData> supplementalData;

    /**
     * Total amount of the order, including discounts, refunds, and tax, but excluding gratuities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends Double> totalAmount;

    /**
     * Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDiscount")
    private Optional<? extends Double> totalDiscount;

    /**
     * Extra amount added to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalGratuity")
    private Optional<? extends Double> totalGratuity;

    /**
     * Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalRefund")
    private Optional<? extends Double> totalRefund;

    /**
     * Total amount of tax applied to the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalTaxAmount")
    private Optional<? extends Double> totalTaxAmount;

    public CommerceOrder(
            @JsonProperty("closedDate") Optional<? extends String> closedDate,
            @JsonProperty("country") Optional<? extends String> country,
            @JsonProperty("createdDate") Optional<? extends String> createdDate,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("customerRef") Optional<? extends CommerceCustomerRef> customerRef,
            @JsonProperty("id") String id,
            @JsonProperty("locationRef") Optional<? extends LocationRef> locationRef,
            @JsonProperty("modifiedDate") Optional<? extends String> modifiedDate,
            @JsonProperty("orderLineItems") Optional<? extends java.util.List<OrderLineItem>> orderLineItems,
            @JsonProperty("orderNumber") Optional<? extends String> orderNumber,
            @JsonProperty("payments") Optional<? extends java.util.List<PaymentRef>> payments,
            @JsonProperty("serviceCharges") Optional<? extends java.util.List<ServiceCharge>> serviceCharges,
            @JsonProperty("sourceModifiedDate") Optional<? extends String> sourceModifiedDate,
            @JsonProperty("supplementalData") Optional<? extends SupplementalData> supplementalData,
            @JsonProperty("totalAmount") Optional<? extends Double> totalAmount,
            @JsonProperty("totalDiscount") Optional<? extends Double> totalDiscount,
            @JsonProperty("totalGratuity") Optional<? extends Double> totalGratuity,
            @JsonProperty("totalRefund") Optional<? extends Double> totalRefund,
            @JsonProperty("totalTaxAmount") Optional<? extends Double> totalTaxAmount) {
        Utils.checkNotNull(closedDate, "closedDate");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(customerRef, "customerRef");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(locationRef, "locationRef");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(orderLineItems, "orderLineItems");
        Utils.checkNotNull(orderNumber, "orderNumber");
        Utils.checkNotNull(payments, "payments");
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(supplementalData, "supplementalData");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        Utils.checkNotNull(totalGratuity, "totalGratuity");
        Utils.checkNotNull(totalRefund, "totalRefund");
        Utils.checkNotNull(totalTaxAmount, "totalTaxAmount");
        this.closedDate = closedDate;
        this.country = country;
        this.createdDate = createdDate;
        this.currency = currency;
        this.customerRef = customerRef;
        this.id = id;
        this.locationRef = locationRef;
        this.modifiedDate = modifiedDate;
        this.orderLineItems = orderLineItems;
        this.orderNumber = orderNumber;
        this.payments = payments;
        this.serviceCharges = serviceCharges;
        this.sourceModifiedDate = sourceModifiedDate;
        this.supplementalData = supplementalData;
        this.totalAmount = totalAmount;
        this.totalDiscount = totalDiscount;
        this.totalGratuity = totalGratuity;
        this.totalRefund = totalRefund;
        this.totalTaxAmount = totalTaxAmount;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> closedDate() {
        return closedDate;
    }

    /**
     * The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.
     * 
     * Depending on the platform the value of this property will either be an &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="_blank"&gt;ISO 3166&lt;/a&gt; code (2-alpha or 3-alpha) or free-form text returned as a string name in our model. 
     * 
     * For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/lending-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
     */
    public Optional<? extends String> country() {
        return country;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> createdDate() {
        return createdDate;
    }

    public Optional<? extends String> currency() {
        return currency;
    }

    /**
     * Reference to the customer that placed the order.
     */
    public Optional<? extends CommerceCustomerRef> customerRef() {
        return customerRef;
    }

    /**
     * A unique, persistent identifier for this record
     */
    public String id() {
        return id;
    }

    /**
     * Reference to the geographic location where the order was placed.
     */
    public Optional<? extends LocationRef> locationRef() {
        return locationRef;
    }

    public Optional<? extends String> modifiedDate() {
        return modifiedDate;
    }

    public Optional<? extends java.util.List<OrderLineItem>> orderLineItems() {
        return orderLineItems;
    }

    /**
     * Friendly reference for the order in the commerce or point of sale platform.
     */
    public Optional<? extends String> orderNumber() {
        return orderNumber;
    }

    public Optional<? extends java.util.List<PaymentRef>> payments() {
        return payments;
    }

    public Optional<? extends java.util.List<ServiceCharge>> serviceCharges() {
        return serviceCharges;
    }

    public Optional<? extends String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public Optional<? extends SupplementalData> supplementalData() {
        return supplementalData;
    }

    /**
     * Total amount of the order, including discounts, refunds, and tax, but excluding gratuities.
     */
    public Optional<? extends Double> totalAmount() {
        return totalAmount;
    }

    /**
     * Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order).
     */
    public Optional<? extends Double> totalDiscount() {
        return totalDiscount;
    }

    /**
     * Extra amount added to the order.
     */
    public Optional<? extends Double> totalGratuity() {
        return totalGratuity;
    }

    /**
     * Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative.
     */
    public Optional<? extends Double> totalRefund() {
        return totalRefund;
    }

    /**
     * Total amount of tax applied to the order.
     */
    public Optional<? extends Double> totalTaxAmount() {
        return totalTaxAmount;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public CommerceOrder withClosedDate(String closedDate) {
        Utils.checkNotNull(closedDate, "closedDate");
        this.closedDate = Optional.ofNullable(closedDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public CommerceOrder withClosedDate(Optional<? extends String> closedDate) {
        Utils.checkNotNull(closedDate, "closedDate");
        this.closedDate = closedDate;
        return this;
    }

    /**
     * The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.
     * 
     * Depending on the platform the value of this property will either be an &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="_blank"&gt;ISO 3166&lt;/a&gt; code (2-alpha or 3-alpha) or free-form text returned as a string name in our model. 
     * 
     * For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/lending-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
     */
    public CommerceOrder withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }
    
    /**
     * The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.
     * 
     * Depending on the platform the value of this property will either be an &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="_blank"&gt;ISO 3166&lt;/a&gt; code (2-alpha or 3-alpha) or free-form text returned as a string name in our model. 
     * 
     * For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/lending-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
     */
    public CommerceOrder withCountry(Optional<? extends String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public CommerceOrder withCreatedDate(String createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = Optional.ofNullable(createdDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public CommerceOrder withCreatedDate(Optional<? extends String> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    public CommerceOrder withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }
    
    public CommerceOrder withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Reference to the customer that placed the order.
     */
    public CommerceOrder withCustomerRef(CommerceCustomerRef customerRef) {
        Utils.checkNotNull(customerRef, "customerRef");
        this.customerRef = Optional.ofNullable(customerRef);
        return this;
    }
    
    /**
     * Reference to the customer that placed the order.
     */
    public CommerceOrder withCustomerRef(Optional<? extends CommerceCustomerRef> customerRef) {
        Utils.checkNotNull(customerRef, "customerRef");
        this.customerRef = customerRef;
        return this;
    }

    /**
     * A unique, persistent identifier for this record
     */
    public CommerceOrder withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Reference to the geographic location where the order was placed.
     */
    public CommerceOrder withLocationRef(LocationRef locationRef) {
        Utils.checkNotNull(locationRef, "locationRef");
        this.locationRef = Optional.ofNullable(locationRef);
        return this;
    }
    
    /**
     * Reference to the geographic location where the order was placed.
     */
    public CommerceOrder withLocationRef(Optional<? extends LocationRef> locationRef) {
        Utils.checkNotNull(locationRef, "locationRef");
        this.locationRef = locationRef;
        return this;
    }

    public CommerceOrder withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }
    
    public CommerceOrder withModifiedDate(Optional<? extends String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    public CommerceOrder withOrderLineItems(java.util.List<OrderLineItem> orderLineItems) {
        Utils.checkNotNull(orderLineItems, "orderLineItems");
        this.orderLineItems = Optional.ofNullable(orderLineItems);
        return this;
    }
    
    public CommerceOrder withOrderLineItems(Optional<? extends java.util.List<OrderLineItem>> orderLineItems) {
        Utils.checkNotNull(orderLineItems, "orderLineItems");
        this.orderLineItems = orderLineItems;
        return this;
    }

    /**
     * Friendly reference for the order in the commerce or point of sale platform.
     */
    public CommerceOrder withOrderNumber(String orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = Optional.ofNullable(orderNumber);
        return this;
    }
    
    /**
     * Friendly reference for the order in the commerce or point of sale platform.
     */
    public CommerceOrder withOrderNumber(Optional<? extends String> orderNumber) {
        Utils.checkNotNull(orderNumber, "orderNumber");
        this.orderNumber = orderNumber;
        return this;
    }

    public CommerceOrder withPayments(java.util.List<PaymentRef> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = Optional.ofNullable(payments);
        return this;
    }
    
    public CommerceOrder withPayments(Optional<? extends java.util.List<PaymentRef>> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = payments;
        return this;
    }

    public CommerceOrder withServiceCharges(java.util.List<ServiceCharge> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = Optional.ofNullable(serviceCharges);
        return this;
    }
    
    public CommerceOrder withServiceCharges(Optional<? extends java.util.List<ServiceCharge>> serviceCharges) {
        Utils.checkNotNull(serviceCharges, "serviceCharges");
        this.serviceCharges = serviceCharges;
        return this;
    }

    public CommerceOrder withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }
    
    public CommerceOrder withSourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public CommerceOrder withSupplementalData(SupplementalData supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = Optional.ofNullable(supplementalData);
        return this;
    }
    
    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public CommerceOrder withSupplementalData(Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = supplementalData;
        return this;
    }

    /**
     * Total amount of the order, including discounts, refunds, and tax, but excluding gratuities.
     */
    public CommerceOrder withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }
    
    /**
     * Total amount of the order, including discounts, refunds, and tax, but excluding gratuities.
     */
    public CommerceOrder withTotalAmount(Optional<? extends Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order).
     */
    public CommerceOrder withTotalDiscount(double totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = Optional.ofNullable(totalDiscount);
        return this;
    }
    
    /**
     * Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order).
     */
    public CommerceOrder withTotalDiscount(Optional<? extends Double> totalDiscount) {
        Utils.checkNotNull(totalDiscount, "totalDiscount");
        this.totalDiscount = totalDiscount;
        return this;
    }

    /**
     * Extra amount added to the order.
     */
    public CommerceOrder withTotalGratuity(double totalGratuity) {
        Utils.checkNotNull(totalGratuity, "totalGratuity");
        this.totalGratuity = Optional.ofNullable(totalGratuity);
        return this;
    }
    
    /**
     * Extra amount added to the order.
     */
    public CommerceOrder withTotalGratuity(Optional<? extends Double> totalGratuity) {
        Utils.checkNotNull(totalGratuity, "totalGratuity");
        this.totalGratuity = totalGratuity;
        return this;
    }

    /**
     * Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative.
     */
    public CommerceOrder withTotalRefund(double totalRefund) {
        Utils.checkNotNull(totalRefund, "totalRefund");
        this.totalRefund = Optional.ofNullable(totalRefund);
        return this;
    }
    
    /**
     * Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative.
     */
    public CommerceOrder withTotalRefund(Optional<? extends Double> totalRefund) {
        Utils.checkNotNull(totalRefund, "totalRefund");
        this.totalRefund = totalRefund;
        return this;
    }

    /**
     * Total amount of tax applied to the order.
     */
    public CommerceOrder withTotalTaxAmount(double totalTaxAmount) {
        Utils.checkNotNull(totalTaxAmount, "totalTaxAmount");
        this.totalTaxAmount = Optional.ofNullable(totalTaxAmount);
        return this;
    }
    
    /**
     * Total amount of tax applied to the order.
     */
    public CommerceOrder withTotalTaxAmount(Optional<? extends Double> totalTaxAmount) {
        Utils.checkNotNull(totalTaxAmount, "totalTaxAmount");
        this.totalTaxAmount = totalTaxAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceOrder other = (CommerceOrder) o;
        return 
            java.util.Objects.deepEquals(this.closedDate, other.closedDate) &&
            java.util.Objects.deepEquals(this.country, other.country) &&
            java.util.Objects.deepEquals(this.createdDate, other.createdDate) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.customerRef, other.customerRef) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.locationRef, other.locationRef) &&
            java.util.Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            java.util.Objects.deepEquals(this.orderLineItems, other.orderLineItems) &&
            java.util.Objects.deepEquals(this.orderNumber, other.orderNumber) &&
            java.util.Objects.deepEquals(this.payments, other.payments) &&
            java.util.Objects.deepEquals(this.serviceCharges, other.serviceCharges) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            java.util.Objects.deepEquals(this.supplementalData, other.supplementalData) &&
            java.util.Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            java.util.Objects.deepEquals(this.totalDiscount, other.totalDiscount) &&
            java.util.Objects.deepEquals(this.totalGratuity, other.totalGratuity) &&
            java.util.Objects.deepEquals(this.totalRefund, other.totalRefund) &&
            java.util.Objects.deepEquals(this.totalTaxAmount, other.totalTaxAmount);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            closedDate,
            country,
            createdDate,
            currency,
            customerRef,
            id,
            locationRef,
            modifiedDate,
            orderLineItems,
            orderNumber,
            payments,
            serviceCharges,
            sourceModifiedDate,
            supplementalData,
            totalAmount,
            totalDiscount,
            totalGratuity,
            totalRefund,
            totalTaxAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceOrder.class,
                "closedDate", closedDate,
                "country", country,
                "createdDate", createdDate,
                "currency", currency,
                "customerRef", customerRef,
                "id", id,
                "locationRef", locationRef,
                "modifiedDate", modifiedDate,
                "orderLineItems", orderLineItems,
                "orderNumber", orderNumber,
                "payments", payments,
                "serviceCharges", serviceCharges,
                "sourceModifiedDate", sourceModifiedDate,
                "supplementalData", supplementalData,
                "totalAmount", totalAmount,
                "totalDiscount", totalDiscount,
                "totalGratuity", totalGratuity,
                "totalRefund", totalRefund,
                "totalTaxAmount", totalTaxAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> closedDate = Optional.empty();
 
        private Optional<? extends String> country = Optional.empty();
 
        private Optional<? extends String> createdDate = Optional.empty();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private Optional<? extends CommerceCustomerRef> customerRef = Optional.empty();
 
        private String id;
 
        private Optional<? extends LocationRef> locationRef = Optional.empty();
 
        private Optional<? extends String> modifiedDate = Optional.empty();
 
        private Optional<? extends java.util.List<OrderLineItem>> orderLineItems = Optional.empty();
 
        private Optional<? extends String> orderNumber = Optional.empty();
 
        private Optional<? extends java.util.List<PaymentRef>> payments = Optional.empty();
 
        private Optional<? extends java.util.List<ServiceCharge>> serviceCharges = Optional.empty();
 
        private Optional<? extends String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends SupplementalData> supplementalData = Optional.empty();
 
        private Optional<? extends Double> totalAmount = Optional.empty();
 
        private Optional<? extends Double> totalDiscount = Optional.empty();
 
        private Optional<? extends Double> totalGratuity = Optional.empty();
 
        private Optional<? extends Double> totalRefund = Optional.empty();
 
        private Optional<? extends Double> totalTaxAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder closedDate(String closedDate) {
            Utils.checkNotNull(closedDate, "closedDate");
            this.closedDate = Optional.ofNullable(closedDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder closedDate(Optional<? extends String> closedDate) {
            Utils.checkNotNull(closedDate, "closedDate");
            this.closedDate = closedDate;
            return this;
        }

        /**
         * The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.
         * 
         * Depending on the platform the value of this property will either be an &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="_blank"&gt;ISO 3166&lt;/a&gt; code (2-alpha or 3-alpha) or free-form text returned as a string name in our model. 
         * 
         * For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/lending-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }
        
        /**
         * The Codat country property is returned as it was provided in the underlying platform by the company without any formatting on our part.
         * 
         * Depending on the platform the value of this property will either be an &lt;a href="https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes" target="_blank"&gt;ISO 3166&lt;/a&gt; code (2-alpha or 3-alpha) or free-form text returned as a string name in our model. 
         * 
         * For POST operations against platforms that demand a specific format for the country code, we have documented accepted values in the [options](https://docs.codat.io/lending-api#/operations/get-companies-companyId-connections-connectionId-push) endpoint.
         */
        public Builder country(Optional<? extends String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder createdDate(String createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = Optional.ofNullable(createdDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder createdDate(Optional<? extends String> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }
        
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Reference to the customer that placed the order.
         */
        public Builder customerRef(CommerceCustomerRef customerRef) {
            Utils.checkNotNull(customerRef, "customerRef");
            this.customerRef = Optional.ofNullable(customerRef);
            return this;
        }
        
        /**
         * Reference to the customer that placed the order.
         */
        public Builder customerRef(Optional<? extends CommerceCustomerRef> customerRef) {
            Utils.checkNotNull(customerRef, "customerRef");
            this.customerRef = customerRef;
            return this;
        }

        /**
         * A unique, persistent identifier for this record
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Reference to the geographic location where the order was placed.
         */
        public Builder locationRef(LocationRef locationRef) {
            Utils.checkNotNull(locationRef, "locationRef");
            this.locationRef = Optional.ofNullable(locationRef);
            return this;
        }
        
        /**
         * Reference to the geographic location where the order was placed.
         */
        public Builder locationRef(Optional<? extends LocationRef> locationRef) {
            Utils.checkNotNull(locationRef, "locationRef");
            this.locationRef = locationRef;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }
        
        public Builder modifiedDate(Optional<? extends String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        public Builder orderLineItems(java.util.List<OrderLineItem> orderLineItems) {
            Utils.checkNotNull(orderLineItems, "orderLineItems");
            this.orderLineItems = Optional.ofNullable(orderLineItems);
            return this;
        }
        
        public Builder orderLineItems(Optional<? extends java.util.List<OrderLineItem>> orderLineItems) {
            Utils.checkNotNull(orderLineItems, "orderLineItems");
            this.orderLineItems = orderLineItems;
            return this;
        }

        /**
         * Friendly reference for the order in the commerce or point of sale platform.
         */
        public Builder orderNumber(String orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = Optional.ofNullable(orderNumber);
            return this;
        }
        
        /**
         * Friendly reference for the order in the commerce or point of sale platform.
         */
        public Builder orderNumber(Optional<? extends String> orderNumber) {
            Utils.checkNotNull(orderNumber, "orderNumber");
            this.orderNumber = orderNumber;
            return this;
        }

        public Builder payments(java.util.List<PaymentRef> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = Optional.ofNullable(payments);
            return this;
        }
        
        public Builder payments(Optional<? extends java.util.List<PaymentRef>> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = payments;
            return this;
        }

        public Builder serviceCharges(java.util.List<ServiceCharge> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = Optional.ofNullable(serviceCharges);
            return this;
        }
        
        public Builder serviceCharges(Optional<? extends java.util.List<ServiceCharge>> serviceCharges) {
            Utils.checkNotNull(serviceCharges, "serviceCharges");
            this.serviceCharges = serviceCharges;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }
        
        public Builder sourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(SupplementalData supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = Optional.ofNullable(supplementalData);
            return this;
        }
        
        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(Optional<? extends SupplementalData> supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = supplementalData;
            return this;
        }

        /**
         * Total amount of the order, including discounts, refunds, and tax, but excluding gratuities.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }
        
        /**
         * Total amount of the order, including discounts, refunds, and tax, but excluding gratuities.
         */
        public Builder totalAmount(Optional<? extends Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order).
         */
        public Builder totalDiscount(double totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = Optional.ofNullable(totalDiscount);
            return this;
        }
        
        /**
         * Total amount of any discounts applied to the order, excluding tax. This is typically positive (for discounts which decrease the amount of the order), but can also be negative (for discounts which increase the amount of the order).
         */
        public Builder totalDiscount(Optional<? extends Double> totalDiscount) {
            Utils.checkNotNull(totalDiscount, "totalDiscount");
            this.totalDiscount = totalDiscount;
            return this;
        }

        /**
         * Extra amount added to the order.
         */
        public Builder totalGratuity(double totalGratuity) {
            Utils.checkNotNull(totalGratuity, "totalGratuity");
            this.totalGratuity = Optional.ofNullable(totalGratuity);
            return this;
        }
        
        /**
         * Extra amount added to the order.
         */
        public Builder totalGratuity(Optional<? extends Double> totalGratuity) {
            Utils.checkNotNull(totalGratuity, "totalGratuity");
            this.totalGratuity = totalGratuity;
            return this;
        }

        /**
         * Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative.
         */
        public Builder totalRefund(double totalRefund) {
            Utils.checkNotNull(totalRefund, "totalRefund");
            this.totalRefund = Optional.ofNullable(totalRefund);
            return this;
        }
        
        /**
         * Total amount of any refunds issued on the order, including discounts and tax, but excluding gratuities. This is always negative.
         */
        public Builder totalRefund(Optional<? extends Double> totalRefund) {
            Utils.checkNotNull(totalRefund, "totalRefund");
            this.totalRefund = totalRefund;
            return this;
        }

        /**
         * Total amount of tax applied to the order.
         */
        public Builder totalTaxAmount(double totalTaxAmount) {
            Utils.checkNotNull(totalTaxAmount, "totalTaxAmount");
            this.totalTaxAmount = Optional.ofNullable(totalTaxAmount);
            return this;
        }
        
        /**
         * Total amount of tax applied to the order.
         */
        public Builder totalTaxAmount(Optional<? extends Double> totalTaxAmount) {
            Utils.checkNotNull(totalTaxAmount, "totalTaxAmount");
            this.totalTaxAmount = totalTaxAmount;
            return this;
        }
        
        public CommerceOrder build() {
            return new CommerceOrder(
                closedDate,
                country,
                createdDate,
                currency,
                customerRef,
                id,
                locationRef,
                modifiedDate,
                orderLineItems,
                orderNumber,
                payments,
                serviceCharges,
                sourceModifiedDate,
                supplementalData,
                totalAmount,
                totalDiscount,
                totalGratuity,
                totalRefund,
                totalTaxAmount);
        }
    }
}

