/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.lending.utils.LazySingletonValue;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * RoutingInfo - Routing information for the bank. This does not include account number.
 */

public class RoutingInfo {

    /**
     * The numeric identifier of the routing number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankCode")
    private JsonNullable<String> bankCode;

    /**
     * The type of routing number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends Type> type;

    @JsonCreator
    public RoutingInfo(
            @JsonProperty("bankCode") JsonNullable<String> bankCode,
            @JsonProperty("type") JsonNullable<? extends Type> type) {
        Utils.checkNotNull(bankCode, "bankCode");
        Utils.checkNotNull(type, "type");
        this.bankCode = bankCode;
        this.type = type;
    }
    
    public RoutingInfo() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The numeric identifier of the routing number
     */
    @JsonIgnore
    public JsonNullable<String> bankCode() {
        return bankCode;
    }

    /**
     * The type of routing number.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Type> type() {
        return (JsonNullable<Type>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The numeric identifier of the routing number
     */
    public RoutingInfo withBankCode(String bankCode) {
        Utils.checkNotNull(bankCode, "bankCode");
        this.bankCode = JsonNullable.of(bankCode);
        return this;
    }

    /**
     * The numeric identifier of the routing number
     */
    public RoutingInfo withBankCode(JsonNullable<String> bankCode) {
        Utils.checkNotNull(bankCode, "bankCode");
        this.bankCode = bankCode;
        return this;
    }

    /**
     * The type of routing number.
     */
    public RoutingInfo withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The type of routing number.
     */
    public RoutingInfo withType(JsonNullable<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RoutingInfo other = (RoutingInfo) o;
        return 
            Objects.deepEquals(this.bankCode, other.bankCode) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bankCode,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RoutingInfo.class,
                "bankCode", bankCode,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> bankCode = JsonNullable.undefined();
 
        private JsonNullable<? extends Type> type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The numeric identifier of the routing number
         */
        public Builder bankCode(String bankCode) {
            Utils.checkNotNull(bankCode, "bankCode");
            this.bankCode = JsonNullable.of(bankCode);
            return this;
        }

        /**
         * The numeric identifier of the routing number
         */
        public Builder bankCode(JsonNullable<String> bankCode) {
            Utils.checkNotNull(bankCode, "bankCode");
            this.bankCode = bankCode;
            return this;
        }

        /**
         * The type of routing number.
         */
        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The type of routing number.
         */
        public Builder type(JsonNullable<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public RoutingInfo build() {
            if (type == null) {
                type = _SINGLETON_VALUE_Type.value();
            }            return new RoutingInfo(
                bankCode,
                type);
        }

        private static final LazySingletonValue<JsonNullable<? extends Type>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"bankcode\"",
                        new TypeReference<JsonNullable<? extends Type>>() {});
    }
}

