/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class AccountBalance {

    /**
     * The account's current balance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    private Optional<? extends Double> available;

    /**
     * The currency of the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    /**
     * Funds that are not yet available in the balance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending")
    private Optional<? extends Double> pending;

    /**
     * Funds reserved as holdings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reserved")
    private Optional<? extends java.lang.Object> reserved;

    public AccountBalance(
            @JsonProperty("available") Optional<? extends Double> available,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("pending") Optional<? extends Double> pending,
            @JsonProperty("reserved") Optional<? extends java.lang.Object> reserved) {
        Utils.checkNotNull(available, "available");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(pending, "pending");
        Utils.checkNotNull(reserved, "reserved");
        this.available = available;
        this.currency = currency;
        this.pending = pending;
        this.reserved = reserved;
    }

    /**
     * The account's current balance
     */
    public Optional<? extends Double> available() {
        return available;
    }

    /**
     * The currency of the account
     */
    public Optional<? extends String> currency() {
        return currency;
    }

    /**
     * Funds that are not yet available in the balance
     */
    public Optional<? extends Double> pending() {
        return pending;
    }

    /**
     * Funds reserved as holdings
     */
    public Optional<? extends java.lang.Object> reserved() {
        return reserved;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The account's current balance
     */
    public AccountBalance withAvailable(double available) {
        Utils.checkNotNull(available, "available");
        this.available = Optional.ofNullable(available);
        return this;
    }
    
    /**
     * The account's current balance
     */
    public AccountBalance withAvailable(Optional<? extends Double> available) {
        Utils.checkNotNull(available, "available");
        this.available = available;
        return this;
    }

    /**
     * The currency of the account
     */
    public AccountBalance withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }
    
    /**
     * The currency of the account
     */
    public AccountBalance withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Funds that are not yet available in the balance
     */
    public AccountBalance withPending(double pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = Optional.ofNullable(pending);
        return this;
    }
    
    /**
     * Funds that are not yet available in the balance
     */
    public AccountBalance withPending(Optional<? extends Double> pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = pending;
        return this;
    }

    /**
     * Funds reserved as holdings
     */
    public AccountBalance withReserved(java.lang.Object reserved) {
        Utils.checkNotNull(reserved, "reserved");
        this.reserved = Optional.ofNullable(reserved);
        return this;
    }
    
    /**
     * Funds reserved as holdings
     */
    public AccountBalance withReserved(Optional<? extends java.lang.Object> reserved) {
        Utils.checkNotNull(reserved, "reserved");
        this.reserved = reserved;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountBalance other = (AccountBalance) o;
        return 
            java.util.Objects.deepEquals(this.available, other.available) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.pending, other.pending) &&
            java.util.Objects.deepEquals(this.reserved, other.reserved);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            available,
            currency,
            pending,
            reserved);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountBalance.class,
                "available", available,
                "currency", currency,
                "pending", pending,
                "reserved", reserved);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> available = Optional.empty();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private Optional<? extends Double> pending = Optional.empty();
 
        private Optional<? extends java.lang.Object> reserved = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The account's current balance
         */
        public Builder available(double available) {
            Utils.checkNotNull(available, "available");
            this.available = Optional.ofNullable(available);
            return this;
        }
        
        /**
         * The account's current balance
         */
        public Builder available(Optional<? extends Double> available) {
            Utils.checkNotNull(available, "available");
            this.available = available;
            return this;
        }

        /**
         * The currency of the account
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }
        
        /**
         * The currency of the account
         */
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Funds that are not yet available in the balance
         */
        public Builder pending(double pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = Optional.ofNullable(pending);
            return this;
        }
        
        /**
         * Funds that are not yet available in the balance
         */
        public Builder pending(Optional<? extends Double> pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = pending;
            return this;
        }

        /**
         * Funds reserved as holdings
         */
        public Builder reserved(java.lang.Object reserved) {
            Utils.checkNotNull(reserved, "reserved");
            this.reserved = Optional.ofNullable(reserved);
            return this;
        }
        
        /**
         * Funds reserved as holdings
         */
        public Builder reserved(Optional<? extends java.lang.Object> reserved) {
            Utils.checkNotNull(reserved, "reserved");
            this.reserved = reserved;
            return this;
        }
        
        public AccountBalance build() {
            return new AccountBalance(
                available,
                currency,
                pending,
                reserved);
        }
    }
}

