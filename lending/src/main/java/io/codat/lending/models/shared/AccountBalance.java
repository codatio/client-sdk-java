/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;


public class AccountBalance {

    /**
     * The account's current balance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    private Optional<? extends BigDecimal> available;

    /**
     * The currency of the account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    /**
     * Funds that are not yet available in the balance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending")
    private Optional<? extends BigDecimal> pending;

    /**
     * Funds reserved as holdings
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reserved")
    private Optional<? extends Object> reserved;

    @JsonCreator
    public AccountBalance(
            @JsonProperty("available") Optional<? extends BigDecimal> available,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("pending") Optional<? extends BigDecimal> pending,
            @JsonProperty("reserved") Optional<? extends Object> reserved) {
        Utils.checkNotNull(available, "available");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(pending, "pending");
        Utils.checkNotNull(reserved, "reserved");
        this.available = available;
        this.currency = currency;
        this.pending = pending;
        this.reserved = reserved;
    }
    
    public AccountBalance() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The account's current balance
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> available() {
        return (Optional<BigDecimal>) available;
    }

    /**
     * The currency of the account
     */
    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    /**
     * Funds that are not yet available in the balance
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> pending() {
        return (Optional<BigDecimal>) pending;
    }

    /**
     * Funds reserved as holdings
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> reserved() {
        return (Optional<Object>) reserved;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The account's current balance
     */
    public AccountBalance withAvailable(BigDecimal available) {
        Utils.checkNotNull(available, "available");
        this.available = Optional.ofNullable(available);
        return this;
    }

        /**
         * The account's current balance
         */
    public AccountBalance withAvailable(double available) {
        this.available = Optional.of(BigDecimal.valueOf(available));
        return this;
    }

    /**
     * The account's current balance
     */
    public AccountBalance withAvailable(Optional<? extends BigDecimal> available) {
        Utils.checkNotNull(available, "available");
        this.available = available;
        return this;
    }

    /**
     * The currency of the account
     */
    public AccountBalance withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * The currency of the account
     */
    public AccountBalance withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Funds that are not yet available in the balance
     */
    public AccountBalance withPending(BigDecimal pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = Optional.ofNullable(pending);
        return this;
    }

        /**
         * Funds that are not yet available in the balance
         */
    public AccountBalance withPending(double pending) {
        this.pending = Optional.of(BigDecimal.valueOf(pending));
        return this;
    }

    /**
     * Funds that are not yet available in the balance
     */
    public AccountBalance withPending(Optional<? extends BigDecimal> pending) {
        Utils.checkNotNull(pending, "pending");
        this.pending = pending;
        return this;
    }

    /**
     * Funds reserved as holdings
     */
    public AccountBalance withReserved(Object reserved) {
        Utils.checkNotNull(reserved, "reserved");
        this.reserved = Optional.ofNullable(reserved);
        return this;
    }

    /**
     * Funds reserved as holdings
     */
    public AccountBalance withReserved(Optional<? extends Object> reserved) {
        Utils.checkNotNull(reserved, "reserved");
        this.reserved = reserved;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountBalance other = (AccountBalance) o;
        return 
            Objects.deepEquals(this.available, other.available) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.pending, other.pending) &&
            Objects.deepEquals(this.reserved, other.reserved);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            available,
            currency,
            pending,
            reserved);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountBalance.class,
                "available", available,
                "currency", currency,
                "pending", pending,
                "reserved", reserved);
    }
    
    public final static class Builder {
 
        private Optional<? extends BigDecimal> available = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<? extends BigDecimal> pending = Optional.empty();
 
        private Optional<? extends Object> reserved = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The account's current balance
         */
        public Builder available(BigDecimal available) {
            Utils.checkNotNull(available, "available");
            this.available = Optional.ofNullable(available);
            return this;
        }

        /**
         * The account's current balance
         */
        public Builder available(double available) {
            this.available = Optional.of(BigDecimal.valueOf(available));
            return this;
        }

        /**
         * The account's current balance
         */
        public Builder available(Optional<? extends BigDecimal> available) {
            Utils.checkNotNull(available, "available");
            this.available = available;
            return this;
        }

        /**
         * The currency of the account
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * The currency of the account
         */
        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Funds that are not yet available in the balance
         */
        public Builder pending(BigDecimal pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = Optional.ofNullable(pending);
            return this;
        }

        /**
         * Funds that are not yet available in the balance
         */
        public Builder pending(double pending) {
            this.pending = Optional.of(BigDecimal.valueOf(pending));
            return this;
        }

        /**
         * Funds that are not yet available in the balance
         */
        public Builder pending(Optional<? extends BigDecimal> pending) {
            Utils.checkNotNull(pending, "pending");
            this.pending = pending;
            return this;
        }

        /**
         * Funds reserved as holdings
         */
        public Builder reserved(Object reserved) {
            Utils.checkNotNull(reserved, "reserved");
            this.reserved = Optional.ofNullable(reserved);
            return this;
        }

        /**
         * Funds reserved as holdings
         */
        public Builder reserved(Optional<? extends Object> reserved) {
            Utils.checkNotNull(reserved, "reserved");
            this.reserved = reserved;
            return this;
        }
        
        public AccountBalance build() {
            return new AccountBalance(
                available,
                currency,
                pending,
                reserved);
        }
    }
}

