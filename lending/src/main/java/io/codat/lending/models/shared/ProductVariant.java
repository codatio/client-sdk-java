/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * ProductVariant - Represents a variation of a product available for sale, for example an item of clothing that may be available for sale in multiple sizes and colors.
 * 
 */

public class ProductVariant {

    /**
     * Unique product number of the variant. This might be a barcode, UPC, ISBN, etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("barcode")
    private Optional<String> barcode;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdDate")
    private Optional<String> createdDate;

    /**
     * A unique, persistent identifier for this record
     */
    @JsonProperty("id")
    private String id;

    /**
     * Information about the total inventory as well as the locations inventory is in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inventory")
    private Optional<? extends ProductInventory> inventory;

    /**
     * Whether sales taxes are enabled for this product variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isTaxEnabled")
    private Optional<Boolean> isTaxEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<String> modifiedDate;

    /**
     * Name of the product recorded in the commerce or point of sale platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Prices for the product variants in different currencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prices")
    private Optional<? extends List<ProductPrice>> prices;

    /**
     * Indicates whether or not the product requires physical delivery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingRequired")
    private Optional<Boolean> shippingRequired;

    /**
     * SKU (stock keeping unit) of the variant, as defined by the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sku")
    private Optional<String> sku;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<String> sourceModifiedDate;

    /**
     * The status of the product variant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ProductVariantStatus> status;

    /**
     * Unit of measure for the variant, such as `kg` or `meters`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unitOfMeasure")
    private Optional<String> unitOfMeasure;

    /**
     * VAT rate for the product variant if sales taxes are enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vatPercentage")
    private Optional<? extends BigDecimal> vatPercentage;

    @JsonCreator
    public ProductVariant(
            @JsonProperty("barcode") Optional<String> barcode,
            @JsonProperty("createdDate") Optional<String> createdDate,
            @JsonProperty("id") String id,
            @JsonProperty("inventory") Optional<? extends ProductInventory> inventory,
            @JsonProperty("isTaxEnabled") Optional<Boolean> isTaxEnabled,
            @JsonProperty("modifiedDate") Optional<String> modifiedDate,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("prices") Optional<? extends List<ProductPrice>> prices,
            @JsonProperty("shippingRequired") Optional<Boolean> shippingRequired,
            @JsonProperty("sku") Optional<String> sku,
            @JsonProperty("sourceModifiedDate") Optional<String> sourceModifiedDate,
            @JsonProperty("status") Optional<? extends ProductVariantStatus> status,
            @JsonProperty("unitOfMeasure") Optional<String> unitOfMeasure,
            @JsonProperty("vatPercentage") Optional<? extends BigDecimal> vatPercentage) {
        Utils.checkNotNull(barcode, "barcode");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(inventory, "inventory");
        Utils.checkNotNull(isTaxEnabled, "isTaxEnabled");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(prices, "prices");
        Utils.checkNotNull(shippingRequired, "shippingRequired");
        Utils.checkNotNull(sku, "sku");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        Utils.checkNotNull(vatPercentage, "vatPercentage");
        this.barcode = barcode;
        this.createdDate = createdDate;
        this.id = id;
        this.inventory = inventory;
        this.isTaxEnabled = isTaxEnabled;
        this.modifiedDate = modifiedDate;
        this.name = name;
        this.prices = prices;
        this.shippingRequired = shippingRequired;
        this.sku = sku;
        this.sourceModifiedDate = sourceModifiedDate;
        this.status = status;
        this.unitOfMeasure = unitOfMeasure;
        this.vatPercentage = vatPercentage;
    }
    
    public ProductVariant(
            String id) {
        this(Optional.empty(), Optional.empty(), id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique product number of the variant. This might be a barcode, UPC, ISBN, etc.
     */
    @JsonIgnore
    public Optional<String> barcode() {
        return barcode;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> createdDate() {
        return createdDate;
    }

    /**
     * A unique, persistent identifier for this record
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Information about the total inventory as well as the locations inventory is in.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductInventory> inventory() {
        return (Optional<ProductInventory>) inventory;
    }

    /**
     * Whether sales taxes are enabled for this product variant.
     */
    @JsonIgnore
    public Optional<Boolean> isTaxEnabled() {
        return isTaxEnabled;
    }

    @JsonIgnore
    public Optional<String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * Name of the product recorded in the commerce or point of sale platform.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Prices for the product variants in different currencies.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ProductPrice>> prices() {
        return (Optional<List<ProductPrice>>) prices;
    }

    /**
     * Indicates whether or not the product requires physical delivery.
     */
    @JsonIgnore
    public Optional<Boolean> shippingRequired() {
        return shippingRequired;
    }

    /**
     * SKU (stock keeping unit) of the variant, as defined by the merchant.
     */
    @JsonIgnore
    public Optional<String> sku() {
        return sku;
    }

    @JsonIgnore
    public Optional<String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * The status of the product variant.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProductVariantStatus> status() {
        return (Optional<ProductVariantStatus>) status;
    }

    /**
     * Unit of measure for the variant, such as `kg` or `meters`.
     */
    @JsonIgnore
    public Optional<String> unitOfMeasure() {
        return unitOfMeasure;
    }

    /**
     * VAT rate for the product variant if sales taxes are enabled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> vatPercentage() {
        return (Optional<BigDecimal>) vatPercentage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique product number of the variant. This might be a barcode, UPC, ISBN, etc.
     */
    public ProductVariant withBarcode(String barcode) {
        Utils.checkNotNull(barcode, "barcode");
        this.barcode = Optional.ofNullable(barcode);
        return this;
    }

    /**
     * Unique product number of the variant. This might be a barcode, UPC, ISBN, etc.
     */
    public ProductVariant withBarcode(Optional<String> barcode) {
        Utils.checkNotNull(barcode, "barcode");
        this.barcode = barcode;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ProductVariant withCreatedDate(String createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = Optional.ofNullable(createdDate);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ProductVariant withCreatedDate(Optional<String> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    /**
     * A unique, persistent identifier for this record
     */
    public ProductVariant withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Information about the total inventory as well as the locations inventory is in.
     */
    public ProductVariant withInventory(ProductInventory inventory) {
        Utils.checkNotNull(inventory, "inventory");
        this.inventory = Optional.ofNullable(inventory);
        return this;
    }

    /**
     * Information about the total inventory as well as the locations inventory is in.
     */
    public ProductVariant withInventory(Optional<? extends ProductInventory> inventory) {
        Utils.checkNotNull(inventory, "inventory");
        this.inventory = inventory;
        return this;
    }

    /**
     * Whether sales taxes are enabled for this product variant.
     */
    public ProductVariant withIsTaxEnabled(boolean isTaxEnabled) {
        Utils.checkNotNull(isTaxEnabled, "isTaxEnabled");
        this.isTaxEnabled = Optional.ofNullable(isTaxEnabled);
        return this;
    }

    /**
     * Whether sales taxes are enabled for this product variant.
     */
    public ProductVariant withIsTaxEnabled(Optional<Boolean> isTaxEnabled) {
        Utils.checkNotNull(isTaxEnabled, "isTaxEnabled");
        this.isTaxEnabled = isTaxEnabled;
        return this;
    }

    public ProductVariant withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }

    public ProductVariant withModifiedDate(Optional<String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * Name of the product recorded in the commerce or point of sale platform.
     */
    public ProductVariant withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the product recorded in the commerce or point of sale platform.
     */
    public ProductVariant withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Prices for the product variants in different currencies.
     */
    public ProductVariant withPrices(List<ProductPrice> prices) {
        Utils.checkNotNull(prices, "prices");
        this.prices = Optional.ofNullable(prices);
        return this;
    }

    /**
     * Prices for the product variants in different currencies.
     */
    public ProductVariant withPrices(Optional<? extends List<ProductPrice>> prices) {
        Utils.checkNotNull(prices, "prices");
        this.prices = prices;
        return this;
    }

    /**
     * Indicates whether or not the product requires physical delivery.
     */
    public ProductVariant withShippingRequired(boolean shippingRequired) {
        Utils.checkNotNull(shippingRequired, "shippingRequired");
        this.shippingRequired = Optional.ofNullable(shippingRequired);
        return this;
    }

    /**
     * Indicates whether or not the product requires physical delivery.
     */
    public ProductVariant withShippingRequired(Optional<Boolean> shippingRequired) {
        Utils.checkNotNull(shippingRequired, "shippingRequired");
        this.shippingRequired = shippingRequired;
        return this;
    }

    /**
     * SKU (stock keeping unit) of the variant, as defined by the merchant.
     */
    public ProductVariant withSku(String sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = Optional.ofNullable(sku);
        return this;
    }

    /**
     * SKU (stock keeping unit) of the variant, as defined by the merchant.
     */
    public ProductVariant withSku(Optional<String> sku) {
        Utils.checkNotNull(sku, "sku");
        this.sku = sku;
        return this;
    }

    public ProductVariant withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }

    public ProductVariant withSourceModifiedDate(Optional<String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * The status of the product variant.
     */
    public ProductVariant withStatus(ProductVariantStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the product variant.
     */
    public ProductVariant withStatus(Optional<? extends ProductVariantStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Unit of measure for the variant, such as `kg` or `meters`.
     */
    public ProductVariant withUnitOfMeasure(String unitOfMeasure) {
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.unitOfMeasure = Optional.ofNullable(unitOfMeasure);
        return this;
    }

    /**
     * Unit of measure for the variant, such as `kg` or `meters`.
     */
    public ProductVariant withUnitOfMeasure(Optional<String> unitOfMeasure) {
        Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
        this.unitOfMeasure = unitOfMeasure;
        return this;
    }

    /**
     * VAT rate for the product variant if sales taxes are enabled.
     */
    public ProductVariant withVatPercentage(BigDecimal vatPercentage) {
        Utils.checkNotNull(vatPercentage, "vatPercentage");
        this.vatPercentage = Optional.ofNullable(vatPercentage);
        return this;
    }

        /**
         * VAT rate for the product variant if sales taxes are enabled.
         */
    public ProductVariant withVatPercentage(double vatPercentage) {
        this.vatPercentage = Optional.of(BigDecimal.valueOf(vatPercentage));
        return this;
    }

    /**
     * VAT rate for the product variant if sales taxes are enabled.
     */
    public ProductVariant withVatPercentage(Optional<? extends BigDecimal> vatPercentage) {
        Utils.checkNotNull(vatPercentage, "vatPercentage");
        this.vatPercentage = vatPercentage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductVariant other = (ProductVariant) o;
        return 
            Objects.deepEquals(this.barcode, other.barcode) &&
            Objects.deepEquals(this.createdDate, other.createdDate) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.inventory, other.inventory) &&
            Objects.deepEquals(this.isTaxEnabled, other.isTaxEnabled) &&
            Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.prices, other.prices) &&
            Objects.deepEquals(this.shippingRequired, other.shippingRequired) &&
            Objects.deepEquals(this.sku, other.sku) &&
            Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.unitOfMeasure, other.unitOfMeasure) &&
            Objects.deepEquals(this.vatPercentage, other.vatPercentage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            barcode,
            createdDate,
            id,
            inventory,
            isTaxEnabled,
            modifiedDate,
            name,
            prices,
            shippingRequired,
            sku,
            sourceModifiedDate,
            status,
            unitOfMeasure,
            vatPercentage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductVariant.class,
                "barcode", barcode,
                "createdDate", createdDate,
                "id", id,
                "inventory", inventory,
                "isTaxEnabled", isTaxEnabled,
                "modifiedDate", modifiedDate,
                "name", name,
                "prices", prices,
                "shippingRequired", shippingRequired,
                "sku", sku,
                "sourceModifiedDate", sourceModifiedDate,
                "status", status,
                "unitOfMeasure", unitOfMeasure,
                "vatPercentage", vatPercentage);
    }
    
    public final static class Builder {
 
        private Optional<String> barcode = Optional.empty();
 
        private Optional<String> createdDate = Optional.empty();
 
        private String id;
 
        private Optional<? extends ProductInventory> inventory = Optional.empty();
 
        private Optional<Boolean> isTaxEnabled = Optional.empty();
 
        private Optional<String> modifiedDate = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends List<ProductPrice>> prices = Optional.empty();
 
        private Optional<Boolean> shippingRequired = Optional.empty();
 
        private Optional<String> sku = Optional.empty();
 
        private Optional<String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends ProductVariantStatus> status = Optional.empty();
 
        private Optional<String> unitOfMeasure = Optional.empty();
 
        private Optional<? extends BigDecimal> vatPercentage = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique product number of the variant. This might be a barcode, UPC, ISBN, etc.
         */
        public Builder barcode(String barcode) {
            Utils.checkNotNull(barcode, "barcode");
            this.barcode = Optional.ofNullable(barcode);
            return this;
        }

        /**
         * Unique product number of the variant. This might be a barcode, UPC, ISBN, etc.
         */
        public Builder barcode(Optional<String> barcode) {
            Utils.checkNotNull(barcode, "barcode");
            this.barcode = barcode;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder createdDate(String createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = Optional.ofNullable(createdDate);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder createdDate(Optional<String> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }

        /**
         * A unique, persistent identifier for this record
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Information about the total inventory as well as the locations inventory is in.
         */
        public Builder inventory(ProductInventory inventory) {
            Utils.checkNotNull(inventory, "inventory");
            this.inventory = Optional.ofNullable(inventory);
            return this;
        }

        /**
         * Information about the total inventory as well as the locations inventory is in.
         */
        public Builder inventory(Optional<? extends ProductInventory> inventory) {
            Utils.checkNotNull(inventory, "inventory");
            this.inventory = inventory;
            return this;
        }

        /**
         * Whether sales taxes are enabled for this product variant.
         */
        public Builder isTaxEnabled(boolean isTaxEnabled) {
            Utils.checkNotNull(isTaxEnabled, "isTaxEnabled");
            this.isTaxEnabled = Optional.ofNullable(isTaxEnabled);
            return this;
        }

        /**
         * Whether sales taxes are enabled for this product variant.
         */
        public Builder isTaxEnabled(Optional<Boolean> isTaxEnabled) {
            Utils.checkNotNull(isTaxEnabled, "isTaxEnabled");
            this.isTaxEnabled = isTaxEnabled;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        public Builder modifiedDate(Optional<String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * Name of the product recorded in the commerce or point of sale platform.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the product recorded in the commerce or point of sale platform.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Prices for the product variants in different currencies.
         */
        public Builder prices(List<ProductPrice> prices) {
            Utils.checkNotNull(prices, "prices");
            this.prices = Optional.ofNullable(prices);
            return this;
        }

        /**
         * Prices for the product variants in different currencies.
         */
        public Builder prices(Optional<? extends List<ProductPrice>> prices) {
            Utils.checkNotNull(prices, "prices");
            this.prices = prices;
            return this;
        }

        /**
         * Indicates whether or not the product requires physical delivery.
         */
        public Builder shippingRequired(boolean shippingRequired) {
            Utils.checkNotNull(shippingRequired, "shippingRequired");
            this.shippingRequired = Optional.ofNullable(shippingRequired);
            return this;
        }

        /**
         * Indicates whether or not the product requires physical delivery.
         */
        public Builder shippingRequired(Optional<Boolean> shippingRequired) {
            Utils.checkNotNull(shippingRequired, "shippingRequired");
            this.shippingRequired = shippingRequired;
            return this;
        }

        /**
         * SKU (stock keeping unit) of the variant, as defined by the merchant.
         */
        public Builder sku(String sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = Optional.ofNullable(sku);
            return this;
        }

        /**
         * SKU (stock keeping unit) of the variant, as defined by the merchant.
         */
        public Builder sku(Optional<String> sku) {
            Utils.checkNotNull(sku, "sku");
            this.sku = sku;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(Optional<String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * The status of the product variant.
         */
        public Builder status(ProductVariantStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the product variant.
         */
        public Builder status(Optional<? extends ProductVariantStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Unit of measure for the variant, such as `kg` or `meters`.
         */
        public Builder unitOfMeasure(String unitOfMeasure) {
            Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
            this.unitOfMeasure = Optional.ofNullable(unitOfMeasure);
            return this;
        }

        /**
         * Unit of measure for the variant, such as `kg` or `meters`.
         */
        public Builder unitOfMeasure(Optional<String> unitOfMeasure) {
            Utils.checkNotNull(unitOfMeasure, "unitOfMeasure");
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }

        /**
         * VAT rate for the product variant if sales taxes are enabled.
         */
        public Builder vatPercentage(BigDecimal vatPercentage) {
            Utils.checkNotNull(vatPercentage, "vatPercentage");
            this.vatPercentage = Optional.ofNullable(vatPercentage);
            return this;
        }

        /**
         * VAT rate for the product variant if sales taxes are enabled.
         */
        public Builder vatPercentage(double vatPercentage) {
            this.vatPercentage = Optional.of(BigDecimal.valueOf(vatPercentage));
            return this;
        }

        /**
         * VAT rate for the product variant if sales taxes are enabled.
         */
        public Builder vatPercentage(Optional<? extends BigDecimal> vatPercentage) {
            Utils.checkNotNull(vatPercentage, "vatPercentage");
            this.vatPercentage = vatPercentage;
            return this;
        }
        
        public ProductVariant build() {
            return new ProductVariant(
                barcode,
                createdDate,
                id,
                inventory,
                isTaxEnabled,
                modifiedDate,
                name,
                prices,
                shippingRequired,
                sku,
                sourceModifiedDate,
                status,
                unitOfMeasure,
                vatPercentage);
        }
    }
}

