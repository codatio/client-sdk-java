/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;

/**
 * TaxRateReference - Data types that reference a tax rate, for example invoice and bill line items, use a taxRateRef that includes the ID and name of the linked tax rate.
 * 
 * Found on:
 * 
 * - Bill line items
 * - Bill Credit Note line items
 * - Credit Note line items
 * - Direct incomes line items
 * - Invoice line items
 * - Items
 */

public class TaxRateReference {

    /**
     * Applicable tax rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveTaxRate")
    private Optional<? extends BigDecimal> effectiveTaxRate;

    /**
     * Unique identifier for the tax rate in the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Name of the tax rate in the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonCreator
    public TaxRateReference(
            @JsonProperty("effectiveTaxRate") Optional<? extends BigDecimal> effectiveTaxRate,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name) {
        Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        this.effectiveTaxRate = effectiveTaxRate;
        this.id = id;
        this.name = name;
    }
    
    public TaxRateReference() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Applicable tax rate.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> effectiveTaxRate() {
        return (Optional<BigDecimal>) effectiveTaxRate;
    }

    /**
     * Unique identifier for the tax rate in the accounting software.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Name of the tax rate in the accounting software.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Applicable tax rate.
     */
    public TaxRateReference withEffectiveTaxRate(BigDecimal effectiveTaxRate) {
        Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
        this.effectiveTaxRate = Optional.ofNullable(effectiveTaxRate);
        return this;
    }

        /**
         * Applicable tax rate.
         */
    public TaxRateReference withEffectiveTaxRate(double effectiveTaxRate) {
        this.effectiveTaxRate = Optional.of(BigDecimal.valueOf(effectiveTaxRate));
        return this;
    }

    /**
     * Applicable tax rate.
     */
    public TaxRateReference withEffectiveTaxRate(Optional<? extends BigDecimal> effectiveTaxRate) {
        Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
        this.effectiveTaxRate = effectiveTaxRate;
        return this;
    }

    /**
     * Unique identifier for the tax rate in the accounting software.
     */
    public TaxRateReference withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier for the tax rate in the accounting software.
     */
    public TaxRateReference withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the tax rate in the accounting software.
     */
    public TaxRateReference withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the tax rate in the accounting software.
     */
    public TaxRateReference withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxRateReference other = (TaxRateReference) o;
        return 
            Objects.deepEquals(this.effectiveTaxRate, other.effectiveTaxRate) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            effectiveTaxRate,
            id,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxRateReference.class,
                "effectiveTaxRate", effectiveTaxRate,
                "id", id,
                "name", name);
    }
    
    public final static class Builder {
 
        private Optional<? extends BigDecimal> effectiveTaxRate = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Applicable tax rate.
         */
        public Builder effectiveTaxRate(BigDecimal effectiveTaxRate) {
            Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
            this.effectiveTaxRate = Optional.ofNullable(effectiveTaxRate);
            return this;
        }

        /**
         * Applicable tax rate.
         */
        public Builder effectiveTaxRate(double effectiveTaxRate) {
            this.effectiveTaxRate = Optional.of(BigDecimal.valueOf(effectiveTaxRate));
            return this;
        }

        /**
         * Applicable tax rate.
         */
        public Builder effectiveTaxRate(Optional<? extends BigDecimal> effectiveTaxRate) {
            Utils.checkNotNull(effectiveTaxRate, "effectiveTaxRate");
            this.effectiveTaxRate = effectiveTaxRate;
            return this;
        }

        /**
         * Unique identifier for the tax rate in the accounting software.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier for the tax rate in the accounting software.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the tax rate in the accounting software.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the tax rate in the accounting software.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public TaxRateReference build() {
            return new TaxRateReference(
                effectiveTaxRate,
                id,
                name);
        }
    }
}

