/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * BankingTransaction - The Banking Transactions data type provides an immutable source of up-to-date information on income and expenditure.
 * 
 * Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
 * 
 * View the coverage for banking transactions in the [Data Coverage Explorer](https://knowledge.codat.io/supported-features/banking?view=tab-by-data-type&amp;dataType=banking-transactions).
 */

public class BankingTransaction {

    /**
     * The unique identifier of the bank account.
     */
    @JsonProperty("accountId")
    private String accountId;

    /**
     * The amount of the bank transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Double> amount;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizedDate")
    private Optional<? extends String> authorizedDate;

    /**
     * Code to identify the underlying transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<? extends TransactionCode> code;

    /**
     * The currency of the bank transaction.
     */
    @JsonProperty("currency")
    private String currency;

    /**
     * The description of the bank transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<? extends String> description;

    /**
     * The unique identifier of the bank transaction.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The name of the merchant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantName")
    private JsonNullable<? extends String> merchantName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<? extends String> modifiedDate;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postedDate")
    private Optional<? extends String> postedDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<? extends String> sourceModifiedDate;

    /**
     * An object of bank transaction category reference data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionCategoryRef")
    private Optional<? extends TransactionCategoryRef> transactionCategoryRef;

    public BankingTransaction(
            @JsonProperty("accountId") String accountId,
            @JsonProperty("amount") Optional<? extends Double> amount,
            @JsonProperty("authorizedDate") Optional<? extends String> authorizedDate,
            @JsonProperty("code") Optional<? extends TransactionCode> code,
            @JsonProperty("currency") String currency,
            @JsonProperty("description") JsonNullable<? extends String> description,
            @JsonProperty("id") String id,
            @JsonProperty("merchantName") JsonNullable<? extends String> merchantName,
            @JsonProperty("modifiedDate") Optional<? extends String> modifiedDate,
            @JsonProperty("postedDate") Optional<? extends String> postedDate,
            @JsonProperty("sourceModifiedDate") Optional<? extends String> sourceModifiedDate,
            @JsonProperty("transactionCategoryRef") Optional<? extends TransactionCategoryRef> transactionCategoryRef) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(authorizedDate, "authorizedDate");
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(merchantName, "merchantName");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(postedDate, "postedDate");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(transactionCategoryRef, "transactionCategoryRef");
        this.accountId = accountId;
        this.amount = amount;
        this.authorizedDate = authorizedDate;
        this.code = code;
        this.currency = currency;
        this.description = description;
        this.id = id;
        this.merchantName = merchantName;
        this.modifiedDate = modifiedDate;
        this.postedDate = postedDate;
        this.sourceModifiedDate = sourceModifiedDate;
        this.transactionCategoryRef = transactionCategoryRef;
    }

    /**
     * The unique identifier of the bank account.
     */
    public String accountId() {
        return accountId;
    }

    /**
     * The amount of the bank transaction.
     */
    public Optional<? extends Double> amount() {
        return amount;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> authorizedDate() {
        return authorizedDate;
    }

    /**
     * Code to identify the underlying transaction.
     */
    public Optional<? extends TransactionCode> code() {
        return code;
    }

    /**
     * The currency of the bank transaction.
     */
    public String currency() {
        return currency;
    }

    /**
     * The description of the bank transaction.
     */
    public JsonNullable<? extends String> description() {
        return description;
    }

    /**
     * The unique identifier of the bank transaction.
     */
    public String id() {
        return id;
    }

    /**
     * The name of the merchant.
     */
    public JsonNullable<? extends String> merchantName() {
        return merchantName;
    }

    public Optional<? extends String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> postedDate() {
        return postedDate;
    }

    public Optional<? extends String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * An object of bank transaction category reference data.
     */
    public Optional<? extends TransactionCategoryRef> transactionCategoryRef() {
        return transactionCategoryRef;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The unique identifier of the bank account.
     */
    public BankingTransaction withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * The amount of the bank transaction.
     */
    public BankingTransaction withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }
    
    /**
     * The amount of the bank transaction.
     */
    public BankingTransaction withAmount(Optional<? extends Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public BankingTransaction withAuthorizedDate(String authorizedDate) {
        Utils.checkNotNull(authorizedDate, "authorizedDate");
        this.authorizedDate = Optional.ofNullable(authorizedDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public BankingTransaction withAuthorizedDate(Optional<? extends String> authorizedDate) {
        Utils.checkNotNull(authorizedDate, "authorizedDate");
        this.authorizedDate = authorizedDate;
        return this;
    }

    /**
     * Code to identify the underlying transaction.
     */
    public BankingTransaction withCode(TransactionCode code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }
    
    /**
     * Code to identify the underlying transaction.
     */
    public BankingTransaction withCode(Optional<? extends TransactionCode> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    /**
     * The currency of the bank transaction.
     */
    public BankingTransaction withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The description of the bank transaction.
     */
    public BankingTransaction withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * The description of the bank transaction.
     */
    public BankingTransaction withDescription(JsonNullable<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The unique identifier of the bank transaction.
     */
    public BankingTransaction withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The name of the merchant.
     */
    public BankingTransaction withMerchantName(String merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = JsonNullable.of(merchantName);
        return this;
    }

    /**
     * The name of the merchant.
     */
    public BankingTransaction withMerchantName(JsonNullable<? extends String> merchantName) {
        Utils.checkNotNull(merchantName, "merchantName");
        this.merchantName = merchantName;
        return this;
    }

    public BankingTransaction withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }
    
    public BankingTransaction withModifiedDate(Optional<? extends String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public BankingTransaction withPostedDate(String postedDate) {
        Utils.checkNotNull(postedDate, "postedDate");
        this.postedDate = Optional.ofNullable(postedDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public BankingTransaction withPostedDate(Optional<? extends String> postedDate) {
        Utils.checkNotNull(postedDate, "postedDate");
        this.postedDate = postedDate;
        return this;
    }

    public BankingTransaction withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }
    
    public BankingTransaction withSourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * An object of bank transaction category reference data.
     */
    public BankingTransaction withTransactionCategoryRef(TransactionCategoryRef transactionCategoryRef) {
        Utils.checkNotNull(transactionCategoryRef, "transactionCategoryRef");
        this.transactionCategoryRef = Optional.ofNullable(transactionCategoryRef);
        return this;
    }
    
    /**
     * An object of bank transaction category reference data.
     */
    public BankingTransaction withTransactionCategoryRef(Optional<? extends TransactionCategoryRef> transactionCategoryRef) {
        Utils.checkNotNull(transactionCategoryRef, "transactionCategoryRef");
        this.transactionCategoryRef = transactionCategoryRef;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankingTransaction other = (BankingTransaction) o;
        return 
            java.util.Objects.deepEquals(this.accountId, other.accountId) &&
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.authorizedDate, other.authorizedDate) &&
            java.util.Objects.deepEquals(this.code, other.code) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.merchantName, other.merchantName) &&
            java.util.Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            java.util.Objects.deepEquals(this.postedDate, other.postedDate) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            java.util.Objects.deepEquals(this.transactionCategoryRef, other.transactionCategoryRef);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountId,
            amount,
            authorizedDate,
            code,
            currency,
            description,
            id,
            merchantName,
            modifiedDate,
            postedDate,
            sourceModifiedDate,
            transactionCategoryRef);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankingTransaction.class,
                "accountId", accountId,
                "amount", amount,
                "authorizedDate", authorizedDate,
                "code", code,
                "currency", currency,
                "description", description,
                "id", id,
                "merchantName", merchantName,
                "modifiedDate", modifiedDate,
                "postedDate", postedDate,
                "sourceModifiedDate", sourceModifiedDate,
                "transactionCategoryRef", transactionCategoryRef);
    }
    
    public final static class Builder {
 
        private String accountId;
 
        private Optional<? extends Double> amount = Optional.empty();
 
        private Optional<? extends String> authorizedDate = Optional.empty();
 
        private Optional<? extends TransactionCode> code = Optional.empty();
 
        private String currency;
 
        private JsonNullable<? extends String> description = JsonNullable.undefined();
 
        private String id;
 
        private JsonNullable<? extends String> merchantName = JsonNullable.undefined();
 
        private Optional<? extends String> modifiedDate = Optional.empty();
 
        private Optional<? extends String> postedDate = Optional.empty();
 
        private Optional<? extends String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends TransactionCategoryRef> transactionCategoryRef = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier of the bank account.
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        /**
         * The amount of the bank transaction.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }
        
        /**
         * The amount of the bank transaction.
         */
        public Builder amount(Optional<? extends Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder authorizedDate(String authorizedDate) {
            Utils.checkNotNull(authorizedDate, "authorizedDate");
            this.authorizedDate = Optional.ofNullable(authorizedDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder authorizedDate(Optional<? extends String> authorizedDate) {
            Utils.checkNotNull(authorizedDate, "authorizedDate");
            this.authorizedDate = authorizedDate;
            return this;
        }

        /**
         * Code to identify the underlying transaction.
         */
        public Builder code(TransactionCode code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }
        
        /**
         * Code to identify the underlying transaction.
         */
        public Builder code(Optional<? extends TransactionCode> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }

        /**
         * The currency of the bank transaction.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The description of the bank transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * The description of the bank transaction.
         */
        public Builder description(JsonNullable<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The unique identifier of the bank transaction.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The name of the merchant.
         */
        public Builder merchantName(String merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = JsonNullable.of(merchantName);
            return this;
        }

        /**
         * The name of the merchant.
         */
        public Builder merchantName(JsonNullable<? extends String> merchantName) {
            Utils.checkNotNull(merchantName, "merchantName");
            this.merchantName = merchantName;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }
        
        public Builder modifiedDate(Optional<? extends String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder postedDate(String postedDate) {
            Utils.checkNotNull(postedDate, "postedDate");
            this.postedDate = Optional.ofNullable(postedDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder postedDate(Optional<? extends String> postedDate) {
            Utils.checkNotNull(postedDate, "postedDate");
            this.postedDate = postedDate;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }
        
        public Builder sourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * An object of bank transaction category reference data.
         */
        public Builder transactionCategoryRef(TransactionCategoryRef transactionCategoryRef) {
            Utils.checkNotNull(transactionCategoryRef, "transactionCategoryRef");
            this.transactionCategoryRef = Optional.ofNullable(transactionCategoryRef);
            return this;
        }
        
        /**
         * An object of bank transaction category reference data.
         */
        public Builder transactionCategoryRef(Optional<? extends TransactionCategoryRef> transactionCategoryRef) {
            Utils.checkNotNull(transactionCategoryRef, "transactionCategoryRef");
            this.transactionCategoryRef = transactionCategoryRef;
            return this;
        }
        
        public BankingTransaction build() {
            return new BankingTransaction(
                accountId,
                amount,
                authorizedDate,
                code,
                currency,
                description,
                id,
                merchantName,
                modifiedDate,
                postedDate,
                sourceModifiedDate,
                transactionCategoryRef);
        }
    }
}

