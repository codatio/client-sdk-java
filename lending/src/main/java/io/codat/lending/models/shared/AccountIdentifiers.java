/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * AccountIdentifiers - An object containing bank account identification information.
 */

public class AccountIdentifiers {

    /**
     * The local (usually national) routing number for the account.
     * 
     * This is known by different names in different countries:
     * * BSB code (Australia)
     * * routing number (Canada, USA)
     * * sort code (UK)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankCode")
    private JsonNullable<String> bankCode;

    /**
     * The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bic")
    private JsonNullable<String> bic;

    /**
     * The international bank account number (IBAN) for the account, if known.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iban")
    private JsonNullable<String> iban;

    /**
     * A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maskedAccountNumber")
    private JsonNullable<String> maskedAccountNumber;

    /**
     * The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * Detailed account category
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtype")
    private JsonNullable<String> subtype;

    /**
     * Type of account
     */
    @JsonProperty("type")
    private AccountIdentifierType type;

    @JsonCreator
    public AccountIdentifiers(
            @JsonProperty("bankCode") JsonNullable<String> bankCode,
            @JsonProperty("bic") JsonNullable<String> bic,
            @JsonProperty("iban") JsonNullable<String> iban,
            @JsonProperty("maskedAccountNumber") JsonNullable<String> maskedAccountNumber,
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("subtype") JsonNullable<String> subtype,
            @JsonProperty("type") AccountIdentifierType type) {
        Utils.checkNotNull(bankCode, "bankCode");
        Utils.checkNotNull(bic, "bic");
        Utils.checkNotNull(iban, "iban");
        Utils.checkNotNull(maskedAccountNumber, "maskedAccountNumber");
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(subtype, "subtype");
        Utils.checkNotNull(type, "type");
        this.bankCode = bankCode;
        this.bic = bic;
        this.iban = iban;
        this.maskedAccountNumber = maskedAccountNumber;
        this.number = number;
        this.subtype = subtype;
        this.type = type;
    }
    
    public AccountIdentifiers(
            AccountIdentifierType type) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), type);
    }

    /**
     * The local (usually national) routing number for the account.
     * 
     * This is known by different names in different countries:
     * * BSB code (Australia)
     * * routing number (Canada, USA)
     * * sort code (UK)
     */
    @JsonIgnore
    public JsonNullable<String> bankCode() {
        return bankCode;
    }

    /**
     * The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.
     */
    @JsonIgnore
    public JsonNullable<String> bic() {
        return bic;
    }

    /**
     * The international bank account number (IBAN) for the account, if known.
     */
    @JsonIgnore
    public JsonNullable<String> iban() {
        return iban;
    }

    /**
     * A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
     */
    @JsonIgnore
    public JsonNullable<String> maskedAccountNumber() {
        return maskedAccountNumber;
    }

    /**
     * The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * Detailed account category
     */
    @JsonIgnore
    public JsonNullable<String> subtype() {
        return subtype;
    }

    /**
     * Type of account
     */
    @JsonIgnore
    public AccountIdentifierType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The local (usually national) routing number for the account.
     * 
     * This is known by different names in different countries:
     * * BSB code (Australia)
     * * routing number (Canada, USA)
     * * sort code (UK)
     */
    public AccountIdentifiers withBankCode(String bankCode) {
        Utils.checkNotNull(bankCode, "bankCode");
        this.bankCode = JsonNullable.of(bankCode);
        return this;
    }

    /**
     * The local (usually national) routing number for the account.
     * 
     * This is known by different names in different countries:
     * * BSB code (Australia)
     * * routing number (Canada, USA)
     * * sort code (UK)
     */
    public AccountIdentifiers withBankCode(JsonNullable<String> bankCode) {
        Utils.checkNotNull(bankCode, "bankCode");
        this.bankCode = bankCode;
        return this;
    }

    /**
     * The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.
     */
    public AccountIdentifiers withBic(String bic) {
        Utils.checkNotNull(bic, "bic");
        this.bic = JsonNullable.of(bic);
        return this;
    }

    /**
     * The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.
     */
    public AccountIdentifiers withBic(JsonNullable<String> bic) {
        Utils.checkNotNull(bic, "bic");
        this.bic = bic;
        return this;
    }

    /**
     * The international bank account number (IBAN) for the account, if known.
     */
    public AccountIdentifiers withIban(String iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = JsonNullable.of(iban);
        return this;
    }

    /**
     * The international bank account number (IBAN) for the account, if known.
     */
    public AccountIdentifiers withIban(JsonNullable<String> iban) {
        Utils.checkNotNull(iban, "iban");
        this.iban = iban;
        return this;
    }

    /**
     * A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
     */
    public AccountIdentifiers withMaskedAccountNumber(String maskedAccountNumber) {
        Utils.checkNotNull(maskedAccountNumber, "maskedAccountNumber");
        this.maskedAccountNumber = JsonNullable.of(maskedAccountNumber);
        return this;
    }

    /**
     * A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
     */
    public AccountIdentifiers withMaskedAccountNumber(JsonNullable<String> maskedAccountNumber) {
        Utils.checkNotNull(maskedAccountNumber, "maskedAccountNumber");
        this.maskedAccountNumber = maskedAccountNumber;
        return this;
    }

    /**
     * The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.
     */
    public AccountIdentifiers withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.
     */
    public AccountIdentifiers withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * Detailed account category
     */
    public AccountIdentifiers withSubtype(String subtype) {
        Utils.checkNotNull(subtype, "subtype");
        this.subtype = JsonNullable.of(subtype);
        return this;
    }

    /**
     * Detailed account category
     */
    public AccountIdentifiers withSubtype(JsonNullable<String> subtype) {
        Utils.checkNotNull(subtype, "subtype");
        this.subtype = subtype;
        return this;
    }

    /**
     * Type of account
     */
    public AccountIdentifiers withType(AccountIdentifierType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountIdentifiers other = (AccountIdentifiers) o;
        return 
            Objects.deepEquals(this.bankCode, other.bankCode) &&
            Objects.deepEquals(this.bic, other.bic) &&
            Objects.deepEquals(this.iban, other.iban) &&
            Objects.deepEquals(this.maskedAccountNumber, other.maskedAccountNumber) &&
            Objects.deepEquals(this.number, other.number) &&
            Objects.deepEquals(this.subtype, other.subtype) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bankCode,
            bic,
            iban,
            maskedAccountNumber,
            number,
            subtype,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountIdentifiers.class,
                "bankCode", bankCode,
                "bic", bic,
                "iban", iban,
                "maskedAccountNumber", maskedAccountNumber,
                "number", number,
                "subtype", subtype,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> bankCode = JsonNullable.undefined();
 
        private JsonNullable<String> bic = JsonNullable.undefined();
 
        private JsonNullable<String> iban = JsonNullable.undefined();
 
        private JsonNullable<String> maskedAccountNumber = JsonNullable.undefined();
 
        private JsonNullable<String> number = JsonNullable.undefined();
 
        private JsonNullable<String> subtype = JsonNullable.undefined();
 
        private AccountIdentifierType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The local (usually national) routing number for the account.
         * 
         * This is known by different names in different countries:
         * * BSB code (Australia)
         * * routing number (Canada, USA)
         * * sort code (UK)
         */
        public Builder bankCode(String bankCode) {
            Utils.checkNotNull(bankCode, "bankCode");
            this.bankCode = JsonNullable.of(bankCode);
            return this;
        }

        /**
         * The local (usually national) routing number for the account.
         * 
         * This is known by different names in different countries:
         * * BSB code (Australia)
         * * routing number (Canada, USA)
         * * sort code (UK)
         */
        public Builder bankCode(JsonNullable<String> bankCode) {
            Utils.checkNotNull(bankCode, "bankCode");
            this.bankCode = bankCode;
            return this;
        }

        /**
         * The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.
         */
        public Builder bic(String bic) {
            Utils.checkNotNull(bic, "bic");
            this.bic = JsonNullable.of(bic);
            return this;
        }

        /**
         * The ISO 9362 code (commonly called SWIFT code, SWIFT-BIC or BIC) for the account.
         */
        public Builder bic(JsonNullable<String> bic) {
            Utils.checkNotNull(bic, "bic");
            this.bic = bic;
            return this;
        }

        /**
         * The international bank account number (IBAN) for the account, if known.
         */
        public Builder iban(String iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = JsonNullable.of(iban);
            return this;
        }

        /**
         * The international bank account number (IBAN) for the account, if known.
         */
        public Builder iban(JsonNullable<String> iban) {
            Utils.checkNotNull(iban, "iban");
            this.iban = iban;
            return this;
        }

        /**
         * A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
         */
        public Builder maskedAccountNumber(String maskedAccountNumber) {
            Utils.checkNotNull(maskedAccountNumber, "maskedAccountNumber");
            this.maskedAccountNumber = JsonNullable.of(maskedAccountNumber);
            return this;
        }

        /**
         * A portion of the actual account `number` to help account identification where number is tokenised (Plaid only)
         */
        public Builder maskedAccountNumber(JsonNullable<String> maskedAccountNumber) {
            Utils.checkNotNull(maskedAccountNumber, "maskedAccountNumber");
            this.maskedAccountNumber = maskedAccountNumber;
            return this;
        }

        /**
         * The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * The account number for the account. When combined with the`bankCode`, this is usually enough to uniquely identify an account within a jurisdiction.
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        /**
         * Detailed account category
         */
        public Builder subtype(String subtype) {
            Utils.checkNotNull(subtype, "subtype");
            this.subtype = JsonNullable.of(subtype);
            return this;
        }

        /**
         * Detailed account category
         */
        public Builder subtype(JsonNullable<String> subtype) {
            Utils.checkNotNull(subtype, "subtype");
            this.subtype = subtype;
            return this;
        }

        /**
         * Type of account
         */
        public Builder type(AccountIdentifierType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public AccountIdentifiers build() {
            return new AccountIdentifiers(
                bankCode,
                bic,
                iban,
                maskedAccountNumber,
                number,
                subtype,
                type);
        }
    }
}

