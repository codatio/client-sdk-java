/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;


public class DataIntegrityByAmount {

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    /**
     * The percentage of the absolute value of transactions of the type specified in the route which have a match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchPercentage")
    private Optional<? extends BigDecimal> matchPercentage;

    /**
     * The sum of the absolute value of transactions of the type specified in the route which have a match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matched")
    private Optional<? extends BigDecimal> matched;

    /**
     * The total of unmatched and matched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private Optional<? extends BigDecimal> total;

    /**
     * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unmatched")
    private Optional<? extends BigDecimal> unmatched;

    @JsonCreator
    public DataIntegrityByAmount(
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("matchPercentage") Optional<? extends BigDecimal> matchPercentage,
            @JsonProperty("matched") Optional<? extends BigDecimal> matched,
            @JsonProperty("total") Optional<? extends BigDecimal> total,
            @JsonProperty("unmatched") Optional<? extends BigDecimal> unmatched) {
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(matchPercentage, "matchPercentage");
        Utils.checkNotNull(matched, "matched");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(unmatched, "unmatched");
        this.currency = currency;
        this.matchPercentage = matchPercentage;
        this.matched = matched;
        this.total = total;
        this.unmatched = unmatched;
    }
    
    public DataIntegrityByAmount() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    /**
     * The percentage of the absolute value of transactions of the type specified in the route which have a match.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> matchPercentage() {
        return (Optional<BigDecimal>) matchPercentage;
    }

    /**
     * The sum of the absolute value of transactions of the type specified in the route which have a match.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> matched() {
        return (Optional<BigDecimal>) matched;
    }

    /**
     * The total of unmatched and matched.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> total() {
        return (Optional<BigDecimal>) total;
    }

    /**
     * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> unmatched() {
        return (Optional<BigDecimal>) unmatched;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public DataIntegrityByAmount withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public DataIntegrityByAmount withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The percentage of the absolute value of transactions of the type specified in the route which have a match.
     */
    public DataIntegrityByAmount withMatchPercentage(BigDecimal matchPercentage) {
        Utils.checkNotNull(matchPercentage, "matchPercentage");
        this.matchPercentage = Optional.ofNullable(matchPercentage);
        return this;
    }

        /**
         * The percentage of the absolute value of transactions of the type specified in the route which have a match.
         */
    public DataIntegrityByAmount withMatchPercentage(double matchPercentage) {
        this.matchPercentage = Optional.of(BigDecimal.valueOf(matchPercentage));
        return this;
    }

    /**
     * The percentage of the absolute value of transactions of the type specified in the route which have a match.
     */
    public DataIntegrityByAmount withMatchPercentage(Optional<? extends BigDecimal> matchPercentage) {
        Utils.checkNotNull(matchPercentage, "matchPercentage");
        this.matchPercentage = matchPercentage;
        return this;
    }

    /**
     * The sum of the absolute value of transactions of the type specified in the route which have a match.
     */
    public DataIntegrityByAmount withMatched(BigDecimal matched) {
        Utils.checkNotNull(matched, "matched");
        this.matched = Optional.ofNullable(matched);
        return this;
    }

        /**
         * The sum of the absolute value of transactions of the type specified in the route which have a match.
         */
    public DataIntegrityByAmount withMatched(double matched) {
        this.matched = Optional.of(BigDecimal.valueOf(matched));
        return this;
    }

    /**
     * The sum of the absolute value of transactions of the type specified in the route which have a match.
     */
    public DataIntegrityByAmount withMatched(Optional<? extends BigDecimal> matched) {
        Utils.checkNotNull(matched, "matched");
        this.matched = matched;
        return this;
    }

    /**
     * The total of unmatched and matched.
     */
    public DataIntegrityByAmount withTotal(BigDecimal total) {
        Utils.checkNotNull(total, "total");
        this.total = Optional.ofNullable(total);
        return this;
    }

        /**
         * The total of unmatched and matched.
         */
    public DataIntegrityByAmount withTotal(double total) {
        this.total = Optional.of(BigDecimal.valueOf(total));
        return this;
    }

    /**
     * The total of unmatched and matched.
     */
    public DataIntegrityByAmount withTotal(Optional<? extends BigDecimal> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
     */
    public DataIntegrityByAmount withUnmatched(BigDecimal unmatched) {
        Utils.checkNotNull(unmatched, "unmatched");
        this.unmatched = Optional.ofNullable(unmatched);
        return this;
    }

        /**
         * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
         */
    public DataIntegrityByAmount withUnmatched(double unmatched) {
        this.unmatched = Optional.of(BigDecimal.valueOf(unmatched));
        return this;
    }

    /**
     * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
     */
    public DataIntegrityByAmount withUnmatched(Optional<? extends BigDecimal> unmatched) {
        Utils.checkNotNull(unmatched, "unmatched");
        this.unmatched = unmatched;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataIntegrityByAmount other = (DataIntegrityByAmount) o;
        return 
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.matchPercentage, other.matchPercentage) &&
            Objects.deepEquals(this.matched, other.matched) &&
            Objects.deepEquals(this.total, other.total) &&
            Objects.deepEquals(this.unmatched, other.unmatched);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            currency,
            matchPercentage,
            matched,
            total,
            unmatched);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataIntegrityByAmount.class,
                "currency", currency,
                "matchPercentage", matchPercentage,
                "matched", matched,
                "total", total,
                "unmatched", unmatched);
    }
    
    public final static class Builder {
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<? extends BigDecimal> matchPercentage = Optional.empty();
 
        private Optional<? extends BigDecimal> matched = Optional.empty();
 
        private Optional<? extends BigDecimal> total = Optional.empty();
 
        private Optional<? extends BigDecimal> unmatched = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The percentage of the absolute value of transactions of the type specified in the route which have a match.
         */
        public Builder matchPercentage(BigDecimal matchPercentage) {
            Utils.checkNotNull(matchPercentage, "matchPercentage");
            this.matchPercentage = Optional.ofNullable(matchPercentage);
            return this;
        }

        /**
         * The percentage of the absolute value of transactions of the type specified in the route which have a match.
         */
        public Builder matchPercentage(double matchPercentage) {
            this.matchPercentage = Optional.of(BigDecimal.valueOf(matchPercentage));
            return this;
        }

        /**
         * The percentage of the absolute value of transactions of the type specified in the route which have a match.
         */
        public Builder matchPercentage(Optional<? extends BigDecimal> matchPercentage) {
            Utils.checkNotNull(matchPercentage, "matchPercentage");
            this.matchPercentage = matchPercentage;
            return this;
        }

        /**
         * The sum of the absolute value of transactions of the type specified in the route which have a match.
         */
        public Builder matched(BigDecimal matched) {
            Utils.checkNotNull(matched, "matched");
            this.matched = Optional.ofNullable(matched);
            return this;
        }

        /**
         * The sum of the absolute value of transactions of the type specified in the route which have a match.
         */
        public Builder matched(double matched) {
            this.matched = Optional.of(BigDecimal.valueOf(matched));
            return this;
        }

        /**
         * The sum of the absolute value of transactions of the type specified in the route which have a match.
         */
        public Builder matched(Optional<? extends BigDecimal> matched) {
            Utils.checkNotNull(matched, "matched");
            this.matched = matched;
            return this;
        }

        /**
         * The total of unmatched and matched.
         */
        public Builder total(BigDecimal total) {
            Utils.checkNotNull(total, "total");
            this.total = Optional.ofNullable(total);
            return this;
        }

        /**
         * The total of unmatched and matched.
         */
        public Builder total(double total) {
            this.total = Optional.of(BigDecimal.valueOf(total));
            return this;
        }

        /**
         * The total of unmatched and matched.
         */
        public Builder total(Optional<? extends BigDecimal> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        /**
         * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
         */
        public Builder unmatched(BigDecimal unmatched) {
            Utils.checkNotNull(unmatched, "unmatched");
            this.unmatched = Optional.ofNullable(unmatched);
            return this;
        }

        /**
         * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
         */
        public Builder unmatched(double unmatched) {
            this.unmatched = Optional.of(BigDecimal.valueOf(unmatched));
            return this;
        }

        /**
         * The sum of the absolute value of transactions of the type specified in the route which don't have a match.
         */
        public Builder unmatched(Optional<? extends BigDecimal> unmatched) {
            Utils.checkNotNull(unmatched, "unmatched");
            this.unmatched = unmatched;
            return this;
        }
        
        public DataIntegrityByAmount build() {
            return new DataIntegrityByAmount(
                currency,
                matchPercentage,
                matched,
                total,
                unmatched);
        }
    }
}

