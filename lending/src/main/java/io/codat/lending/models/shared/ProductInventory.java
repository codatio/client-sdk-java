/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ProductInventory - Information about the total inventory as well as the locations inventory is in.
 */

public class ProductInventory {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    private Optional<? extends List<ProductInventoryLocation>> locations;

    /**
     * The total quantity of stock remaining across locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalQuantity")
    private JsonNullable<? extends BigDecimal> totalQuantity;

    @JsonCreator
    public ProductInventory(
            @JsonProperty("locations") Optional<? extends List<ProductInventoryLocation>> locations,
            @JsonProperty("totalQuantity") JsonNullable<? extends BigDecimal> totalQuantity) {
        Utils.checkNotNull(locations, "locations");
        Utils.checkNotNull(totalQuantity, "totalQuantity");
        this.locations = locations;
        this.totalQuantity = totalQuantity;
    }
    
    public ProductInventory() {
        this(Optional.empty(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ProductInventoryLocation>> locations() {
        return (Optional<List<ProductInventoryLocation>>) locations;
    }

    /**
     * The total quantity of stock remaining across locations.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> totalQuantity() {
        return (JsonNullable<BigDecimal>) totalQuantity;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProductInventory withLocations(List<ProductInventoryLocation> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = Optional.ofNullable(locations);
        return this;
    }

    public ProductInventory withLocations(Optional<? extends List<ProductInventoryLocation>> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = locations;
        return this;
    }

    /**
     * The total quantity of stock remaining across locations.
     */
    public ProductInventory withTotalQuantity(BigDecimal totalQuantity) {
        Utils.checkNotNull(totalQuantity, "totalQuantity");
        this.totalQuantity = JsonNullable.of(totalQuantity);
        return this;
    }

        /**
         * The total quantity of stock remaining across locations.
         */
    public ProductInventory withTotalQuantity(double totalQuantity) {
        this.totalQuantity = JsonNullable.of(BigDecimal.valueOf(totalQuantity));
        return this;
    }

    /**
     * The total quantity of stock remaining across locations.
     */
    public ProductInventory withTotalQuantity(JsonNullable<? extends BigDecimal> totalQuantity) {
        Utils.checkNotNull(totalQuantity, "totalQuantity");
        this.totalQuantity = totalQuantity;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductInventory other = (ProductInventory) o;
        return 
            Objects.deepEquals(this.locations, other.locations) &&
            Objects.deepEquals(this.totalQuantity, other.totalQuantity);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            locations,
            totalQuantity);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductInventory.class,
                "locations", locations,
                "totalQuantity", totalQuantity);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ProductInventoryLocation>> locations = Optional.empty();
 
        private JsonNullable<? extends BigDecimal> totalQuantity = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder locations(List<ProductInventoryLocation> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = Optional.ofNullable(locations);
            return this;
        }

        public Builder locations(Optional<? extends List<ProductInventoryLocation>> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = locations;
            return this;
        }

        /**
         * The total quantity of stock remaining across locations.
         */
        public Builder totalQuantity(BigDecimal totalQuantity) {
            Utils.checkNotNull(totalQuantity, "totalQuantity");
            this.totalQuantity = JsonNullable.of(totalQuantity);
            return this;
        }

        /**
         * The total quantity of stock remaining across locations.
         */
        public Builder totalQuantity(double totalQuantity) {
            this.totalQuantity = JsonNullable.of(BigDecimal.valueOf(totalQuantity));
            return this;
        }

        /**
         * The total quantity of stock remaining across locations.
         */
        public Builder totalQuantity(JsonNullable<? extends BigDecimal> totalQuantity) {
            Utils.checkNotNull(totalQuantity, "totalQuantity");
            this.totalQuantity = totalQuantity;
            return this;
        }
        
        public ProductInventory build() {
            return new ProductInventory(
                locations,
                totalQuantity);
        }
    }
}

