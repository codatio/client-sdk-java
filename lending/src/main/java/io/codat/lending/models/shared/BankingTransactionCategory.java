/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * BankingTransactionCategory - The Banking Transaction Categories data type provides a list of hierarchical categories associated with a transaction for greater contextual meaning to transaction activity.
 * 
 * Responses are paged, so you should provide `page` and `pageSize` query parameters in your request.
 */

public class BankingTransactionCategory {

    /**
     * A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasChildren")
    private Optional<Boolean> hasChildren;

    /**
     * The unique identifier of the bank transaction category.
     */
    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<String> modifiedDate;

    /**
     * The name of the bank transaction category.
     */
    @JsonProperty("name")
    private String name;

    /**
     * The unique identifier of the parent bank transaction category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentId")
    private JsonNullable<String> parentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<String> sourceModifiedDate;

    /**
     * The status of the transaction category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TransactionCategoryStatus> status;

    @JsonCreator
    public BankingTransactionCategory(
            @JsonProperty("hasChildren") Optional<Boolean> hasChildren,
            @JsonProperty("id") String id,
            @JsonProperty("modifiedDate") Optional<String> modifiedDate,
            @JsonProperty("name") String name,
            @JsonProperty("parentId") JsonNullable<String> parentId,
            @JsonProperty("sourceModifiedDate") Optional<String> sourceModifiedDate,
            @JsonProperty("status") Optional<? extends TransactionCategoryStatus> status) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(status, "status");
        this.hasChildren = hasChildren;
        this.id = id;
        this.modifiedDate = modifiedDate;
        this.name = name;
        this.parentId = parentId;
        this.sourceModifiedDate = sourceModifiedDate;
        this.status = status;
    }
    
    public BankingTransactionCategory(
            String id,
            String name) {
        this(Optional.empty(), id, Optional.empty(), name, JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
     */
    @JsonIgnore
    public Optional<Boolean> hasChildren() {
        return hasChildren;
    }

    /**
     * The unique identifier of the bank transaction category.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * The name of the bank transaction category.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * The unique identifier of the parent bank transaction category.
     */
    @JsonIgnore
    public JsonNullable<String> parentId() {
        return parentId;
    }

    @JsonIgnore
    public Optional<String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * The status of the transaction category.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionCategoryStatus> status() {
        return (Optional<TransactionCategoryStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
     */
    public BankingTransactionCategory withHasChildren(boolean hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = Optional.ofNullable(hasChildren);
        return this;
    }

    /**
     * A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
     */
    public BankingTransactionCategory withHasChildren(Optional<Boolean> hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = hasChildren;
        return this;
    }

    /**
     * The unique identifier of the bank transaction category.
     */
    public BankingTransactionCategory withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public BankingTransactionCategory withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }

    public BankingTransactionCategory withModifiedDate(Optional<String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * The name of the bank transaction category.
     */
    public BankingTransactionCategory withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The unique identifier of the parent bank transaction category.
     */
    public BankingTransactionCategory withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = JsonNullable.of(parentId);
        return this;
    }

    /**
     * The unique identifier of the parent bank transaction category.
     */
    public BankingTransactionCategory withParentId(JsonNullable<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    public BankingTransactionCategory withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }

    public BankingTransactionCategory withSourceModifiedDate(Optional<String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * The status of the transaction category.
     */
    public BankingTransactionCategory withStatus(TransactionCategoryStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the transaction category.
     */
    public BankingTransactionCategory withStatus(Optional<? extends TransactionCategoryStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankingTransactionCategory other = (BankingTransactionCategory) o;
        return 
            Objects.deepEquals(this.hasChildren, other.hasChildren) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.parentId, other.parentId) &&
            Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            hasChildren,
            id,
            modifiedDate,
            name,
            parentId,
            sourceModifiedDate,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankingTransactionCategory.class,
                "hasChildren", hasChildren,
                "id", id,
                "modifiedDate", modifiedDate,
                "name", name,
                "parentId", parentId,
                "sourceModifiedDate", sourceModifiedDate,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> hasChildren = Optional.empty();
 
        private String id;
 
        private Optional<String> modifiedDate = Optional.empty();
 
        private String name;
 
        private JsonNullable<String> parentId = JsonNullable.undefined();
 
        private Optional<String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends TransactionCategoryStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
         */
        public Builder hasChildren(boolean hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = Optional.ofNullable(hasChildren);
            return this;
        }

        /**
         * A Boolean indicating whether there are other bank transaction categories beneath this one in the hierarchy.
         */
        public Builder hasChildren(Optional<Boolean> hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = hasChildren;
            return this;
        }

        /**
         * The unique identifier of the bank transaction category.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        public Builder modifiedDate(Optional<String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * The name of the bank transaction category.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The unique identifier of the parent bank transaction category.
         */
        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * The unique identifier of the parent bank transaction category.
         */
        public Builder parentId(JsonNullable<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(Optional<String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * The status of the transaction category.
         */
        public Builder status(TransactionCategoryStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the transaction category.
         */
        public Builder status(Optional<? extends TransactionCategoryStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public BankingTransactionCategory build() {
            return new BankingTransactionCategory(
                hasChildren,
                id,
                modifiedDate,
                name,
                parentId,
                sourceModifiedDate,
                status);
        }
    }
}

