/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class TransactionCategory {

    /**
     * Returns the confidence of the suggested category for the transaction. The value is between 0 and 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidence")
    private Optional<? extends Double> confidence;

    /**
     * The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("levels")
    private Optional<? extends java.util.List<String>> levels;

    public TransactionCategory(
            @JsonProperty("confidence") Optional<? extends Double> confidence,
            @JsonProperty("levels") Optional<? extends java.util.List<String>> levels) {
        Utils.checkNotNull(confidence, "confidence");
        Utils.checkNotNull(levels, "levels");
        this.confidence = confidence;
        this.levels = levels;
    }

    /**
     * Returns the confidence of the suggested category for the transaction. The value is between 0 and 100.
     */
    public Optional<? extends Double> confidence() {
        return confidence;
    }

    /**
     * The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
     */
    public Optional<? extends java.util.List<String>> levels() {
        return levels;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Returns the confidence of the suggested category for the transaction. The value is between 0 and 100.
     */
    public TransactionCategory withConfidence(double confidence) {
        Utils.checkNotNull(confidence, "confidence");
        this.confidence = Optional.ofNullable(confidence);
        return this;
    }
    
    /**
     * Returns the confidence of the suggested category for the transaction. The value is between 0 and 100.
     */
    public TransactionCategory withConfidence(Optional<? extends Double> confidence) {
        Utils.checkNotNull(confidence, "confidence");
        this.confidence = confidence;
        return this;
    }

    /**
     * The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
     */
    public TransactionCategory withLevels(java.util.List<String> levels) {
        Utils.checkNotNull(levels, "levels");
        this.levels = Optional.ofNullable(levels);
        return this;
    }
    
    /**
     * The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
     */
    public TransactionCategory withLevels(Optional<? extends java.util.List<String>> levels) {
        Utils.checkNotNull(levels, "levels");
        this.levels = levels;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionCategory other = (TransactionCategory) o;
        return 
            java.util.Objects.deepEquals(this.confidence, other.confidence) &&
            java.util.Objects.deepEquals(this.levels, other.levels);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            confidence,
            levels);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionCategory.class,
                "confidence", confidence,
                "levels", levels);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> confidence = Optional.empty();
 
        private Optional<? extends java.util.List<String>> levels = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Returns the confidence of the suggested category for the transaction. The value is between 0 and 100.
         */
        public Builder confidence(double confidence) {
            Utils.checkNotNull(confidence, "confidence");
            this.confidence = Optional.ofNullable(confidence);
            return this;
        }
        
        /**
         * Returns the confidence of the suggested category for the transaction. The value is between 0 and 100.
         */
        public Builder confidence(Optional<? extends Double> confidence) {
            Utils.checkNotNull(confidence, "confidence");
            this.confidence = confidence;
            return this;
        }

        /**
         * The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
         */
        public Builder levels(java.util.List<String> levels) {
            Utils.checkNotNull(levels, "levels");
            this.levels = Optional.ofNullable(levels);
            return this;
        }
        
        /**
         * The suggested category is an ordered array of category levels where each element (or level) is a subcategory of the previous element (or level).
         */
        public Builder levels(Optional<? extends java.util.List<String>> levels) {
            Utils.checkNotNull(levels, "levels");
            this.levels = levels;
            return this;
        }
        
        public TransactionCategory build() {
            return new TransactionCategory(
                confidence,
                levels);
        }
    }
}

