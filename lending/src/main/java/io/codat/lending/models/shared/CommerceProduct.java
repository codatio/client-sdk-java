/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * CommerceProduct - A Product is an item in the company's inventory, and includes information about the price and quantity of all products, and variants thereof, available for sale.
 * 
 * Explore our [data coverage](https://knowledge.codat.io/supported-features/commerce?view=tab-by-data-type&amp;dataType=commerce-products) for this data type.
 * 
 */

public class CommerceProduct {

    /**
     * Retail category that the product is assigned to e.g. `Hardware`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categorization")
    private Optional<String> categorization;

    /**
     * Description of the product recorded in the commerce or point of sale platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * A unique, persistent identifier for this record
     */
    @JsonProperty("id")
    private String id;

    /**
     * Whether the product represents a gift card or voucher that
     * can be redeemed in the commerce or POS platform.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isGiftCard")
    private Optional<Boolean> isGiftCard;

    /**
     * Name of the product in the commerce or POS system
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalData")
    private Optional<? extends SupplementalData> supplementalData;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variants")
    private Optional<? extends List<ProductVariant>> variants;

    @JsonCreator
    public CommerceProduct(
            @JsonProperty("categorization") Optional<String> categorization,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("id") String id,
            @JsonProperty("isGiftCard") Optional<Boolean> isGiftCard,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("supplementalData") Optional<? extends SupplementalData> supplementalData,
            @JsonProperty("variants") Optional<? extends List<ProductVariant>> variants) {
        Utils.checkNotNull(categorization, "categorization");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isGiftCard, "isGiftCard");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(supplementalData, "supplementalData");
        Utils.checkNotNull(variants, "variants");
        this.categorization = categorization;
        this.description = description;
        this.id = id;
        this.isGiftCard = isGiftCard;
        this.name = name;
        this.supplementalData = supplementalData;
        this.variants = variants;
    }
    
    public CommerceProduct(
            String id) {
        this(Optional.empty(), Optional.empty(), id, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Retail category that the product is assigned to e.g. `Hardware`.
     */
    @JsonIgnore
    public Optional<String> categorization() {
        return categorization;
    }

    /**
     * Description of the product recorded in the commerce or point of sale platform.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * A unique, persistent identifier for this record
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Whether the product represents a gift card or voucher that
     * can be redeemed in the commerce or POS platform.
     * 
     */
    @JsonIgnore
    public Optional<Boolean> isGiftCard() {
        return isGiftCard;
    }

    /**
     * Name of the product in the commerce or POS system
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SupplementalData> supplementalData() {
        return (Optional<SupplementalData>) supplementalData;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ProductVariant>> variants() {
        return (Optional<List<ProductVariant>>) variants;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Retail category that the product is assigned to e.g. `Hardware`.
     */
    public CommerceProduct withCategorization(String categorization) {
        Utils.checkNotNull(categorization, "categorization");
        this.categorization = Optional.ofNullable(categorization);
        return this;
    }

    /**
     * Retail category that the product is assigned to e.g. `Hardware`.
     */
    public CommerceProduct withCategorization(Optional<String> categorization) {
        Utils.checkNotNull(categorization, "categorization");
        this.categorization = categorization;
        return this;
    }

    /**
     * Description of the product recorded in the commerce or point of sale platform.
     */
    public CommerceProduct withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Description of the product recorded in the commerce or point of sale platform.
     */
    public CommerceProduct withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A unique, persistent identifier for this record
     */
    public CommerceProduct withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Whether the product represents a gift card or voucher that
     * can be redeemed in the commerce or POS platform.
     * 
     */
    public CommerceProduct withIsGiftCard(boolean isGiftCard) {
        Utils.checkNotNull(isGiftCard, "isGiftCard");
        this.isGiftCard = Optional.ofNullable(isGiftCard);
        return this;
    }

    /**
     * Whether the product represents a gift card or voucher that
     * can be redeemed in the commerce or POS platform.
     * 
     */
    public CommerceProduct withIsGiftCard(Optional<Boolean> isGiftCard) {
        Utils.checkNotNull(isGiftCard, "isGiftCard");
        this.isGiftCard = isGiftCard;
        return this;
    }

    /**
     * Name of the product in the commerce or POS system
     */
    public CommerceProduct withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the product in the commerce or POS system
     */
    public CommerceProduct withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public CommerceProduct withSupplementalData(SupplementalData supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = Optional.ofNullable(supplementalData);
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public CommerceProduct withSupplementalData(Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = supplementalData;
        return this;
    }

    public CommerceProduct withVariants(List<ProductVariant> variants) {
        Utils.checkNotNull(variants, "variants");
        this.variants = Optional.ofNullable(variants);
        return this;
    }

    public CommerceProduct withVariants(Optional<? extends List<ProductVariant>> variants) {
        Utils.checkNotNull(variants, "variants");
        this.variants = variants;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceProduct other = (CommerceProduct) o;
        return 
            Objects.deepEquals(this.categorization, other.categorization) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.isGiftCard, other.isGiftCard) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.supplementalData, other.supplementalData) &&
            Objects.deepEquals(this.variants, other.variants);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            categorization,
            description,
            id,
            isGiftCard,
            name,
            supplementalData,
            variants);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceProduct.class,
                "categorization", categorization,
                "description", description,
                "id", id,
                "isGiftCard", isGiftCard,
                "name", name,
                "supplementalData", supplementalData,
                "variants", variants);
    }
    
    public final static class Builder {
 
        private Optional<String> categorization = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private String id;
 
        private Optional<Boolean> isGiftCard = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends SupplementalData> supplementalData = Optional.empty();
 
        private Optional<? extends List<ProductVariant>> variants = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Retail category that the product is assigned to e.g. `Hardware`.
         */
        public Builder categorization(String categorization) {
            Utils.checkNotNull(categorization, "categorization");
            this.categorization = Optional.ofNullable(categorization);
            return this;
        }

        /**
         * Retail category that the product is assigned to e.g. `Hardware`.
         */
        public Builder categorization(Optional<String> categorization) {
            Utils.checkNotNull(categorization, "categorization");
            this.categorization = categorization;
            return this;
        }

        /**
         * Description of the product recorded in the commerce or point of sale platform.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the product recorded in the commerce or point of sale platform.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A unique, persistent identifier for this record
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Whether the product represents a gift card or voucher that
         * can be redeemed in the commerce or POS platform.
         * 
         */
        public Builder isGiftCard(boolean isGiftCard) {
            Utils.checkNotNull(isGiftCard, "isGiftCard");
            this.isGiftCard = Optional.ofNullable(isGiftCard);
            return this;
        }

        /**
         * Whether the product represents a gift card or voucher that
         * can be redeemed in the commerce or POS platform.
         * 
         */
        public Builder isGiftCard(Optional<Boolean> isGiftCard) {
            Utils.checkNotNull(isGiftCard, "isGiftCard");
            this.isGiftCard = isGiftCard;
            return this;
        }

        /**
         * Name of the product in the commerce or POS system
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the product in the commerce or POS system
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(SupplementalData supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = Optional.ofNullable(supplementalData);
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(Optional<? extends SupplementalData> supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = supplementalData;
            return this;
        }

        public Builder variants(List<ProductVariant> variants) {
            Utils.checkNotNull(variants, "variants");
            this.variants = Optional.ofNullable(variants);
            return this;
        }

        public Builder variants(Optional<? extends List<ProductVariant>> variants) {
            Utils.checkNotNull(variants, "variants");
            this.variants = variants;
            return this;
        }
        
        public CommerceProduct build() {
            return new CommerceProduct(
                categorization,
                description,
                id,
                isGiftCard,
                name,
                supplementalData,
                variants);
        }
    }
}

