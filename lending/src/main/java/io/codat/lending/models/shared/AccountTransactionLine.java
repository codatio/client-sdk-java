/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountTransactionLine {

    /**
     * Amount in the bill payment currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends BigDecimal> amount;

    /**
     * Description of the account transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Links an account transaction line to the underlying record that created it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordRef")
    private Optional<? extends AccountTransactionLineRecordRef> recordRef;

    @JsonCreator
    public AccountTransactionLine(
            @JsonProperty("amount") Optional<? extends BigDecimal> amount,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("recordRef") Optional<? extends AccountTransactionLineRecordRef> recordRef) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(recordRef, "recordRef");
        this.amount = amount;
        this.description = description;
        this.recordRef = recordRef;
    }
    
    public AccountTransactionLine() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * Amount in the bill payment currency.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> amount() {
        return (Optional<BigDecimal>) amount;
    }

    /**
     * Description of the account transaction.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Links an account transaction line to the underlying record that created it.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountTransactionLineRecordRef> recordRef() {
        return (Optional<AccountTransactionLineRecordRef>) recordRef;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Amount in the bill payment currency.
     */
    public AccountTransactionLine withAmount(BigDecimal amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

        /**
         * Amount in the bill payment currency.
         */
    public AccountTransactionLine withAmount(double amount) {
        this.amount = Optional.of(BigDecimal.valueOf(amount));
        return this;
    }

    /**
     * Amount in the bill payment currency.
     */
    public AccountTransactionLine withAmount(Optional<? extends BigDecimal> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Description of the account transaction.
     */
    public AccountTransactionLine withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Description of the account transaction.
     */
    public AccountTransactionLine withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Links an account transaction line to the underlying record that created it.
     */
    public AccountTransactionLine withRecordRef(AccountTransactionLineRecordRef recordRef) {
        Utils.checkNotNull(recordRef, "recordRef");
        this.recordRef = Optional.ofNullable(recordRef);
        return this;
    }

    /**
     * Links an account transaction line to the underlying record that created it.
     */
    public AccountTransactionLine withRecordRef(Optional<? extends AccountTransactionLineRecordRef> recordRef) {
        Utils.checkNotNull(recordRef, "recordRef");
        this.recordRef = recordRef;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountTransactionLine other = (AccountTransactionLine) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.recordRef, other.recordRef);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            description,
            recordRef);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountTransactionLine.class,
                "amount", amount,
                "description", description,
                "recordRef", recordRef);
    }
    
    public final static class Builder {
 
        private Optional<? extends BigDecimal> amount = Optional.empty();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private Optional<? extends AccountTransactionLineRecordRef> recordRef = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Amount in the bill payment currency.
         */
        public Builder amount(BigDecimal amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * Amount in the bill payment currency.
         */
        public Builder amount(double amount) {
            this.amount = Optional.of(BigDecimal.valueOf(amount));
            return this;
        }

        /**
         * Amount in the bill payment currency.
         */
        public Builder amount(Optional<? extends BigDecimal> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Description of the account transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Description of the account transaction.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Links an account transaction line to the underlying record that created it.
         */
        public Builder recordRef(AccountTransactionLineRecordRef recordRef) {
            Utils.checkNotNull(recordRef, "recordRef");
            this.recordRef = Optional.ofNullable(recordRef);
            return this;
        }

        /**
         * Links an account transaction line to the underlying record that created it.
         */
        public Builder recordRef(Optional<? extends AccountTransactionLineRecordRef> recordRef) {
            Utils.checkNotNull(recordRef, "recordRef");
            this.recordRef = recordRef;
            return this;
        }
        
        public AccountTransactionLine build() {
            return new AccountTransactionLine(
                amount,
                description,
                recordRef);
        }
    }
}

