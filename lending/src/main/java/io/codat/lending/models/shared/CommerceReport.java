/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * CommerceReport - ## Structure
 * 
 * Assess reports follow a consistent structure. Reports contain four sections of information:
 * 
 * ### 1. Report definition
 * 
 * Information such as:
 * 
 *   1. The report info (e.g. enhanced_profit_and_loss).
 *   2. The display name of the report (e.g. Enhanced Profit and Loss).
 *   
 * ### 2. Dimension info
 * 
 * Information about the dimension contained in the reports such as:
 * 
 *   1. The type of dimension (e.g. datetime, recordRef).
 *   2. The display name of the dimension (e.g. Period, Category type, Category sub type).
 *   3. The details about each item within the dimension (e.g. displayName:"Jan 2022", start:"...", end:"...", id:"...", name:"...").
 * 
 * ### 3. Measure info
 * 
 * Information about the measures contained in the report such as:
 * 
 *   1. The display name of the measure (e.g. value of account, percentage change).
 *   2. The type of the measure (e.g. currency, percentage).
 *   3. The unit of the measure (e.g. %, GBP).
 *   
 * ### 4. The data for the report
 * 
 * When the *includeDisplayName* parameter is set to *true*, it shows the *dimensionDisplayName* and *itemDisplayName* to make the data human-readable. The default setting for *includeDisplayName* is *false*.
 * 
 * 
 * ## Displaying the report
 * 
 * Reports can be rendered as follows (ordering is implicit rather than explicit):
 * 
 * ![A table showing an example of how a report can be rendered](https://files.readme.io/1fa20ca-Report1.png)
 * 
 * # Data model
 * 
 * ## Dimensions
 */

public class CommerceReport {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensions")
    private Optional<? extends List<CommerceReportDimension>> dimensions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private Optional<? extends List<CommerceReportError>> errors;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("measures")
    private Optional<? extends List<CommerceReportMeasure>> measures;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportData")
    private Optional<? extends List<CommerceReportComponent>> reportData;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportInfo")
    private Optional<? extends Map<String, String>> reportInfo;

    @JsonCreator
    public CommerceReport(
            @JsonProperty("dimensions") Optional<? extends List<CommerceReportDimension>> dimensions,
            @JsonProperty("errors") Optional<? extends List<CommerceReportError>> errors,
            @JsonProperty("measures") Optional<? extends List<CommerceReportMeasure>> measures,
            @JsonProperty("reportData") Optional<? extends List<CommerceReportComponent>> reportData,
            @JsonProperty("reportInfo") Optional<? extends Map<String, String>> reportInfo) {
        Utils.checkNotNull(dimensions, "dimensions");
        Utils.checkNotNull(errors, "errors");
        Utils.checkNotNull(measures, "measures");
        Utils.checkNotNull(reportData, "reportData");
        Utils.checkNotNull(reportInfo, "reportInfo");
        this.dimensions = dimensions;
        this.errors = errors;
        this.measures = measures;
        this.reportData = reportData;
        this.reportInfo = reportInfo;
    }
    
    public CommerceReport() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceReportDimension>> dimensions() {
        return (Optional<List<CommerceReportDimension>>) dimensions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceReportError>> errors() {
        return (Optional<List<CommerceReportError>>) errors;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceReportMeasure>> measures() {
        return (Optional<List<CommerceReportMeasure>>) measures;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceReportComponent>> reportData() {
        return (Optional<List<CommerceReportComponent>>) reportData;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, String>> reportInfo() {
        return (Optional<Map<String, String>>) reportInfo;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CommerceReport withDimensions(List<CommerceReportDimension> dimensions) {
        Utils.checkNotNull(dimensions, "dimensions");
        this.dimensions = Optional.ofNullable(dimensions);
        return this;
    }

    public CommerceReport withDimensions(Optional<? extends List<CommerceReportDimension>> dimensions) {
        Utils.checkNotNull(dimensions, "dimensions");
        this.dimensions = dimensions;
        return this;
    }

    public CommerceReport withErrors(List<CommerceReportError> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = Optional.ofNullable(errors);
        return this;
    }

    public CommerceReport withErrors(Optional<? extends List<CommerceReportError>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    public CommerceReport withMeasures(List<CommerceReportMeasure> measures) {
        Utils.checkNotNull(measures, "measures");
        this.measures = Optional.ofNullable(measures);
        return this;
    }

    public CommerceReport withMeasures(Optional<? extends List<CommerceReportMeasure>> measures) {
        Utils.checkNotNull(measures, "measures");
        this.measures = measures;
        return this;
    }

    public CommerceReport withReportData(List<CommerceReportComponent> reportData) {
        Utils.checkNotNull(reportData, "reportData");
        this.reportData = Optional.ofNullable(reportData);
        return this;
    }

    public CommerceReport withReportData(Optional<? extends List<CommerceReportComponent>> reportData) {
        Utils.checkNotNull(reportData, "reportData");
        this.reportData = reportData;
        return this;
    }

    public CommerceReport withReportInfo(Map<String, String> reportInfo) {
        Utils.checkNotNull(reportInfo, "reportInfo");
        this.reportInfo = Optional.ofNullable(reportInfo);
        return this;
    }

    public CommerceReport withReportInfo(Optional<? extends Map<String, String>> reportInfo) {
        Utils.checkNotNull(reportInfo, "reportInfo");
        this.reportInfo = reportInfo;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceReport other = (CommerceReport) o;
        return 
            Objects.deepEquals(this.dimensions, other.dimensions) &&
            Objects.deepEquals(this.errors, other.errors) &&
            Objects.deepEquals(this.measures, other.measures) &&
            Objects.deepEquals(this.reportData, other.reportData) &&
            Objects.deepEquals(this.reportInfo, other.reportInfo);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dimensions,
            errors,
            measures,
            reportData,
            reportInfo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceReport.class,
                "dimensions", dimensions,
                "errors", errors,
                "measures", measures,
                "reportData", reportData,
                "reportInfo", reportInfo);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<CommerceReportDimension>> dimensions = Optional.empty();
 
        private Optional<? extends List<CommerceReportError>> errors = Optional.empty();
 
        private Optional<? extends List<CommerceReportMeasure>> measures = Optional.empty();
 
        private Optional<? extends List<CommerceReportComponent>> reportData = Optional.empty();
 
        private Optional<? extends Map<String, String>> reportInfo = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dimensions(List<CommerceReportDimension> dimensions) {
            Utils.checkNotNull(dimensions, "dimensions");
            this.dimensions = Optional.ofNullable(dimensions);
            return this;
        }

        public Builder dimensions(Optional<? extends List<CommerceReportDimension>> dimensions) {
            Utils.checkNotNull(dimensions, "dimensions");
            this.dimensions = dimensions;
            return this;
        }

        public Builder errors(List<CommerceReportError> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        public Builder errors(Optional<? extends List<CommerceReportError>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }

        public Builder measures(List<CommerceReportMeasure> measures) {
            Utils.checkNotNull(measures, "measures");
            this.measures = Optional.ofNullable(measures);
            return this;
        }

        public Builder measures(Optional<? extends List<CommerceReportMeasure>> measures) {
            Utils.checkNotNull(measures, "measures");
            this.measures = measures;
            return this;
        }

        public Builder reportData(List<CommerceReportComponent> reportData) {
            Utils.checkNotNull(reportData, "reportData");
            this.reportData = Optional.ofNullable(reportData);
            return this;
        }

        public Builder reportData(Optional<? extends List<CommerceReportComponent>> reportData) {
            Utils.checkNotNull(reportData, "reportData");
            this.reportData = reportData;
            return this;
        }

        public Builder reportInfo(Map<String, String> reportInfo) {
            Utils.checkNotNull(reportInfo, "reportInfo");
            this.reportInfo = Optional.ofNullable(reportInfo);
            return this;
        }

        public Builder reportInfo(Optional<? extends Map<String, String>> reportInfo) {
            Utils.checkNotNull(reportInfo, "reportInfo");
            this.reportInfo = reportInfo;
            return this;
        }
        
        public CommerceReport build() {
            return new CommerceReport(
                dimensions,
                errors,
                measures,
                reportData,
                reportInfo);
        }
    }
}

