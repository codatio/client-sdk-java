/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class DataIntegritySummary {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("byAmount")
    private Optional<? extends DataIntegrityByAmount> byAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("byCount")
    private Optional<? extends DataIntegrityByCount> byCount;

    /**
     * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public DataIntegritySummary(
            @JsonProperty("byAmount") Optional<? extends DataIntegrityByAmount> byAmount,
            @JsonProperty("byCount") Optional<? extends DataIntegrityByCount> byCount,
            @JsonProperty("type") Optional<String> type) {
        Utils.checkNotNull(byAmount, "byAmount");
        Utils.checkNotNull(byCount, "byCount");
        Utils.checkNotNull(type, "type");
        this.byAmount = byAmount;
        this.byCount = byCount;
        this.type = type;
    }
    
    public DataIntegritySummary() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataIntegrityByAmount> byAmount() {
        return (Optional<DataIntegrityByAmount>) byAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataIntegrityByCount> byCount() {
        return (Optional<DataIntegrityByCount>) byCount;
    }

    /**
     * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DataIntegritySummary withByAmount(DataIntegrityByAmount byAmount) {
        Utils.checkNotNull(byAmount, "byAmount");
        this.byAmount = Optional.ofNullable(byAmount);
        return this;
    }

    public DataIntegritySummary withByAmount(Optional<? extends DataIntegrityByAmount> byAmount) {
        Utils.checkNotNull(byAmount, "byAmount");
        this.byAmount = byAmount;
        return this;
    }

    public DataIntegritySummary withByCount(DataIntegrityByCount byCount) {
        Utils.checkNotNull(byCount, "byCount");
        this.byCount = Optional.ofNullable(byCount);
        return this;
    }

    public DataIntegritySummary withByCount(Optional<? extends DataIntegrityByCount> byCount) {
        Utils.checkNotNull(byCount, "byCount");
        this.byCount = byCount;
        return this;
    }

    /**
     * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
     */
    public DataIntegritySummary withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
     */
    public DataIntegritySummary withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataIntegritySummary other = (DataIntegritySummary) o;
        return 
            Objects.deepEquals(this.byAmount, other.byAmount) &&
            Objects.deepEquals(this.byCount, other.byCount) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            byAmount,
            byCount,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataIntegritySummary.class,
                "byAmount", byAmount,
                "byCount", byCount,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends DataIntegrityByAmount> byAmount = Optional.empty();
 
        private Optional<? extends DataIntegrityByCount> byCount = Optional.empty();
 
        private Optional<String> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder byAmount(DataIntegrityByAmount byAmount) {
            Utils.checkNotNull(byAmount, "byAmount");
            this.byAmount = Optional.ofNullable(byAmount);
            return this;
        }

        public Builder byAmount(Optional<? extends DataIntegrityByAmount> byAmount) {
            Utils.checkNotNull(byAmount, "byAmount");
            this.byAmount = byAmount;
            return this;
        }

        public Builder byCount(DataIntegrityByCount byCount) {
            Utils.checkNotNull(byCount, "byCount");
            this.byCount = Optional.ofNullable(byCount);
            return this;
        }

        public Builder byCount(Optional<? extends DataIntegrityByCount> byCount) {
            Utils.checkNotNull(byCount, "byCount");
            this.byCount = byCount;
            return this;
        }

        /**
         * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The data type which the data type in the URL has been matched against. For example, if you've matched accountTransactions and banking-transactions, and you call this endpoint with accountTransactions in the URL, this property would be banking-transactions.
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public DataIntegritySummary build() {
            return new DataIntegritySummary(
                byAmount,
                byCount,
                type);
        }
    }
}

