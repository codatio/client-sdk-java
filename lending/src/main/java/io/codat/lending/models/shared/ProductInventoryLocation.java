/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class ProductInventoryLocation {

    /**
     * Reference to the geographic location where the order was placed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locationRef")
    private Optional<? extends LocationRef> locationRef;

    /**
     * The quantity of stock remaining at location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<? extends Double> quantity;

    public ProductInventoryLocation(
            @JsonProperty("locationRef") Optional<? extends LocationRef> locationRef,
            @JsonProperty("quantity") Optional<? extends Double> quantity) {
        Utils.checkNotNull(locationRef, "locationRef");
        Utils.checkNotNull(quantity, "quantity");
        this.locationRef = locationRef;
        this.quantity = quantity;
    }

    /**
     * Reference to the geographic location where the order was placed.
     */
    public Optional<? extends LocationRef> locationRef() {
        return locationRef;
    }

    /**
     * The quantity of stock remaining at location.
     */
    public Optional<? extends Double> quantity() {
        return quantity;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Reference to the geographic location where the order was placed.
     */
    public ProductInventoryLocation withLocationRef(LocationRef locationRef) {
        Utils.checkNotNull(locationRef, "locationRef");
        this.locationRef = Optional.ofNullable(locationRef);
        return this;
    }
    
    /**
     * Reference to the geographic location where the order was placed.
     */
    public ProductInventoryLocation withLocationRef(Optional<? extends LocationRef> locationRef) {
        Utils.checkNotNull(locationRef, "locationRef");
        this.locationRef = locationRef;
        return this;
    }

    /**
     * The quantity of stock remaining at location.
     */
    public ProductInventoryLocation withQuantity(double quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }
    
    /**
     * The quantity of stock remaining at location.
     */
    public ProductInventoryLocation withQuantity(Optional<? extends Double> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductInventoryLocation other = (ProductInventoryLocation) o;
        return 
            java.util.Objects.deepEquals(this.locationRef, other.locationRef) &&
            java.util.Objects.deepEquals(this.quantity, other.quantity);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            locationRef,
            quantity);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductInventoryLocation.class,
                "locationRef", locationRef,
                "quantity", quantity);
    }
    
    public final static class Builder {
 
        private Optional<? extends LocationRef> locationRef = Optional.empty();
 
        private Optional<? extends Double> quantity = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Reference to the geographic location where the order was placed.
         */
        public Builder locationRef(LocationRef locationRef) {
            Utils.checkNotNull(locationRef, "locationRef");
            this.locationRef = Optional.ofNullable(locationRef);
            return this;
        }
        
        /**
         * Reference to the geographic location where the order was placed.
         */
        public Builder locationRef(Optional<? extends LocationRef> locationRef) {
            Utils.checkNotNull(locationRef, "locationRef");
            this.locationRef = locationRef;
            return this;
        }

        /**
         * The quantity of stock remaining at location.
         */
        public Builder quantity(double quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }
        
        /**
         * The quantity of stock remaining at location.
         */
        public Builder quantity(Optional<? extends Double> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }
        
        public ProductInventoryLocation build() {
            return new ProductInventoryLocation(
                locationRef,
                quantity);
        }
    }
}

