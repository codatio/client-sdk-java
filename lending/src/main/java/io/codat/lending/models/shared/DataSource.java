/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class DataSource {

    /**
     * An array containing bank account data for each connected banking data source that have the following data types enabled: `banking-accounts`, `banking-transactions`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts")
    private Optional<? extends java.util.List<Accounts>> accounts;

    public DataSource(
            @JsonProperty("accounts") Optional<? extends java.util.List<Accounts>> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = accounts;
    }

    /**
     * An array containing bank account data for each connected banking data source that have the following data types enabled: `banking-accounts`, `banking-transactions`.
     */
    public Optional<? extends java.util.List<Accounts>> accounts() {
        return accounts;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An array containing bank account data for each connected banking data source that have the following data types enabled: `banking-accounts`, `banking-transactions`.
     */
    public DataSource withAccounts(java.util.List<Accounts> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = Optional.ofNullable(accounts);
        return this;
    }
    
    /**
     * An array containing bank account data for each connected banking data source that have the following data types enabled: `banking-accounts`, `banking-transactions`.
     */
    public DataSource withAccounts(Optional<? extends java.util.List<Accounts>> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = accounts;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataSource other = (DataSource) o;
        return 
            java.util.Objects.deepEquals(this.accounts, other.accounts);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accounts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataSource.class,
                "accounts", accounts);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<Accounts>> accounts = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array containing bank account data for each connected banking data source that have the following data types enabled: `banking-accounts`, `banking-transactions`.
         */
        public Builder accounts(java.util.List<Accounts> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = Optional.ofNullable(accounts);
            return this;
        }
        
        /**
         * An array containing bank account data for each connected banking data source that have the following data types enabled: `banking-accounts`, `banking-transactions`.
         */
        public Builder accounts(Optional<? extends java.util.List<Accounts>> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = accounts;
            return this;
        }
        
        public DataSource build() {
            return new DataSource(
                accounts);
        }
    }
}

