/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class EnhancedCashFlowTransaction {

    /**
     * An account reference containing the account id and name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountRef")
    private Optional<? extends AccountRef> accountRef;

    /**
     * The bank transaction amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Double> amount;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private Optional<? extends String> date;

    /**
     * The description of the bank transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * The unique identifier of the bank transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Returns the payment processor responsible for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformName")
    private Optional<? extends String> platformName;

    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceRef")
    private Optional<? extends SourceRef> sourceRef;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionCategory")
    private Optional<? extends TransactionCategory> transactionCategory;

    public EnhancedCashFlowTransaction(
            @JsonProperty("accountRef") Optional<? extends AccountRef> accountRef,
            @JsonProperty("amount") Optional<? extends Double> amount,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("date") Optional<? extends String> date,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("platformName") Optional<? extends String> platformName,
            @JsonProperty("sourceRef") Optional<? extends SourceRef> sourceRef,
            @JsonProperty("transactionCategory") Optional<? extends TransactionCategory> transactionCategory) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(platformName, "platformName");
        Utils.checkNotNull(sourceRef, "sourceRef");
        Utils.checkNotNull(transactionCategory, "transactionCategory");
        this.accountRef = accountRef;
        this.amount = amount;
        this.currency = currency;
        this.date = date;
        this.description = description;
        this.id = id;
        this.platformName = platformName;
        this.sourceRef = sourceRef;
        this.transactionCategory = transactionCategory;
    }

    /**
     * An account reference containing the account id and name.
     */
    public Optional<? extends AccountRef> accountRef() {
        return accountRef;
    }

    /**
     * The bank transaction amount.
     */
    public Optional<? extends Double> amount() {
        return amount;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public Optional<? extends String> currency() {
        return currency;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> date() {
        return date;
    }

    /**
     * The description of the bank transaction.
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * The unique identifier of the bank transaction.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Returns the payment processor responsible for the transaction.
     */
    public Optional<? extends String> platformName() {
        return platformName;
    }

    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    public Optional<? extends SourceRef> sourceRef() {
        return sourceRef;
    }

    public Optional<? extends TransactionCategory> transactionCategory() {
        return transactionCategory;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An account reference containing the account id and name.
     */
    public EnhancedCashFlowTransaction withAccountRef(AccountRef accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = Optional.ofNullable(accountRef);
        return this;
    }
    
    /**
     * An account reference containing the account id and name.
     */
    public EnhancedCashFlowTransaction withAccountRef(Optional<? extends AccountRef> accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

    /**
     * The bank transaction amount.
     */
    public EnhancedCashFlowTransaction withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }
    
    /**
     * The bank transaction amount.
     */
    public EnhancedCashFlowTransaction withAmount(Optional<? extends Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public EnhancedCashFlowTransaction withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }
    
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public EnhancedCashFlowTransaction withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public EnhancedCashFlowTransaction withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public EnhancedCashFlowTransaction withDate(Optional<? extends String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * The description of the bank transaction.
     */
    public EnhancedCashFlowTransaction withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }
    
    /**
     * The description of the bank transaction.
     */
    public EnhancedCashFlowTransaction withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The unique identifier of the bank transaction.
     */
    public EnhancedCashFlowTransaction withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }
    
    /**
     * The unique identifier of the bank transaction.
     */
    public EnhancedCashFlowTransaction withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Returns the payment processor responsible for the transaction.
     */
    public EnhancedCashFlowTransaction withPlatformName(String platformName) {
        Utils.checkNotNull(platformName, "platformName");
        this.platformName = Optional.ofNullable(platformName);
        return this;
    }
    
    /**
     * Returns the payment processor responsible for the transaction.
     */
    public EnhancedCashFlowTransaction withPlatformName(Optional<? extends String> platformName) {
        Utils.checkNotNull(platformName, "platformName");
        this.platformName = platformName;
        return this;
    }

    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    public EnhancedCashFlowTransaction withSourceRef(SourceRef sourceRef) {
        Utils.checkNotNull(sourceRef, "sourceRef");
        this.sourceRef = Optional.ofNullable(sourceRef);
        return this;
    }
    
    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    public EnhancedCashFlowTransaction withSourceRef(Optional<? extends SourceRef> sourceRef) {
        Utils.checkNotNull(sourceRef, "sourceRef");
        this.sourceRef = sourceRef;
        return this;
    }

    public EnhancedCashFlowTransaction withTransactionCategory(TransactionCategory transactionCategory) {
        Utils.checkNotNull(transactionCategory, "transactionCategory");
        this.transactionCategory = Optional.ofNullable(transactionCategory);
        return this;
    }
    
    public EnhancedCashFlowTransaction withTransactionCategory(Optional<? extends TransactionCategory> transactionCategory) {
        Utils.checkNotNull(transactionCategory, "transactionCategory");
        this.transactionCategory = transactionCategory;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnhancedCashFlowTransaction other = (EnhancedCashFlowTransaction) o;
        return 
            java.util.Objects.deepEquals(this.accountRef, other.accountRef) &&
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.date, other.date) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.platformName, other.platformName) &&
            java.util.Objects.deepEquals(this.sourceRef, other.sourceRef) &&
            java.util.Objects.deepEquals(this.transactionCategory, other.transactionCategory);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountRef,
            amount,
            currency,
            date,
            description,
            id,
            platformName,
            sourceRef,
            transactionCategory);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EnhancedCashFlowTransaction.class,
                "accountRef", accountRef,
                "amount", amount,
                "currency", currency,
                "date", date,
                "description", description,
                "id", id,
                "platformName", platformName,
                "sourceRef", sourceRef,
                "transactionCategory", transactionCategory);
    }
    
    public final static class Builder {
 
        private Optional<? extends AccountRef> accountRef = Optional.empty();
 
        private Optional<? extends Double> amount = Optional.empty();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private Optional<? extends String> date = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> platformName = Optional.empty();
 
        private Optional<? extends SourceRef> sourceRef = Optional.empty();
 
        private Optional<? extends TransactionCategory> transactionCategory = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An account reference containing the account id and name.
         */
        public Builder accountRef(AccountRef accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = Optional.ofNullable(accountRef);
            return this;
        }
        
        /**
         * An account reference containing the account id and name.
         */
        public Builder accountRef(Optional<? extends AccountRef> accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * The bank transaction amount.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }
        
        /**
         * The bank transaction amount.
         */
        public Builder amount(Optional<? extends Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }
        
        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder date(Optional<? extends String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        /**
         * The description of the bank transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }
        
        /**
         * The description of the bank transaction.
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The unique identifier of the bank transaction.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }
        
        /**
         * The unique identifier of the bank transaction.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Returns the payment processor responsible for the transaction.
         */
        public Builder platformName(String platformName) {
            Utils.checkNotNull(platformName, "platformName");
            this.platformName = Optional.ofNullable(platformName);
            return this;
        }
        
        /**
         * Returns the payment processor responsible for the transaction.
         */
        public Builder platformName(Optional<? extends String> platformName) {
            Utils.checkNotNull(platformName, "platformName");
            this.platformName = platformName;
            return this;
        }

        /**
         * A source reference containing the `sourceType` object "Banking".
         */
        public Builder sourceRef(SourceRef sourceRef) {
            Utils.checkNotNull(sourceRef, "sourceRef");
            this.sourceRef = Optional.ofNullable(sourceRef);
            return this;
        }
        
        /**
         * A source reference containing the `sourceType` object "Banking".
         */
        public Builder sourceRef(Optional<? extends SourceRef> sourceRef) {
            Utils.checkNotNull(sourceRef, "sourceRef");
            this.sourceRef = sourceRef;
            return this;
        }

        public Builder transactionCategory(TransactionCategory transactionCategory) {
            Utils.checkNotNull(transactionCategory, "transactionCategory");
            this.transactionCategory = Optional.ofNullable(transactionCategory);
            return this;
        }
        
        public Builder transactionCategory(Optional<? extends TransactionCategory> transactionCategory) {
            Utils.checkNotNull(transactionCategory, "transactionCategory");
            this.transactionCategory = transactionCategory;
            return this;
        }
        
        public EnhancedCashFlowTransaction build() {
            return new EnhancedCashFlowTransaction(
                accountRef,
                amount,
                currency,
                date,
                description,
                id,
                platformName,
                sourceRef,
                transactionCategory);
        }
    }
}

