/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * AccountBalanceAmounts - Depending on the data provided by the underlying bank, not all balances are always available.
 */

public class AccountBalanceAmounts {

    /**
     * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available")
    private JsonNullable<? extends BigDecimal> available;

    /**
     * The balance of the account only including cleared transactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current")
    private Optional<? extends BigDecimal> current;

    /**
     * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private JsonNullable<? extends BigDecimal> limit;

    @JsonCreator
    public AccountBalanceAmounts(
            @JsonProperty("available") JsonNullable<? extends BigDecimal> available,
            @JsonProperty("current") Optional<? extends BigDecimal> current,
            @JsonProperty("limit") JsonNullable<? extends BigDecimal> limit) {
        Utils.checkNotNull(available, "available");
        Utils.checkNotNull(current, "current");
        Utils.checkNotNull(limit, "limit");
        this.available = available;
        this.current = current;
        this.limit = limit;
    }
    
    public AccountBalanceAmounts() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> available() {
        return (JsonNullable<BigDecimal>) available;
    }

    /**
     * The balance of the account only including cleared transactions.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> current() {
        return (Optional<BigDecimal>) current;
    }

    /**
     * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> limit() {
        return (JsonNullable<BigDecimal>) limit;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
     */
    public AccountBalanceAmounts withAvailable(BigDecimal available) {
        Utils.checkNotNull(available, "available");
        this.available = JsonNullable.of(available);
        return this;
    }

        /**
         * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
         */
    public AccountBalanceAmounts withAvailable(double available) {
        this.available = JsonNullable.of(BigDecimal.valueOf(available));
        return this;
    }

    /**
     * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
     */
    public AccountBalanceAmounts withAvailable(JsonNullable<? extends BigDecimal> available) {
        Utils.checkNotNull(available, "available");
        this.available = available;
        return this;
    }

    /**
     * The balance of the account only including cleared transactions.
     */
    public AccountBalanceAmounts withCurrent(BigDecimal current) {
        Utils.checkNotNull(current, "current");
        this.current = Optional.ofNullable(current);
        return this;
    }

        /**
         * The balance of the account only including cleared transactions.
         */
    public AccountBalanceAmounts withCurrent(double current) {
        this.current = Optional.of(BigDecimal.valueOf(current));
        return this;
    }

    /**
     * The balance of the account only including cleared transactions.
     */
    public AccountBalanceAmounts withCurrent(Optional<? extends BigDecimal> current) {
        Utils.checkNotNull(current, "current");
        this.current = current;
        return this;
    }

    /**
     * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
     */
    public AccountBalanceAmounts withLimit(BigDecimal limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = JsonNullable.of(limit);
        return this;
    }

        /**
         * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
         */
    public AccountBalanceAmounts withLimit(double limit) {
        this.limit = JsonNullable.of(BigDecimal.valueOf(limit));
        return this;
    }

    /**
     * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
     */
    public AccountBalanceAmounts withLimit(JsonNullable<? extends BigDecimal> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountBalanceAmounts other = (AccountBalanceAmounts) o;
        return 
            Objects.deepEquals(this.available, other.available) &&
            Objects.deepEquals(this.current, other.current) &&
            Objects.deepEquals(this.limit, other.limit);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            available,
            current,
            limit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountBalanceAmounts.class,
                "available", available,
                "current", current,
                "limit", limit);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends BigDecimal> available = JsonNullable.undefined();
 
        private Optional<? extends BigDecimal> current = Optional.empty();
 
        private JsonNullable<? extends BigDecimal> limit = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
         */
        public Builder available(BigDecimal available) {
            Utils.checkNotNull(available, "available");
            this.available = JsonNullable.of(available);
            return this;
        }

        /**
         * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
         */
        public Builder available(double available) {
            this.available = JsonNullable.of(BigDecimal.valueOf(available));
            return this;
        }

        /**
         * The balance available in the account, including any pending transactions. This doesn't include additional funds available from any overdrafts.
         */
        public Builder available(JsonNullable<? extends BigDecimal> available) {
            Utils.checkNotNull(available, "available");
            this.available = available;
            return this;
        }

        /**
         * The balance of the account only including cleared transactions.
         */
        public Builder current(BigDecimal current) {
            Utils.checkNotNull(current, "current");
            this.current = Optional.ofNullable(current);
            return this;
        }

        /**
         * The balance of the account only including cleared transactions.
         */
        public Builder current(double current) {
            this.current = Optional.of(BigDecimal.valueOf(current));
            return this;
        }

        /**
         * The balance of the account only including cleared transactions.
         */
        public Builder current(Optional<? extends BigDecimal> current) {
            Utils.checkNotNull(current, "current");
            this.current = current;
            return this;
        }

        /**
         * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
         */
        public Builder limit(BigDecimal limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = JsonNullable.of(limit);
            return this;
        }

        /**
         * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
         */
        public Builder limit(double limit) {
            this.limit = JsonNullable.of(BigDecimal.valueOf(limit));
            return this;
        }

        /**
         * The minimum allowed balance for the account. For example, a $100.00 overdraft would show as a limit of `-100.00`.
         */
        public Builder limit(JsonNullable<? extends BigDecimal> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }
        
        public AccountBalanceAmounts build() {
            return new AccountBalanceAmounts(
                available,
                current,
                limit);
        }
    }
}

