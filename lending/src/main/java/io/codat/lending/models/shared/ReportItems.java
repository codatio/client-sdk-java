/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class ReportItems {

    /**
     * The loan transaction amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<? extends Double> amount;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private Optional<? extends String> date;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemRef")
    private Optional<? extends ItemRef> itemRef;

    /**
     * The name of lender providing the loan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lenderName")
    private Optional<? extends String> lenderName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loanRef")
    private Optional<? extends LoanRef> loanRef;

    /**
     * The type of loan transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loanTransactionType")
    private Optional<? extends LoanTransactionType> loanTransactionType;

    public ReportItems(
            @JsonProperty("amount") Optional<? extends Double> amount,
            @JsonProperty("date") Optional<? extends String> date,
            @JsonProperty("itemRef") Optional<? extends ItemRef> itemRef,
            @JsonProperty("lenderName") Optional<? extends String> lenderName,
            @JsonProperty("loanRef") Optional<? extends LoanRef> loanRef,
            @JsonProperty("loanTransactionType") Optional<? extends LoanTransactionType> loanTransactionType) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(itemRef, "itemRef");
        Utils.checkNotNull(lenderName, "lenderName");
        Utils.checkNotNull(loanRef, "loanRef");
        Utils.checkNotNull(loanTransactionType, "loanTransactionType");
        this.amount = amount;
        this.date = date;
        this.itemRef = itemRef;
        this.lenderName = lenderName;
        this.loanRef = loanRef;
        this.loanTransactionType = loanTransactionType;
    }

    /**
     * The loan transaction amount.
     */
    public Optional<? extends Double> amount() {
        return amount;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> date() {
        return date;
    }

    public Optional<? extends ItemRef> itemRef() {
        return itemRef;
    }

    /**
     * The name of lender providing the loan.
     */
    public Optional<? extends String> lenderName() {
        return lenderName;
    }

    public Optional<? extends LoanRef> loanRef() {
        return loanRef;
    }

    /**
     * The type of loan transaction.
     */
    public Optional<? extends LoanTransactionType> loanTransactionType() {
        return loanTransactionType;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The loan transaction amount.
     */
    public ReportItems withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }
    
    /**
     * The loan transaction amount.
     */
    public ReportItems withAmount(Optional<? extends Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ReportItems withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public ReportItems withDate(Optional<? extends String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public ReportItems withItemRef(ItemRef itemRef) {
        Utils.checkNotNull(itemRef, "itemRef");
        this.itemRef = Optional.ofNullable(itemRef);
        return this;
    }
    
    public ReportItems withItemRef(Optional<? extends ItemRef> itemRef) {
        Utils.checkNotNull(itemRef, "itemRef");
        this.itemRef = itemRef;
        return this;
    }

    /**
     * The name of lender providing the loan.
     */
    public ReportItems withLenderName(String lenderName) {
        Utils.checkNotNull(lenderName, "lenderName");
        this.lenderName = Optional.ofNullable(lenderName);
        return this;
    }
    
    /**
     * The name of lender providing the loan.
     */
    public ReportItems withLenderName(Optional<? extends String> lenderName) {
        Utils.checkNotNull(lenderName, "lenderName");
        this.lenderName = lenderName;
        return this;
    }

    public ReportItems withLoanRef(LoanRef loanRef) {
        Utils.checkNotNull(loanRef, "loanRef");
        this.loanRef = Optional.ofNullable(loanRef);
        return this;
    }
    
    public ReportItems withLoanRef(Optional<? extends LoanRef> loanRef) {
        Utils.checkNotNull(loanRef, "loanRef");
        this.loanRef = loanRef;
        return this;
    }

    /**
     * The type of loan transaction.
     */
    public ReportItems withLoanTransactionType(LoanTransactionType loanTransactionType) {
        Utils.checkNotNull(loanTransactionType, "loanTransactionType");
        this.loanTransactionType = Optional.ofNullable(loanTransactionType);
        return this;
    }
    
    /**
     * The type of loan transaction.
     */
    public ReportItems withLoanTransactionType(Optional<? extends LoanTransactionType> loanTransactionType) {
        Utils.checkNotNull(loanTransactionType, "loanTransactionType");
        this.loanTransactionType = loanTransactionType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportItems other = (ReportItems) o;
        return 
            java.util.Objects.deepEquals(this.amount, other.amount) &&
            java.util.Objects.deepEquals(this.date, other.date) &&
            java.util.Objects.deepEquals(this.itemRef, other.itemRef) &&
            java.util.Objects.deepEquals(this.lenderName, other.lenderName) &&
            java.util.Objects.deepEquals(this.loanRef, other.loanRef) &&
            java.util.Objects.deepEquals(this.loanTransactionType, other.loanTransactionType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            amount,
            date,
            itemRef,
            lenderName,
            loanRef,
            loanTransactionType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportItems.class,
                "amount", amount,
                "date", date,
                "itemRef", itemRef,
                "lenderName", lenderName,
                "loanRef", loanRef,
                "loanTransactionType", loanTransactionType);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> amount = Optional.empty();
 
        private Optional<? extends String> date = Optional.empty();
 
        private Optional<? extends ItemRef> itemRef = Optional.empty();
 
        private Optional<? extends String> lenderName = Optional.empty();
 
        private Optional<? extends LoanRef> loanRef = Optional.empty();
 
        private Optional<? extends LoanTransactionType> loanTransactionType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The loan transaction amount.
         */
        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }
        
        /**
         * The loan transaction amount.
         */
        public Builder amount(Optional<? extends Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder date(Optional<? extends String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder itemRef(ItemRef itemRef) {
            Utils.checkNotNull(itemRef, "itemRef");
            this.itemRef = Optional.ofNullable(itemRef);
            return this;
        }
        
        public Builder itemRef(Optional<? extends ItemRef> itemRef) {
            Utils.checkNotNull(itemRef, "itemRef");
            this.itemRef = itemRef;
            return this;
        }

        /**
         * The name of lender providing the loan.
         */
        public Builder lenderName(String lenderName) {
            Utils.checkNotNull(lenderName, "lenderName");
            this.lenderName = Optional.ofNullable(lenderName);
            return this;
        }
        
        /**
         * The name of lender providing the loan.
         */
        public Builder lenderName(Optional<? extends String> lenderName) {
            Utils.checkNotNull(lenderName, "lenderName");
            this.lenderName = lenderName;
            return this;
        }

        public Builder loanRef(LoanRef loanRef) {
            Utils.checkNotNull(loanRef, "loanRef");
            this.loanRef = Optional.ofNullable(loanRef);
            return this;
        }
        
        public Builder loanRef(Optional<? extends LoanRef> loanRef) {
            Utils.checkNotNull(loanRef, "loanRef");
            this.loanRef = loanRef;
            return this;
        }

        /**
         * The type of loan transaction.
         */
        public Builder loanTransactionType(LoanTransactionType loanTransactionType) {
            Utils.checkNotNull(loanTransactionType, "loanTransactionType");
            this.loanTransactionType = Optional.ofNullable(loanTransactionType);
            return this;
        }
        
        /**
         * The type of loan transaction.
         */
        public Builder loanTransactionType(Optional<? extends LoanTransactionType> loanTransactionType) {
            Utils.checkNotNull(loanTransactionType, "loanTransactionType");
            this.loanTransactionType = loanTransactionType;
            return this;
        }
        
        public ReportItems build() {
            return new ReportItems(
                amount,
                date,
                itemRef,
                lenderName,
                loanRef,
                loanTransactionType);
        }
    }
}

