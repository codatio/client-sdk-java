/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountingCustomerRef {

    /**
     * `customerName` from the Customer data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyName")
    private JsonNullable<String> companyName;

    /**
     * `id` from the Customers data type
     */
    @JsonProperty("id")
    private String id;

    @JsonCreator
    public AccountingCustomerRef(
            @JsonProperty("companyName") JsonNullable<String> companyName,
            @JsonProperty("id") String id) {
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(id, "id");
        this.companyName = companyName;
        this.id = id;
    }
    
    public AccountingCustomerRef(
            String id) {
        this(JsonNullable.undefined(), id);
    }

    /**
     * `customerName` from the Customer data type
     */
    @JsonIgnore
    public JsonNullable<String> companyName() {
        return companyName;
    }

    /**
     * `id` from the Customers data type
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * `customerName` from the Customer data type
     */
    public AccountingCustomerRef withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * `customerName` from the Customer data type
     */
    public AccountingCustomerRef withCompanyName(JsonNullable<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * `id` from the Customers data type
     */
    public AccountingCustomerRef withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingCustomerRef other = (AccountingCustomerRef) o;
        return 
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyName,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingCustomerRef.class,
                "companyName", companyName,
                "id", id);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> companyName = JsonNullable.undefined();
 
        private String id;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * `customerName` from the Customer data type
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * `customerName` from the Customer data type
         */
        public Builder companyName(JsonNullable<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * `id` from the Customers data type
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public AccountingCustomerRef build() {
            return new AccountingCustomerRef(
                companyName,
                id);
        }
    }
}

