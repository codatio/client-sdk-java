/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class PhoneNumber {

    /**
     * A phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private JsonNullable<String> number;

    /**
     * The type of phone number
     */
    @JsonProperty("type")
    private PhoneNumberType type;

    @JsonCreator
    public PhoneNumber(
            @JsonProperty("number") JsonNullable<String> number,
            @JsonProperty("type") PhoneNumberType type) {
        Utils.checkNotNull(number, "number");
        Utils.checkNotNull(type, "type");
        this.number = number;
        this.type = type;
    }
    
    public PhoneNumber(
            PhoneNumberType type) {
        this(JsonNullable.undefined(), type);
    }

    /**
     * A phone number.
     */
    @JsonIgnore
    public JsonNullable<String> number() {
        return number;
    }

    /**
     * The type of phone number
     */
    @JsonIgnore
    public PhoneNumberType type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A phone number.
     */
    public PhoneNumber withNumber(String number) {
        Utils.checkNotNull(number, "number");
        this.number = JsonNullable.of(number);
        return this;
    }

    /**
     * A phone number.
     */
    public PhoneNumber withNumber(JsonNullable<String> number) {
        Utils.checkNotNull(number, "number");
        this.number = number;
        return this;
    }

    /**
     * The type of phone number
     */
    public PhoneNumber withType(PhoneNumberType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PhoneNumber other = (PhoneNumber) o;
        return 
            Objects.deepEquals(this.number, other.number) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            number,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PhoneNumber.class,
                "number", number,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> number = JsonNullable.undefined();
 
        private PhoneNumberType type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A phone number.
         */
        public Builder number(String number) {
            Utils.checkNotNull(number, "number");
            this.number = JsonNullable.of(number);
            return this;
        }

        /**
         * A phone number.
         */
        public Builder number(JsonNullable<String> number) {
            Utils.checkNotNull(number, "number");
            this.number = number;
            return this;
        }

        /**
         * The type of phone number
         */
        public Builder type(PhoneNumberType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public PhoneNumber build() {
            return new PhoneNumber(
                number,
                type);
        }
    }
}

