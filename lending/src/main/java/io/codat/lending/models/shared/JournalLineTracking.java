/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * JournalLineTracking - List of record refs associated with the tracking information for the line (eg to a Tracking Category, or customer etc.)
 */

public class JournalLineTracking {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordRefs")
    private JsonNullable<? extends java.util.List<TrackingRecordRef>> recordRefs;

    public JournalLineTracking(
            @JsonProperty("recordRefs") JsonNullable<? extends java.util.List<TrackingRecordRef>> recordRefs) {
        Utils.checkNotNull(recordRefs, "recordRefs");
        this.recordRefs = recordRefs;
    }

    public JsonNullable<? extends java.util.List<TrackingRecordRef>> recordRefs() {
        return recordRefs;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public JournalLineTracking withRecordRefs(java.util.List<TrackingRecordRef> recordRefs) {
        Utils.checkNotNull(recordRefs, "recordRefs");
        this.recordRefs = JsonNullable.of(recordRefs);
        return this;
    }

    public JournalLineTracking withRecordRefs(JsonNullable<? extends java.util.List<TrackingRecordRef>> recordRefs) {
        Utils.checkNotNull(recordRefs, "recordRefs");
        this.recordRefs = recordRefs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JournalLineTracking other = (JournalLineTracking) o;
        return 
            java.util.Objects.deepEquals(this.recordRefs, other.recordRefs);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            recordRefs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(JournalLineTracking.class,
                "recordRefs", recordRefs);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends java.util.List<TrackingRecordRef>> recordRefs = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder recordRefs(java.util.List<TrackingRecordRef> recordRefs) {
            Utils.checkNotNull(recordRefs, "recordRefs");
            this.recordRefs = JsonNullable.of(recordRefs);
            return this;
        }

        public Builder recordRefs(JsonNullable<? extends java.util.List<TrackingRecordRef>> recordRefs) {
            Utils.checkNotNull(recordRefs, "recordRefs");
            this.recordRefs = recordRefs;
            return this;
        }
        
        public JournalLineTracking build() {
            return new JournalLineTracking(
                recordRefs);
        }
    }
}

