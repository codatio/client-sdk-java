/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class AgedCreditor {

    /**
     * Array of aged creditors by currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agedCurrencyOutstanding")
    private Optional<? extends List<AgedCurrencyOutstanding>> agedCurrencyOutstanding;

    /**
     * Supplier ID of the aged creditor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierId")
    private Optional<String> supplierId;

    /**
     * Supplier name of the aged creditor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierName")
    private Optional<String> supplierName;

    @JsonCreator
    public AgedCreditor(
            @JsonProperty("agedCurrencyOutstanding") Optional<? extends List<AgedCurrencyOutstanding>> agedCurrencyOutstanding,
            @JsonProperty("supplierId") Optional<String> supplierId,
            @JsonProperty("supplierName") Optional<String> supplierName) {
        Utils.checkNotNull(agedCurrencyOutstanding, "agedCurrencyOutstanding");
        Utils.checkNotNull(supplierId, "supplierId");
        Utils.checkNotNull(supplierName, "supplierName");
        this.agedCurrencyOutstanding = agedCurrencyOutstanding;
        this.supplierId = supplierId;
        this.supplierName = supplierName;
    }
    
    public AgedCreditor() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Array of aged creditors by currency.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AgedCurrencyOutstanding>> agedCurrencyOutstanding() {
        return (Optional<List<AgedCurrencyOutstanding>>) agedCurrencyOutstanding;
    }

    /**
     * Supplier ID of the aged creditor.
     */
    @JsonIgnore
    public Optional<String> supplierId() {
        return supplierId;
    }

    /**
     * Supplier name of the aged creditor.
     */
    @JsonIgnore
    public Optional<String> supplierName() {
        return supplierName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Array of aged creditors by currency.
     */
    public AgedCreditor withAgedCurrencyOutstanding(List<AgedCurrencyOutstanding> agedCurrencyOutstanding) {
        Utils.checkNotNull(agedCurrencyOutstanding, "agedCurrencyOutstanding");
        this.agedCurrencyOutstanding = Optional.ofNullable(agedCurrencyOutstanding);
        return this;
    }

    /**
     * Array of aged creditors by currency.
     */
    public AgedCreditor withAgedCurrencyOutstanding(Optional<? extends List<AgedCurrencyOutstanding>> agedCurrencyOutstanding) {
        Utils.checkNotNull(agedCurrencyOutstanding, "agedCurrencyOutstanding");
        this.agedCurrencyOutstanding = agedCurrencyOutstanding;
        return this;
    }

    /**
     * Supplier ID of the aged creditor.
     */
    public AgedCreditor withSupplierId(String supplierId) {
        Utils.checkNotNull(supplierId, "supplierId");
        this.supplierId = Optional.ofNullable(supplierId);
        return this;
    }

    /**
     * Supplier ID of the aged creditor.
     */
    public AgedCreditor withSupplierId(Optional<String> supplierId) {
        Utils.checkNotNull(supplierId, "supplierId");
        this.supplierId = supplierId;
        return this;
    }

    /**
     * Supplier name of the aged creditor.
     */
    public AgedCreditor withSupplierName(String supplierName) {
        Utils.checkNotNull(supplierName, "supplierName");
        this.supplierName = Optional.ofNullable(supplierName);
        return this;
    }

    /**
     * Supplier name of the aged creditor.
     */
    public AgedCreditor withSupplierName(Optional<String> supplierName) {
        Utils.checkNotNull(supplierName, "supplierName");
        this.supplierName = supplierName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AgedCreditor other = (AgedCreditor) o;
        return 
            Objects.deepEquals(this.agedCurrencyOutstanding, other.agedCurrencyOutstanding) &&
            Objects.deepEquals(this.supplierId, other.supplierId) &&
            Objects.deepEquals(this.supplierName, other.supplierName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agedCurrencyOutstanding,
            supplierId,
            supplierName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AgedCreditor.class,
                "agedCurrencyOutstanding", agedCurrencyOutstanding,
                "supplierId", supplierId,
                "supplierName", supplierName);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AgedCurrencyOutstanding>> agedCurrencyOutstanding = Optional.empty();
 
        private Optional<String> supplierId = Optional.empty();
 
        private Optional<String> supplierName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Array of aged creditors by currency.
         */
        public Builder agedCurrencyOutstanding(List<AgedCurrencyOutstanding> agedCurrencyOutstanding) {
            Utils.checkNotNull(agedCurrencyOutstanding, "agedCurrencyOutstanding");
            this.agedCurrencyOutstanding = Optional.ofNullable(agedCurrencyOutstanding);
            return this;
        }

        /**
         * Array of aged creditors by currency.
         */
        public Builder agedCurrencyOutstanding(Optional<? extends List<AgedCurrencyOutstanding>> agedCurrencyOutstanding) {
            Utils.checkNotNull(agedCurrencyOutstanding, "agedCurrencyOutstanding");
            this.agedCurrencyOutstanding = agedCurrencyOutstanding;
            return this;
        }

        /**
         * Supplier ID of the aged creditor.
         */
        public Builder supplierId(String supplierId) {
            Utils.checkNotNull(supplierId, "supplierId");
            this.supplierId = Optional.ofNullable(supplierId);
            return this;
        }

        /**
         * Supplier ID of the aged creditor.
         */
        public Builder supplierId(Optional<String> supplierId) {
            Utils.checkNotNull(supplierId, "supplierId");
            this.supplierId = supplierId;
            return this;
        }

        /**
         * Supplier name of the aged creditor.
         */
        public Builder supplierName(String supplierName) {
            Utils.checkNotNull(supplierName, "supplierName");
            this.supplierName = Optional.ofNullable(supplierName);
            return this;
        }

        /**
         * Supplier name of the aged creditor.
         */
        public Builder supplierName(Optional<String> supplierName) {
            Utils.checkNotNull(supplierName, "supplierName");
            this.supplierName = supplierName;
            return this;
        }
        
        public AgedCreditor build() {
            return new AgedCreditor(
                agedCurrencyOutstanding,
                supplierId,
                supplierName);
        }
    }
}

