/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;

/**
 * AccountCategoryLevel - An object containing an ordered list of account category levels.
 */

public class AccountCategoryLevel {

    /**
     * Confidence level of the category. This will only be populated where `status` is `Suggested`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("confidence")
    private Optional<? extends BigDecimal> confidence;

    /**
     * Account category name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("levelName")
    private Optional<String> levelName;

    @JsonCreator
    public AccountCategoryLevel(
            @JsonProperty("confidence") Optional<? extends BigDecimal> confidence,
            @JsonProperty("levelName") Optional<String> levelName) {
        Utils.checkNotNull(confidence, "confidence");
        Utils.checkNotNull(levelName, "levelName");
        this.confidence = confidence;
        this.levelName = levelName;
    }
    
    public AccountCategoryLevel() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Confidence level of the category. This will only be populated where `status` is `Suggested`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> confidence() {
        return (Optional<BigDecimal>) confidence;
    }

    /**
     * Account category name.
     */
    @JsonIgnore
    public Optional<String> levelName() {
        return levelName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Confidence level of the category. This will only be populated where `status` is `Suggested`.
     */
    public AccountCategoryLevel withConfidence(BigDecimal confidence) {
        Utils.checkNotNull(confidence, "confidence");
        this.confidence = Optional.ofNullable(confidence);
        return this;
    }

        /**
         * Confidence level of the category. This will only be populated where `status` is `Suggested`.
         */
    public AccountCategoryLevel withConfidence(double confidence) {
        this.confidence = Optional.of(BigDecimal.valueOf(confidence));
        return this;
    }

    /**
     * Confidence level of the category. This will only be populated where `status` is `Suggested`.
     */
    public AccountCategoryLevel withConfidence(Optional<? extends BigDecimal> confidence) {
        Utils.checkNotNull(confidence, "confidence");
        this.confidence = confidence;
        return this;
    }

    /**
     * Account category name.
     */
    public AccountCategoryLevel withLevelName(String levelName) {
        Utils.checkNotNull(levelName, "levelName");
        this.levelName = Optional.ofNullable(levelName);
        return this;
    }

    /**
     * Account category name.
     */
    public AccountCategoryLevel withLevelName(Optional<String> levelName) {
        Utils.checkNotNull(levelName, "levelName");
        this.levelName = levelName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountCategoryLevel other = (AccountCategoryLevel) o;
        return 
            Objects.deepEquals(this.confidence, other.confidence) &&
            Objects.deepEquals(this.levelName, other.levelName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            confidence,
            levelName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountCategoryLevel.class,
                "confidence", confidence,
                "levelName", levelName);
    }
    
    public final static class Builder {
 
        private Optional<? extends BigDecimal> confidence = Optional.empty();
 
        private Optional<String> levelName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Confidence level of the category. This will only be populated where `status` is `Suggested`.
         */
        public Builder confidence(BigDecimal confidence) {
            Utils.checkNotNull(confidence, "confidence");
            this.confidence = Optional.ofNullable(confidence);
            return this;
        }

        /**
         * Confidence level of the category. This will only be populated where `status` is `Suggested`.
         */
        public Builder confidence(double confidence) {
            this.confidence = Optional.of(BigDecimal.valueOf(confidence));
            return this;
        }

        /**
         * Confidence level of the category. This will only be populated where `status` is `Suggested`.
         */
        public Builder confidence(Optional<? extends BigDecimal> confidence) {
            Utils.checkNotNull(confidence, "confidence");
            this.confidence = confidence;
            return this;
        }

        /**
         * Account category name.
         */
        public Builder levelName(String levelName) {
            Utils.checkNotNull(levelName, "levelName");
            this.levelName = Optional.ofNullable(levelName);
            return this;
        }

        /**
         * Account category name.
         */
        public Builder levelName(Optional<String> levelName) {
            Utils.checkNotNull(levelName, "levelName");
            this.levelName = levelName;
            return this;
        }
        
        public AccountCategoryLevel build() {
            return new AccountCategoryLevel(
                confidence,
                levelName);
        }
    }
}

