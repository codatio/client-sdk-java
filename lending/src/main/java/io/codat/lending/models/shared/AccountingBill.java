/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * AccountingBill - &gt; **Invoices or bills?**
 * &gt;
 * &gt; We distinguish between invoices where the company *owes money* vs. *is owed money*. If the company has received an invoice, and owes money to someone else (accounts payable) we call this a Bill.
 * &gt;
 * &gt; See [Invoices](https://docs.codat.io/lending-api#/schemas/Invoice) for the accounts receivable equivalent of bills.
 * 
 * ## Overview
 * 
 * In Codat, a bill contains details of:
 * * When the bill was recorded in the accounting system.
 * * How much the bill is for and the currency of the amount.
 * * Who the bill was received from — the *supplier*.
 * * What the bill is for — the *line items*.
 * 
 * Some accounting software give a separate name to purchases where the payment is made immediately, such as something bought with a credit card or online payment. One example of this would be QuickBooks Online's *expenses*.
 * 
 * You can find these types of transactions in our [Direct costs](https://docs.codat.io/lending-api#/schemas/DirectCost) data model.
 */

public class AccountingBill {

    /**
     * Amount outstanding on the bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountDue")
    private JsonNullable<? extends BigDecimal> amountDue;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyRate")
    private JsonNullable<? extends BigDecimal> currencyRate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueDate")
    private Optional<String> dueDate;

    /**
     * Identifier for the bill, unique for the company in the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonProperty("issueDate")
    private String issueDate;

    /**
     * Array of Bill line items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineItems")
    private JsonNullable<? extends List<BillLineItem>> lineItems;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends Metadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<String> modifiedDate;

    /**
     * Any private, company notes about the bill, such as payment information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<String> note;

    /**
     * An array of payment allocations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentAllocations")
    private JsonNullable<? extends List<AccountingPaymentAllocation>> paymentAllocations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchaseOrderRefs")
    private JsonNullable<? extends List<PurchaseOrderReference>> purchaseOrderRefs;

    /**
     * User-friendly reference for the bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<String> reference;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<String> sourceModifiedDate;

    /**
     * Current state of the bill.
     */
    @JsonProperty("status")
    private BillStatus status;

    /**
     * Total amount of the bill, excluding any taxes.
     */
    @JsonProperty("subTotal")
    private BigDecimal subTotal;

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalData")
    private Optional<? extends SupplementalData> supplementalData;

    /**
     * Reference to the supplier the record relates to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierRef")
    private Optional<? extends SupplierRef> supplierRef;

    /**
     * Amount of tax on the bill.
     */
    @JsonProperty("taxAmount")
    private BigDecimal taxAmount;

    /**
     * Amount of the bill, including tax.
     */
    @JsonProperty("totalAmount")
    private BigDecimal totalAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withholdingTax")
    private JsonNullable<? extends List<WithholdingTax>> withholdingTax;

    @JsonCreator
    public AccountingBill(
            @JsonProperty("amountDue") JsonNullable<? extends BigDecimal> amountDue,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("currencyRate") JsonNullable<? extends BigDecimal> currencyRate,
            @JsonProperty("dueDate") Optional<String> dueDate,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("issueDate") String issueDate,
            @JsonProperty("lineItems") JsonNullable<? extends List<BillLineItem>> lineItems,
            @JsonProperty("metadata") Optional<? extends Metadata> metadata,
            @JsonProperty("modifiedDate") Optional<String> modifiedDate,
            @JsonProperty("note") JsonNullable<String> note,
            @JsonProperty("paymentAllocations") JsonNullable<? extends List<AccountingPaymentAllocation>> paymentAllocations,
            @JsonProperty("purchaseOrderRefs") JsonNullable<? extends List<PurchaseOrderReference>> purchaseOrderRefs,
            @JsonProperty("reference") JsonNullable<String> reference,
            @JsonProperty("sourceModifiedDate") Optional<String> sourceModifiedDate,
            @JsonProperty("status") BillStatus status,
            @JsonProperty("subTotal") BigDecimal subTotal,
            @JsonProperty("supplementalData") Optional<? extends SupplementalData> supplementalData,
            @JsonProperty("supplierRef") Optional<? extends SupplierRef> supplierRef,
            @JsonProperty("taxAmount") BigDecimal taxAmount,
            @JsonProperty("totalAmount") BigDecimal totalAmount,
            @JsonProperty("withholdingTax") JsonNullable<? extends List<WithholdingTax>> withholdingTax) {
        Utils.checkNotNull(amountDue, "amountDue");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(issueDate, "issueDate");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        Utils.checkNotNull(purchaseOrderRefs, "purchaseOrderRefs");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(subTotal, "subTotal");
        Utils.checkNotNull(supplementalData, "supplementalData");
        Utils.checkNotNull(supplierRef, "supplierRef");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(withholdingTax, "withholdingTax");
        this.amountDue = amountDue;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.dueDate = dueDate;
        this.id = id;
        this.issueDate = issueDate;
        this.lineItems = lineItems;
        this.metadata = metadata;
        this.modifiedDate = modifiedDate;
        this.note = note;
        this.paymentAllocations = paymentAllocations;
        this.purchaseOrderRefs = purchaseOrderRefs;
        this.reference = reference;
        this.sourceModifiedDate = sourceModifiedDate;
        this.status = status;
        this.subTotal = subTotal;
        this.supplementalData = supplementalData;
        this.supplierRef = supplierRef;
        this.taxAmount = taxAmount;
        this.totalAmount = totalAmount;
        this.withholdingTax = withholdingTax;
    }
    
    public AccountingBill(
            String issueDate,
            BillStatus status,
            BigDecimal subTotal,
            BigDecimal taxAmount,
            BigDecimal totalAmount) {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), issueDate, JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), status, subTotal, Optional.empty(), Optional.empty(), taxAmount, totalAmount, JsonNullable.undefined());
    }

    /**
     * Amount outstanding on the bill.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> amountDue() {
        return (JsonNullable<BigDecimal>) amountDue;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> currencyRate() {
        return (JsonNullable<BigDecimal>) currencyRate;
    }

    @JsonIgnore
    public Optional<String> dueDate() {
        return dueDate;
    }

    /**
     * Identifier for the bill, unique for the company in the accounting software.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public String issueDate() {
        return issueDate;
    }

    /**
     * Array of Bill line items.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<BillLineItem>> lineItems() {
        return (JsonNullable<List<BillLineItem>>) lineItems;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Metadata> metadata() {
        return (Optional<Metadata>) metadata;
    }

    @JsonIgnore
    public Optional<String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * Any private, company notes about the bill, such as payment information.
     */
    @JsonIgnore
    public JsonNullable<String> note() {
        return note;
    }

    /**
     * An array of payment allocations.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<AccountingPaymentAllocation>> paymentAllocations() {
        return (JsonNullable<List<AccountingPaymentAllocation>>) paymentAllocations;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<PurchaseOrderReference>> purchaseOrderRefs() {
        return (JsonNullable<List<PurchaseOrderReference>>) purchaseOrderRefs;
    }

    /**
     * User-friendly reference for the bill.
     */
    @JsonIgnore
    public JsonNullable<String> reference() {
        return reference;
    }

    @JsonIgnore
    public Optional<String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * Current state of the bill.
     */
    @JsonIgnore
    public BillStatus status() {
        return status;
    }

    /**
     * Total amount of the bill, excluding any taxes.
     */
    @JsonIgnore
    public BigDecimal subTotal() {
        return subTotal;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SupplementalData> supplementalData() {
        return (Optional<SupplementalData>) supplementalData;
    }

    /**
     * Reference to the supplier the record relates to.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SupplierRef> supplierRef() {
        return (Optional<SupplierRef>) supplierRef;
    }

    /**
     * Amount of tax on the bill.
     */
    @JsonIgnore
    public BigDecimal taxAmount() {
        return taxAmount;
    }

    /**
     * Amount of the bill, including tax.
     */
    @JsonIgnore
    public BigDecimal totalAmount() {
        return totalAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<WithholdingTax>> withholdingTax() {
        return (JsonNullable<List<WithholdingTax>>) withholdingTax;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Amount outstanding on the bill.
     */
    public AccountingBill withAmountDue(BigDecimal amountDue) {
        Utils.checkNotNull(amountDue, "amountDue");
        this.amountDue = JsonNullable.of(amountDue);
        return this;
    }

        /**
         * Amount outstanding on the bill.
         */
    public AccountingBill withAmountDue(double amountDue) {
        this.amountDue = JsonNullable.of(BigDecimal.valueOf(amountDue));
        return this;
    }

    /**
     * Amount outstanding on the bill.
     */
    public AccountingBill withAmountDue(JsonNullable<? extends BigDecimal> amountDue) {
        Utils.checkNotNull(amountDue, "amountDue");
        this.amountDue = amountDue;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public AccountingBill withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public AccountingBill withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
     */
    public AccountingBill withCurrencyRate(BigDecimal currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
         */
    public AccountingBill withCurrencyRate(double currencyRate) {
        this.currencyRate = JsonNullable.of(BigDecimal.valueOf(currencyRate));
        return this;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
     */
    public AccountingBill withCurrencyRate(JsonNullable<? extends BigDecimal> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    public AccountingBill withDueDate(String dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = Optional.ofNullable(dueDate);
        return this;
    }

    public AccountingBill withDueDate(Optional<String> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * Identifier for the bill, unique for the company in the accounting software.
     */
    public AccountingBill withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Identifier for the bill, unique for the company in the accounting software.
     */
    public AccountingBill withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingBill withIssueDate(String issueDate) {
        Utils.checkNotNull(issueDate, "issueDate");
        this.issueDate = issueDate;
        return this;
    }

    /**
     * Array of Bill line items.
     */
    public AccountingBill withLineItems(List<BillLineItem> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = JsonNullable.of(lineItems);
        return this;
    }

    /**
     * Array of Bill line items.
     */
    public AccountingBill withLineItems(JsonNullable<? extends List<BillLineItem>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    public AccountingBill withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public AccountingBill withMetadata(Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public AccountingBill withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }

    public AccountingBill withModifiedDate(Optional<String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * Any private, company notes about the bill, such as payment information.
     */
    public AccountingBill withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = JsonNullable.of(note);
        return this;
    }

    /**
     * Any private, company notes about the bill, such as payment information.
     */
    public AccountingBill withNote(JsonNullable<String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * An array of payment allocations.
     */
    public AccountingBill withPaymentAllocations(List<AccountingPaymentAllocation> paymentAllocations) {
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        this.paymentAllocations = JsonNullable.of(paymentAllocations);
        return this;
    }

    /**
     * An array of payment allocations.
     */
    public AccountingBill withPaymentAllocations(JsonNullable<? extends List<AccountingPaymentAllocation>> paymentAllocations) {
        Utils.checkNotNull(paymentAllocations, "paymentAllocations");
        this.paymentAllocations = paymentAllocations;
        return this;
    }

    public AccountingBill withPurchaseOrderRefs(List<PurchaseOrderReference> purchaseOrderRefs) {
        Utils.checkNotNull(purchaseOrderRefs, "purchaseOrderRefs");
        this.purchaseOrderRefs = JsonNullable.of(purchaseOrderRefs);
        return this;
    }

    public AccountingBill withPurchaseOrderRefs(JsonNullable<? extends List<PurchaseOrderReference>> purchaseOrderRefs) {
        Utils.checkNotNull(purchaseOrderRefs, "purchaseOrderRefs");
        this.purchaseOrderRefs = purchaseOrderRefs;
        return this;
    }

    /**
     * User-friendly reference for the bill.
     */
    public AccountingBill withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * User-friendly reference for the bill.
     */
    public AccountingBill withReference(JsonNullable<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public AccountingBill withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }

    public AccountingBill withSourceModifiedDate(Optional<String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * Current state of the bill.
     */
    public AccountingBill withStatus(BillStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

        /**
         * Total amount of the bill, excluding any taxes.
         */
    public AccountingBill withSubTotal(double subTotal) {
        this.subTotal = BigDecimal.valueOf(subTotal);
        return this;
    }

    /**
     * Total amount of the bill, excluding any taxes.
     */
    public AccountingBill withSubTotal(BigDecimal subTotal) {
        Utils.checkNotNull(subTotal, "subTotal");
        this.subTotal = subTotal;
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public AccountingBill withSupplementalData(SupplementalData supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = Optional.ofNullable(supplementalData);
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public AccountingBill withSupplementalData(Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = supplementalData;
        return this;
    }

    /**
     * Reference to the supplier the record relates to.
     */
    public AccountingBill withSupplierRef(SupplierRef supplierRef) {
        Utils.checkNotNull(supplierRef, "supplierRef");
        this.supplierRef = Optional.ofNullable(supplierRef);
        return this;
    }

    /**
     * Reference to the supplier the record relates to.
     */
    public AccountingBill withSupplierRef(Optional<? extends SupplierRef> supplierRef) {
        Utils.checkNotNull(supplierRef, "supplierRef");
        this.supplierRef = supplierRef;
        return this;
    }

        /**
         * Amount of tax on the bill.
         */
    public AccountingBill withTaxAmount(double taxAmount) {
        this.taxAmount = BigDecimal.valueOf(taxAmount);
        return this;
    }

    /**
     * Amount of tax on the bill.
     */
    public AccountingBill withTaxAmount(BigDecimal taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

        /**
         * Amount of the bill, including tax.
         */
    public AccountingBill withTotalAmount(double totalAmount) {
        this.totalAmount = BigDecimal.valueOf(totalAmount);
        return this;
    }

    /**
     * Amount of the bill, including tax.
     */
    public AccountingBill withTotalAmount(BigDecimal totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public AccountingBill withWithholdingTax(List<WithholdingTax> withholdingTax) {
        Utils.checkNotNull(withholdingTax, "withholdingTax");
        this.withholdingTax = JsonNullable.of(withholdingTax);
        return this;
    }

    public AccountingBill withWithholdingTax(JsonNullable<? extends List<WithholdingTax>> withholdingTax) {
        Utils.checkNotNull(withholdingTax, "withholdingTax");
        this.withholdingTax = withholdingTax;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingBill other = (AccountingBill) o;
        return 
            Objects.deepEquals(this.amountDue, other.amountDue) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currencyRate, other.currencyRate) &&
            Objects.deepEquals(this.dueDate, other.dueDate) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.issueDate, other.issueDate) &&
            Objects.deepEquals(this.lineItems, other.lineItems) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.paymentAllocations, other.paymentAllocations) &&
            Objects.deepEquals(this.purchaseOrderRefs, other.purchaseOrderRefs) &&
            Objects.deepEquals(this.reference, other.reference) &&
            Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.subTotal, other.subTotal) &&
            Objects.deepEquals(this.supplementalData, other.supplementalData) &&
            Objects.deepEquals(this.supplierRef, other.supplierRef) &&
            Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.withholdingTax, other.withholdingTax);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amountDue,
            currency,
            currencyRate,
            dueDate,
            id,
            issueDate,
            lineItems,
            metadata,
            modifiedDate,
            note,
            paymentAllocations,
            purchaseOrderRefs,
            reference,
            sourceModifiedDate,
            status,
            subTotal,
            supplementalData,
            supplierRef,
            taxAmount,
            totalAmount,
            withholdingTax);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingBill.class,
                "amountDue", amountDue,
                "currency", currency,
                "currencyRate", currencyRate,
                "dueDate", dueDate,
                "id", id,
                "issueDate", issueDate,
                "lineItems", lineItems,
                "metadata", metadata,
                "modifiedDate", modifiedDate,
                "note", note,
                "paymentAllocations", paymentAllocations,
                "purchaseOrderRefs", purchaseOrderRefs,
                "reference", reference,
                "sourceModifiedDate", sourceModifiedDate,
                "status", status,
                "subTotal", subTotal,
                "supplementalData", supplementalData,
                "supplierRef", supplierRef,
                "taxAmount", taxAmount,
                "totalAmount", totalAmount,
                "withholdingTax", withholdingTax);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends BigDecimal> amountDue = JsonNullable.undefined();
 
        private Optional<String> currency = Optional.empty();
 
        private JsonNullable<? extends BigDecimal> currencyRate = JsonNullable.undefined();
 
        private Optional<String> dueDate = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private String issueDate;
 
        private JsonNullable<? extends List<BillLineItem>> lineItems = JsonNullable.undefined();
 
        private Optional<? extends Metadata> metadata = Optional.empty();
 
        private Optional<String> modifiedDate = Optional.empty();
 
        private JsonNullable<String> note = JsonNullable.undefined();
 
        private JsonNullable<? extends List<AccountingPaymentAllocation>> paymentAllocations = JsonNullable.undefined();
 
        private JsonNullable<? extends List<PurchaseOrderReference>> purchaseOrderRefs = JsonNullable.undefined();
 
        private JsonNullable<String> reference = JsonNullable.undefined();
 
        private Optional<String> sourceModifiedDate = Optional.empty();
 
        private BillStatus status;
 
        private BigDecimal subTotal;
 
        private Optional<? extends SupplementalData> supplementalData = Optional.empty();
 
        private Optional<? extends SupplierRef> supplierRef = Optional.empty();
 
        private BigDecimal taxAmount;
 
        private BigDecimal totalAmount;
 
        private JsonNullable<? extends List<WithholdingTax>> withholdingTax = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Amount outstanding on the bill.
         */
        public Builder amountDue(BigDecimal amountDue) {
            Utils.checkNotNull(amountDue, "amountDue");
            this.amountDue = JsonNullable.of(amountDue);
            return this;
        }

        /**
         * Amount outstanding on the bill.
         */
        public Builder amountDue(double amountDue) {
            this.amountDue = JsonNullable.of(BigDecimal.valueOf(amountDue));
            return this;
        }

        /**
         * Amount outstanding on the bill.
         */
        public Builder amountDue(JsonNullable<? extends BigDecimal> amountDue) {
            Utils.checkNotNull(amountDue, "amountDue");
            this.amountDue = amountDue;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
         */
        public Builder currencyRate(BigDecimal currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
         */
        public Builder currencyRate(double currencyRate) {
            this.currencyRate = JsonNullable.of(BigDecimal.valueOf(currencyRate));
            return this;
        }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting software, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting software which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, specify a currencyRate in the request body.  |
         */
        public Builder currencyRate(JsonNullable<? extends BigDecimal> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }

        public Builder dueDate(String dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        public Builder dueDate(Optional<String> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }

        /**
         * Identifier for the bill, unique for the company in the accounting software.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Identifier for the bill, unique for the company in the accounting software.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder issueDate(String issueDate) {
            Utils.checkNotNull(issueDate, "issueDate");
            this.issueDate = issueDate;
            return this;
        }

        /**
         * Array of Bill line items.
         */
        public Builder lineItems(List<BillLineItem> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = JsonNullable.of(lineItems);
            return this;
        }

        /**
         * Array of Bill line items.
         */
        public Builder lineItems(JsonNullable<? extends List<BillLineItem>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }

        public Builder modifiedDate(Optional<String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * Any private, company notes about the bill, such as payment information.
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * Any private, company notes about the bill, such as payment information.
         */
        public Builder note(JsonNullable<String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * An array of payment allocations.
         */
        public Builder paymentAllocations(List<AccountingPaymentAllocation> paymentAllocations) {
            Utils.checkNotNull(paymentAllocations, "paymentAllocations");
            this.paymentAllocations = JsonNullable.of(paymentAllocations);
            return this;
        }

        /**
         * An array of payment allocations.
         */
        public Builder paymentAllocations(JsonNullable<? extends List<AccountingPaymentAllocation>> paymentAllocations) {
            Utils.checkNotNull(paymentAllocations, "paymentAllocations");
            this.paymentAllocations = paymentAllocations;
            return this;
        }

        public Builder purchaseOrderRefs(List<PurchaseOrderReference> purchaseOrderRefs) {
            Utils.checkNotNull(purchaseOrderRefs, "purchaseOrderRefs");
            this.purchaseOrderRefs = JsonNullable.of(purchaseOrderRefs);
            return this;
        }

        public Builder purchaseOrderRefs(JsonNullable<? extends List<PurchaseOrderReference>> purchaseOrderRefs) {
            Utils.checkNotNull(purchaseOrderRefs, "purchaseOrderRefs");
            this.purchaseOrderRefs = purchaseOrderRefs;
            return this;
        }

        /**
         * User-friendly reference for the bill.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * User-friendly reference for the bill.
         */
        public Builder reference(JsonNullable<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(Optional<String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * Current state of the bill.
         */
        public Builder status(BillStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Total amount of the bill, excluding any taxes.
         */
        public Builder subTotal(double subTotal) {
            this.subTotal = BigDecimal.valueOf(subTotal);
            return this;
        }

        /**
         * Total amount of the bill, excluding any taxes.
         */
        public Builder subTotal(BigDecimal subTotal) {
            Utils.checkNotNull(subTotal, "subTotal");
            this.subTotal = subTotal;
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(SupplementalData supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = Optional.ofNullable(supplementalData);
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting software. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(Optional<? extends SupplementalData> supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = supplementalData;
            return this;
        }

        /**
         * Reference to the supplier the record relates to.
         */
        public Builder supplierRef(SupplierRef supplierRef) {
            Utils.checkNotNull(supplierRef, "supplierRef");
            this.supplierRef = Optional.ofNullable(supplierRef);
            return this;
        }

        /**
         * Reference to the supplier the record relates to.
         */
        public Builder supplierRef(Optional<? extends SupplierRef> supplierRef) {
            Utils.checkNotNull(supplierRef, "supplierRef");
            this.supplierRef = supplierRef;
            return this;
        }

        /**
         * Amount of tax on the bill.
         */
        public Builder taxAmount(double taxAmount) {
            this.taxAmount = BigDecimal.valueOf(taxAmount);
            return this;
        }

        /**
         * Amount of tax on the bill.
         */
        public Builder taxAmount(BigDecimal taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Amount of the bill, including tax.
         */
        public Builder totalAmount(double totalAmount) {
            this.totalAmount = BigDecimal.valueOf(totalAmount);
            return this;
        }

        /**
         * Amount of the bill, including tax.
         */
        public Builder totalAmount(BigDecimal totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder withholdingTax(List<WithholdingTax> withholdingTax) {
            Utils.checkNotNull(withholdingTax, "withholdingTax");
            this.withholdingTax = JsonNullable.of(withholdingTax);
            return this;
        }

        public Builder withholdingTax(JsonNullable<? extends List<WithholdingTax>> withholdingTax) {
            Utils.checkNotNull(withholdingTax, "withholdingTax");
            this.withholdingTax = withholdingTax;
            return this;
        }
        
        public AccountingBill build() {
            return new AccountingBill(
                amountDue,
                currency,
                currencyRate,
                dueDate,
                id,
                issueDate,
                lineItems,
                metadata,
                modifiedDate,
                note,
                paymentAllocations,
                purchaseOrderRefs,
                reference,
                sourceModifiedDate,
                status,
                subTotal,
                supplementalData,
                supplierRef,
                taxAmount,
                totalAmount,
                withholdingTax);
        }
    }
}

