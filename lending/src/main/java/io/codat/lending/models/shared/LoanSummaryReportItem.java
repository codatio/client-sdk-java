/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class LoanSummaryReportItem {

    /**
     * The loan outstanding balance.  This may not equal totalDrawdowns - totalRepayments due to interest which has been accrued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private Optional<? extends Double> balance;

    /**
     * The description of the object being referred to. E.g. the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * The name of lender providing the loan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lenderName")
    private Optional<? extends String> lenderName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordRef")
    private Optional<? extends LoanSummaryRecordRef> recordRef;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private Optional<? extends String> startDate;

    /**
     * The total loan drawdowns.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalDrawdowns")
    private Optional<? extends Double> totalDrawdowns;

    /**
     * The total loan repayments which includes capital plus any interest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalRepayments")
    private Optional<? extends Double> totalRepayments;

    public LoanSummaryReportItem(
            @JsonProperty("balance") Optional<? extends Double> balance,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("lenderName") Optional<? extends String> lenderName,
            @JsonProperty("recordRef") Optional<? extends LoanSummaryRecordRef> recordRef,
            @JsonProperty("startDate") Optional<? extends String> startDate,
            @JsonProperty("totalDrawdowns") Optional<? extends Double> totalDrawdowns,
            @JsonProperty("totalRepayments") Optional<? extends Double> totalRepayments) {
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(lenderName, "lenderName");
        Utils.checkNotNull(recordRef, "recordRef");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(totalDrawdowns, "totalDrawdowns");
        Utils.checkNotNull(totalRepayments, "totalRepayments");
        this.balance = balance;
        this.description = description;
        this.lenderName = lenderName;
        this.recordRef = recordRef;
        this.startDate = startDate;
        this.totalDrawdowns = totalDrawdowns;
        this.totalRepayments = totalRepayments;
    }

    /**
     * The loan outstanding balance.  This may not equal totalDrawdowns - totalRepayments due to interest which has been accrued.
     */
    public Optional<? extends Double> balance() {
        return balance;
    }

    /**
     * The description of the object being referred to. E.g. the account.
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * The name of lender providing the loan.
     */
    public Optional<? extends String> lenderName() {
        return lenderName;
    }

    public Optional<? extends LoanSummaryRecordRef> recordRef() {
        return recordRef;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> startDate() {
        return startDate;
    }

    /**
     * The total loan drawdowns.
     */
    public Optional<? extends Double> totalDrawdowns() {
        return totalDrawdowns;
    }

    /**
     * The total loan repayments which includes capital plus any interest.
     */
    public Optional<? extends Double> totalRepayments() {
        return totalRepayments;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The loan outstanding balance.  This may not equal totalDrawdowns - totalRepayments due to interest which has been accrued.
     */
    public LoanSummaryReportItem withBalance(double balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = Optional.ofNullable(balance);
        return this;
    }
    
    /**
     * The loan outstanding balance.  This may not equal totalDrawdowns - totalRepayments due to interest which has been accrued.
     */
    public LoanSummaryReportItem withBalance(Optional<? extends Double> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * The description of the object being referred to. E.g. the account.
     */
    public LoanSummaryReportItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }
    
    /**
     * The description of the object being referred to. E.g. the account.
     */
    public LoanSummaryReportItem withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The name of lender providing the loan.
     */
    public LoanSummaryReportItem withLenderName(String lenderName) {
        Utils.checkNotNull(lenderName, "lenderName");
        this.lenderName = Optional.ofNullable(lenderName);
        return this;
    }
    
    /**
     * The name of lender providing the loan.
     */
    public LoanSummaryReportItem withLenderName(Optional<? extends String> lenderName) {
        Utils.checkNotNull(lenderName, "lenderName");
        this.lenderName = lenderName;
        return this;
    }

    public LoanSummaryReportItem withRecordRef(LoanSummaryRecordRef recordRef) {
        Utils.checkNotNull(recordRef, "recordRef");
        this.recordRef = Optional.ofNullable(recordRef);
        return this;
    }
    
    public LoanSummaryReportItem withRecordRef(Optional<? extends LoanSummaryRecordRef> recordRef) {
        Utils.checkNotNull(recordRef, "recordRef");
        this.recordRef = recordRef;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public LoanSummaryReportItem withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public LoanSummaryReportItem withStartDate(Optional<? extends String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The total loan drawdowns.
     */
    public LoanSummaryReportItem withTotalDrawdowns(double totalDrawdowns) {
        Utils.checkNotNull(totalDrawdowns, "totalDrawdowns");
        this.totalDrawdowns = Optional.ofNullable(totalDrawdowns);
        return this;
    }
    
    /**
     * The total loan drawdowns.
     */
    public LoanSummaryReportItem withTotalDrawdowns(Optional<? extends Double> totalDrawdowns) {
        Utils.checkNotNull(totalDrawdowns, "totalDrawdowns");
        this.totalDrawdowns = totalDrawdowns;
        return this;
    }

    /**
     * The total loan repayments which includes capital plus any interest.
     */
    public LoanSummaryReportItem withTotalRepayments(double totalRepayments) {
        Utils.checkNotNull(totalRepayments, "totalRepayments");
        this.totalRepayments = Optional.ofNullable(totalRepayments);
        return this;
    }
    
    /**
     * The total loan repayments which includes capital plus any interest.
     */
    public LoanSummaryReportItem withTotalRepayments(Optional<? extends Double> totalRepayments) {
        Utils.checkNotNull(totalRepayments, "totalRepayments");
        this.totalRepayments = totalRepayments;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LoanSummaryReportItem other = (LoanSummaryReportItem) o;
        return 
            java.util.Objects.deepEquals(this.balance, other.balance) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.lenderName, other.lenderName) &&
            java.util.Objects.deepEquals(this.recordRef, other.recordRef) &&
            java.util.Objects.deepEquals(this.startDate, other.startDate) &&
            java.util.Objects.deepEquals(this.totalDrawdowns, other.totalDrawdowns) &&
            java.util.Objects.deepEquals(this.totalRepayments, other.totalRepayments);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            balance,
            description,
            lenderName,
            recordRef,
            startDate,
            totalDrawdowns,
            totalRepayments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LoanSummaryReportItem.class,
                "balance", balance,
                "description", description,
                "lenderName", lenderName,
                "recordRef", recordRef,
                "startDate", startDate,
                "totalDrawdowns", totalDrawdowns,
                "totalRepayments", totalRepayments);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> balance = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> lenderName = Optional.empty();
 
        private Optional<? extends LoanSummaryRecordRef> recordRef = Optional.empty();
 
        private Optional<? extends String> startDate = Optional.empty();
 
        private Optional<? extends Double> totalDrawdowns = Optional.empty();
 
        private Optional<? extends Double> totalRepayments = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The loan outstanding balance.  This may not equal totalDrawdowns - totalRepayments due to interest which has been accrued.
         */
        public Builder balance(double balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = Optional.ofNullable(balance);
            return this;
        }
        
        /**
         * The loan outstanding balance.  This may not equal totalDrawdowns - totalRepayments due to interest which has been accrued.
         */
        public Builder balance(Optional<? extends Double> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * The description of the object being referred to. E.g. the account.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }
        
        /**
         * The description of the object being referred to. E.g. the account.
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The name of lender providing the loan.
         */
        public Builder lenderName(String lenderName) {
            Utils.checkNotNull(lenderName, "lenderName");
            this.lenderName = Optional.ofNullable(lenderName);
            return this;
        }
        
        /**
         * The name of lender providing the loan.
         */
        public Builder lenderName(Optional<? extends String> lenderName) {
            Utils.checkNotNull(lenderName, "lenderName");
            this.lenderName = lenderName;
            return this;
        }

        public Builder recordRef(LoanSummaryRecordRef recordRef) {
            Utils.checkNotNull(recordRef, "recordRef");
            this.recordRef = Optional.ofNullable(recordRef);
            return this;
        }
        
        public Builder recordRef(Optional<? extends LoanSummaryRecordRef> recordRef) {
            Utils.checkNotNull(recordRef, "recordRef");
            this.recordRef = recordRef;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder startDate(Optional<? extends String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The total loan drawdowns.
         */
        public Builder totalDrawdowns(double totalDrawdowns) {
            Utils.checkNotNull(totalDrawdowns, "totalDrawdowns");
            this.totalDrawdowns = Optional.ofNullable(totalDrawdowns);
            return this;
        }
        
        /**
         * The total loan drawdowns.
         */
        public Builder totalDrawdowns(Optional<? extends Double> totalDrawdowns) {
            Utils.checkNotNull(totalDrawdowns, "totalDrawdowns");
            this.totalDrawdowns = totalDrawdowns;
            return this;
        }

        /**
         * The total loan repayments which includes capital plus any interest.
         */
        public Builder totalRepayments(double totalRepayments) {
            Utils.checkNotNull(totalRepayments, "totalRepayments");
            this.totalRepayments = Optional.ofNullable(totalRepayments);
            return this;
        }
        
        /**
         * The total loan repayments which includes capital plus any interest.
         */
        public Builder totalRepayments(Optional<? extends Double> totalRepayments) {
            Utils.checkNotNull(totalRepayments, "totalRepayments");
            this.totalRepayments = totalRepayments;
            return this;
        }
        
        public LoanSummaryReportItem build() {
            return new LoanSummaryReportItem(
                balance,
                description,
                lenderName,
                recordRef,
                startDate,
                totalDrawdowns,
                totalRepayments);
        }
    }
}

