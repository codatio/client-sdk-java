/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class CommerceReportError {

    /**
     * Additional details on the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private Optional<? extends java.util.Map<String, java.util.List<String>>> details;

    /**
     * Message returned by error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<? extends String> message;

    /**
     * The type of error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    public CommerceReportError(
            @JsonProperty("details") Optional<? extends java.util.Map<String, java.util.List<String>>> details,
            @JsonProperty("message") Optional<? extends String> message,
            @JsonProperty("type") Optional<? extends String> type) {
        Utils.checkNotNull(details, "details");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(type, "type");
        this.details = details;
        this.message = message;
        this.type = type;
    }

    /**
     * Additional details on the error.
     */
    public Optional<? extends java.util.Map<String, java.util.List<String>>> details() {
        return details;
    }

    /**
     * Message returned by error.
     */
    public Optional<? extends String> message() {
        return message;
    }

    /**
     * The type of error.
     */
    public Optional<? extends String> type() {
        return type;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Additional details on the error.
     */
    public CommerceReportError withDetails(java.util.Map<String, java.util.List<String>> details) {
        Utils.checkNotNull(details, "details");
        this.details = Optional.ofNullable(details);
        return this;
    }
    
    /**
     * Additional details on the error.
     */
    public CommerceReportError withDetails(Optional<? extends java.util.Map<String, java.util.List<String>>> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }

    /**
     * Message returned by error.
     */
    public CommerceReportError withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }
    
    /**
     * Message returned by error.
     */
    public CommerceReportError withMessage(Optional<? extends String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * The type of error.
     */
    public CommerceReportError withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }
    
    /**
     * The type of error.
     */
    public CommerceReportError withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceReportError other = (CommerceReportError) o;
        return 
            java.util.Objects.deepEquals(this.details, other.details) &&
            java.util.Objects.deepEquals(this.message, other.message) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            details,
            message,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceReportError.class,
                "details", details,
                "message", message,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.Map<String, java.util.List<String>>> details = Optional.empty();
 
        private Optional<? extends String> message = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Additional details on the error.
         */
        public Builder details(java.util.Map<String, java.util.List<String>> details) {
            Utils.checkNotNull(details, "details");
            this.details = Optional.ofNullable(details);
            return this;
        }
        
        /**
         * Additional details on the error.
         */
        public Builder details(Optional<? extends java.util.Map<String, java.util.List<String>>> details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }

        /**
         * Message returned by error.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }
        
        /**
         * Message returned by error.
         */
        public Builder message(Optional<? extends String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * The type of error.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }
        
        /**
         * The type of error.
         */
        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public CommerceReportError build() {
            return new CommerceReportError(
                details,
                message,
                type);
        }
    }
}

