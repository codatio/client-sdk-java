/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class OrderDiscountAllocation {

    /**
     * Name of the discount in the commerce or point of sale platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends Double> totalAmount;

    public OrderDiscountAllocation(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("totalAmount") Optional<? extends Double> totalAmount) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.name = name;
        this.totalAmount = totalAmount;
    }

    /**
     * Name of the discount in the commerce or point of sale platform.
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).
     */
    public Optional<? extends Double> totalAmount() {
        return totalAmount;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the discount in the commerce or point of sale platform.
     */
    public OrderDiscountAllocation withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }
    
    /**
     * Name of the discount in the commerce or point of sale platform.
     */
    public OrderDiscountAllocation withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).
     */
    public OrderDiscountAllocation withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }
    
    /**
     * Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).
     */
    public OrderDiscountAllocation withTotalAmount(Optional<? extends Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderDiscountAllocation other = (OrderDiscountAllocation) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.totalAmount, other.totalAmount);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            totalAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OrderDiscountAllocation.class,
                "name", name,
                "totalAmount", totalAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Double> totalAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the discount in the commerce or point of sale platform.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }
        
        /**
         * Name of the discount in the commerce or point of sale platform.
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }
        
        /**
         * Total amount of discount applied, excluding tax. This is typically positive (for discounts which decrease the amount of the order line), but can also be negative (for discounts which increase the amount of the order line).
         */
        public Builder totalAmount(Optional<? extends Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }
        
        public OrderDiscountAllocation build() {
            return new OrderDiscountAllocation(
                name,
                totalAmount);
        }
    }
}

