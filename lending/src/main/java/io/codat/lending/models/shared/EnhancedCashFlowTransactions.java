/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * EnhancedCashFlowTransactions - &gt; **Categorization engine**
 * &gt;
 * &gt; The categorization engine uses machine learning and has been fully trained against Plaid and TrueLayer banking data sources. It is not fully trained against the Basiq banking data source.
 * 
 * The Enhanced Cash Flow Transactions endpoint provides a fully categorized list of banking transactions for a company. Accounts and transaction data are obtained from the company's banking data sources.
 */

public class EnhancedCashFlowTransactions {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataSources")
    private Optional<? extends List<DataSource>> dataSources;

    /**
     * Report additional information, which is specific to Lending API reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportInfo")
    private Optional<? extends ReportInfo> reportInfo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportItems")
    private Optional<? extends List<EnhancedCashFlowItem>> reportItems;

    @JsonCreator
    public EnhancedCashFlowTransactions(
            @JsonProperty("dataSources") Optional<? extends List<DataSource>> dataSources,
            @JsonProperty("reportInfo") Optional<? extends ReportInfo> reportInfo,
            @JsonProperty("reportItems") Optional<? extends List<EnhancedCashFlowItem>> reportItems) {
        Utils.checkNotNull(dataSources, "dataSources");
        Utils.checkNotNull(reportInfo, "reportInfo");
        Utils.checkNotNull(reportItems, "reportItems");
        this.dataSources = dataSources;
        this.reportInfo = reportInfo;
        this.reportItems = reportItems;
    }
    
    public EnhancedCashFlowTransactions() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DataSource>> dataSources() {
        return (Optional<List<DataSource>>) dataSources;
    }

    /**
     * Report additional information, which is specific to Lending API reports.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ReportInfo> reportInfo() {
        return (Optional<ReportInfo>) reportInfo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EnhancedCashFlowItem>> reportItems() {
        return (Optional<List<EnhancedCashFlowItem>>) reportItems;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public EnhancedCashFlowTransactions withDataSources(List<DataSource> dataSources) {
        Utils.checkNotNull(dataSources, "dataSources");
        this.dataSources = Optional.ofNullable(dataSources);
        return this;
    }

    public EnhancedCashFlowTransactions withDataSources(Optional<? extends List<DataSource>> dataSources) {
        Utils.checkNotNull(dataSources, "dataSources");
        this.dataSources = dataSources;
        return this;
    }

    /**
     * Report additional information, which is specific to Lending API reports.
     */
    public EnhancedCashFlowTransactions withReportInfo(ReportInfo reportInfo) {
        Utils.checkNotNull(reportInfo, "reportInfo");
        this.reportInfo = Optional.ofNullable(reportInfo);
        return this;
    }

    /**
     * Report additional information, which is specific to Lending API reports.
     */
    public EnhancedCashFlowTransactions withReportInfo(Optional<? extends ReportInfo> reportInfo) {
        Utils.checkNotNull(reportInfo, "reportInfo");
        this.reportInfo = reportInfo;
        return this;
    }

    public EnhancedCashFlowTransactions withReportItems(List<EnhancedCashFlowItem> reportItems) {
        Utils.checkNotNull(reportItems, "reportItems");
        this.reportItems = Optional.ofNullable(reportItems);
        return this;
    }

    public EnhancedCashFlowTransactions withReportItems(Optional<? extends List<EnhancedCashFlowItem>> reportItems) {
        Utils.checkNotNull(reportItems, "reportItems");
        this.reportItems = reportItems;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnhancedCashFlowTransactions other = (EnhancedCashFlowTransactions) o;
        return 
            Objects.deepEquals(this.dataSources, other.dataSources) &&
            Objects.deepEquals(this.reportInfo, other.reportInfo) &&
            Objects.deepEquals(this.reportItems, other.reportItems);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dataSources,
            reportInfo,
            reportItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EnhancedCashFlowTransactions.class,
                "dataSources", dataSources,
                "reportInfo", reportInfo,
                "reportItems", reportItems);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<DataSource>> dataSources = Optional.empty();
 
        private Optional<? extends ReportInfo> reportInfo = Optional.empty();
 
        private Optional<? extends List<EnhancedCashFlowItem>> reportItems = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dataSources(List<DataSource> dataSources) {
            Utils.checkNotNull(dataSources, "dataSources");
            this.dataSources = Optional.ofNullable(dataSources);
            return this;
        }

        public Builder dataSources(Optional<? extends List<DataSource>> dataSources) {
            Utils.checkNotNull(dataSources, "dataSources");
            this.dataSources = dataSources;
            return this;
        }

        /**
         * Report additional information, which is specific to Lending API reports.
         */
        public Builder reportInfo(ReportInfo reportInfo) {
            Utils.checkNotNull(reportInfo, "reportInfo");
            this.reportInfo = Optional.ofNullable(reportInfo);
            return this;
        }

        /**
         * Report additional information, which is specific to Lending API reports.
         */
        public Builder reportInfo(Optional<? extends ReportInfo> reportInfo) {
            Utils.checkNotNull(reportInfo, "reportInfo");
            this.reportInfo = reportInfo;
            return this;
        }

        public Builder reportItems(List<EnhancedCashFlowItem> reportItems) {
            Utils.checkNotNull(reportItems, "reportItems");
            this.reportItems = Optional.ofNullable(reportItems);
            return this;
        }

        public Builder reportItems(Optional<? extends List<EnhancedCashFlowItem>> reportItems) {
            Utils.checkNotNull(reportItems, "reportItems");
            this.reportItems = reportItems;
            return this;
        }
        
        public EnhancedCashFlowTransactions build() {
            return new EnhancedCashFlowTransactions(
                dataSources,
                reportInfo,
                reportItems);
        }
    }
}

