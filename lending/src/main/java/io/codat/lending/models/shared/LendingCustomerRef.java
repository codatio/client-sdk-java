/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class LendingCustomerRef {

    /**
     * `customerName` from the Customer data type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerName")
    private JsonNullable<String> customerName;

    /**
     * `id` from the Customers data type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonCreator
    public LendingCustomerRef(
            @JsonProperty("customerName") JsonNullable<String> customerName,
            @JsonProperty("id") Optional<String> id) {
        Utils.checkNotNull(customerName, "customerName");
        Utils.checkNotNull(id, "id");
        this.customerName = customerName;
        this.id = id;
    }
    
    public LendingCustomerRef() {
        this(JsonNullable.undefined(), Optional.empty());
    }

    /**
     * `customerName` from the Customer data type.
     */
    @JsonIgnore
    public JsonNullable<String> customerName() {
        return customerName;
    }

    /**
     * `id` from the Customers data type.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * `customerName` from the Customer data type.
     */
    public LendingCustomerRef withCustomerName(String customerName) {
        Utils.checkNotNull(customerName, "customerName");
        this.customerName = JsonNullable.of(customerName);
        return this;
    }

    /**
     * `customerName` from the Customer data type.
     */
    public LendingCustomerRef withCustomerName(JsonNullable<String> customerName) {
        Utils.checkNotNull(customerName, "customerName");
        this.customerName = customerName;
        return this;
    }

    /**
     * `id` from the Customers data type.
     */
    public LendingCustomerRef withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * `id` from the Customers data type.
     */
    public LendingCustomerRef withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LendingCustomerRef other = (LendingCustomerRef) o;
        return 
            Objects.deepEquals(this.customerName, other.customerName) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            customerName,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LendingCustomerRef.class,
                "customerName", customerName,
                "id", id);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> customerName = JsonNullable.undefined();
 
        private Optional<String> id = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * `customerName` from the Customer data type.
         */
        public Builder customerName(String customerName) {
            Utils.checkNotNull(customerName, "customerName");
            this.customerName = JsonNullable.of(customerName);
            return this;
        }

        /**
         * `customerName` from the Customer data type.
         */
        public Builder customerName(JsonNullable<String> customerName) {
            Utils.checkNotNull(customerName, "customerName");
            this.customerName = customerName;
            return this;
        }

        /**
         * `id` from the Customers data type.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * `id` from the Customers data type.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public LendingCustomerRef build() {
            return new LendingCustomerRef(
                customerName,
                id);
        }
    }
}

