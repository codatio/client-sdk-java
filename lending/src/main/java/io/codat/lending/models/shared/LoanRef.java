/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class LoanRef {

    /**
     * The dataConnectionId the object being referred to is associated with.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataConnectionId")
    private Optional<String> dataConnectionId;

    /**
     * The id of the object being referred to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The object type data is referring to, e.g. Account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public LoanRef(
            @JsonProperty("dataConnectionId") Optional<String> dataConnectionId,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("type") Optional<String> type) {
        Utils.checkNotNull(dataConnectionId, "dataConnectionId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        this.dataConnectionId = dataConnectionId;
        this.id = id;
        this.type = type;
    }
    
    public LoanRef() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The dataConnectionId the object being referred to is associated with.
     */
    @JsonIgnore
    public Optional<String> dataConnectionId() {
        return dataConnectionId;
    }

    /**
     * The id of the object being referred to.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The object type data is referring to, e.g. Account.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The dataConnectionId the object being referred to is associated with.
     */
    public LoanRef withDataConnectionId(String dataConnectionId) {
        Utils.checkNotNull(dataConnectionId, "dataConnectionId");
        this.dataConnectionId = Optional.ofNullable(dataConnectionId);
        return this;
    }

    /**
     * The dataConnectionId the object being referred to is associated with.
     */
    public LoanRef withDataConnectionId(Optional<String> dataConnectionId) {
        Utils.checkNotNull(dataConnectionId, "dataConnectionId");
        this.dataConnectionId = dataConnectionId;
        return this;
    }

    /**
     * The id of the object being referred to.
     */
    public LoanRef withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The id of the object being referred to.
     */
    public LoanRef withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The object type data is referring to, e.g. Account.
     */
    public LoanRef withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The object type data is referring to, e.g. Account.
     */
    public LoanRef withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LoanRef other = (LoanRef) o;
        return 
            Objects.deepEquals(this.dataConnectionId, other.dataConnectionId) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dataConnectionId,
            id,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LoanRef.class,
                "dataConnectionId", dataConnectionId,
                "id", id,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<String> dataConnectionId = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The dataConnectionId the object being referred to is associated with.
         */
        public Builder dataConnectionId(String dataConnectionId) {
            Utils.checkNotNull(dataConnectionId, "dataConnectionId");
            this.dataConnectionId = Optional.ofNullable(dataConnectionId);
            return this;
        }

        /**
         * The dataConnectionId the object being referred to is associated with.
         */
        public Builder dataConnectionId(Optional<String> dataConnectionId) {
            Utils.checkNotNull(dataConnectionId, "dataConnectionId");
            this.dataConnectionId = dataConnectionId;
            return this;
        }

        /**
         * The id of the object being referred to.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The id of the object being referred to.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The object type data is referring to, e.g. Account.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The object type data is referring to, e.g. Account.
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public LoanRef build() {
            return new LoanRef(
                dataConnectionId,
                id,
                type);
        }
    }
}

