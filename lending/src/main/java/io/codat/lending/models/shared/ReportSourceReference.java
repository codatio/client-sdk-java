/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ReportSourceReference - A source reference containing the `sourceType` object "Banking".
 */

public class ReportSourceReference {

    /**
     * The data source type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    private Optional<String> sourceType;

    @JsonCreator
    public ReportSourceReference(
            @JsonProperty("sourceType") Optional<String> sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
    }
    
    public ReportSourceReference() {
        this(Optional.empty());
    }

    /**
     * The data source type.
     */
    @JsonIgnore
    public Optional<String> sourceType() {
        return sourceType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The data source type.
     */
    public ReportSourceReference withSourceType(String sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = Optional.ofNullable(sourceType);
        return this;
    }

    /**
     * The data source type.
     */
    public ReportSourceReference withSourceType(Optional<String> sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportSourceReference other = (ReportSourceReference) o;
        return 
            Objects.deepEquals(this.sourceType, other.sourceType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sourceType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportSourceReference.class,
                "sourceType", sourceType);
    }
    
    public final static class Builder {
 
        private Optional<String> sourceType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The data source type.
         */
        public Builder sourceType(String sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = Optional.ofNullable(sourceType);
            return this;
        }

        /**
         * The data source type.
         */
        public Builder sourceType(Optional<String> sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }
        
        public ReportSourceReference build() {
            return new ReportSourceReference(
                sourceType);
        }
    }
}

