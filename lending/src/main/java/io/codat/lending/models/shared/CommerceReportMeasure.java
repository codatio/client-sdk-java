/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CommerceReportMeasure {

    /**
     * The measure's display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;

    /**
     * The measure's index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<Long> index;

    /**
     * The measure's type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    /**
     * The measure's units e.g. percentage (%).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("units")
    private Optional<String> units;

    @JsonCreator
    public CommerceReportMeasure(
            @JsonProperty("displayName") Optional<String> displayName,
            @JsonProperty("index") Optional<Long> index,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("units") Optional<String> units) {
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(units, "units");
        this.displayName = displayName;
        this.index = index;
        this.type = type;
        this.units = units;
    }
    
    public CommerceReportMeasure() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The measure's display name.
     */
    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    /**
     * The measure's index.
     */
    @JsonIgnore
    public Optional<Long> index() {
        return index;
    }

    /**
     * The measure's type.
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * The measure's units e.g. percentage (%).
     */
    @JsonIgnore
    public Optional<String> units() {
        return units;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The measure's display name.
     */
    public CommerceReportMeasure withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    /**
     * The measure's display name.
     */
    public CommerceReportMeasure withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The measure's index.
     */
    public CommerceReportMeasure withIndex(long index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    /**
     * The measure's index.
     */
    public CommerceReportMeasure withIndex(Optional<Long> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    /**
     * The measure's type.
     */
    public CommerceReportMeasure withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The measure's type.
     */
    public CommerceReportMeasure withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The measure's units e.g. percentage (%).
     */
    public CommerceReportMeasure withUnits(String units) {
        Utils.checkNotNull(units, "units");
        this.units = Optional.ofNullable(units);
        return this;
    }

    /**
     * The measure's units e.g. percentage (%).
     */
    public CommerceReportMeasure withUnits(Optional<String> units) {
        Utils.checkNotNull(units, "units");
        this.units = units;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceReportMeasure other = (CommerceReportMeasure) o;
        return 
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.index, other.index) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.units, other.units);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            displayName,
            index,
            type,
            units);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceReportMeasure.class,
                "displayName", displayName,
                "index", index,
                "type", type,
                "units", units);
    }
    
    public final static class Builder {
 
        private Optional<String> displayName = Optional.empty();
 
        private Optional<Long> index = Optional.empty();
 
        private Optional<String> type = Optional.empty();
 
        private Optional<String> units = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The measure's display name.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * The measure's display name.
         */
        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The measure's index.
         */
        public Builder index(long index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        /**
         * The measure's index.
         */
        public Builder index(Optional<Long> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        /**
         * The measure's type.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The measure's type.
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The measure's units e.g. percentage (%).
         */
        public Builder units(String units) {
            Utils.checkNotNull(units, "units");
            this.units = Optional.ofNullable(units);
            return this;
        }

        /**
         * The measure's units e.g. percentage (%).
         */
        public Builder units(Optional<String> units) {
            Utils.checkNotNull(units, "units");
            this.units = units;
            return this;
        }
        
        public CommerceReportMeasure build() {
            return new CommerceReportMeasure(
                displayName,
                index,
                type,
                units);
        }
    }
}

