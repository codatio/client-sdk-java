/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CommerceReportDimensionItems {

    /**
     * The dimension's items index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<Long> index;

    @JsonCreator
    public CommerceReportDimensionItems(
            @JsonProperty("index") Optional<Long> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
    }
    
    public CommerceReportDimensionItems() {
        this(Optional.empty());
    }

    /**
     * The dimension's items index.
     */
    @JsonIgnore
    public Optional<Long> index() {
        return index;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The dimension's items index.
     */
    public CommerceReportDimensionItems withIndex(long index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    /**
     * The dimension's items index.
     */
    public CommerceReportDimensionItems withIndex(Optional<Long> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceReportDimensionItems other = (CommerceReportDimensionItems) o;
        return 
            Objects.deepEquals(this.index, other.index);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            index);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceReportDimensionItems.class,
                "index", index);
    }
    
    public final static class Builder {
 
        private Optional<Long> index = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The dimension's items index.
         */
        public Builder index(long index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        /**
         * The dimension's items index.
         */
        public Builder index(Optional<Long> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }
        
        public CommerceReportDimensionItems build() {
            return new CommerceReportDimensionItems(
                index);
        }
    }
}

