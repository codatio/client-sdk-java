/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.lending.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;


public class Accounts {

    /**
     * The name of the account according to the provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountName")
    private Optional<String> accountName;

    /**
     * The bank or other financial institution providing the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountProvider")
    private Optional<String> accountProvider;

    /**
     * The type of banking account, e.g. credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountType")
    private Optional<String> accountType;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    /**
     * The balance of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentBalance")
    private Optional<? extends BigDecimal> currentBalance;

    /**
     * Name of the banking data source, e.g. "Plaid".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformName")
    private Optional<String> platformName;

    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceRef")
    private Optional<? extends ReportSourceReference> sourceRef;

    @JsonCreator
    public Accounts(
            @JsonProperty("accountName") Optional<String> accountName,
            @JsonProperty("accountProvider") Optional<String> accountProvider,
            @JsonProperty("accountType") Optional<String> accountType,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("currentBalance") Optional<? extends BigDecimal> currentBalance,
            @JsonProperty("platformName") Optional<String> platformName,
            @JsonProperty("sourceRef") Optional<? extends ReportSourceReference> sourceRef) {
        Utils.checkNotNull(accountName, "accountName");
        Utils.checkNotNull(accountProvider, "accountProvider");
        Utils.checkNotNull(accountType, "accountType");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currentBalance, "currentBalance");
        Utils.checkNotNull(platformName, "platformName");
        Utils.checkNotNull(sourceRef, "sourceRef");
        this.accountName = accountName;
        this.accountProvider = accountProvider;
        this.accountType = accountType;
        this.currency = currency;
        this.currentBalance = currentBalance;
        this.platformName = platformName;
        this.sourceRef = sourceRef;
    }
    
    public Accounts() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the account according to the provider.
     */
    @JsonIgnore
    public Optional<String> accountName() {
        return accountName;
    }

    /**
     * The bank or other financial institution providing the account.
     */
    @JsonIgnore
    public Optional<String> accountProvider() {
        return accountProvider;
    }

    /**
     * The type of banking account, e.g. credit or debit.
     */
    @JsonIgnore
    public Optional<String> accountType() {
        return accountType;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    /**
     * The balance of the bank account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> currentBalance() {
        return (Optional<BigDecimal>) currentBalance;
    }

    /**
     * Name of the banking data source, e.g. "Plaid".
     */
    @JsonIgnore
    public Optional<String> platformName() {
        return platformName;
    }

    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ReportSourceReference> sourceRef() {
        return (Optional<ReportSourceReference>) sourceRef;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the account according to the provider.
     */
    public Accounts withAccountName(String accountName) {
        Utils.checkNotNull(accountName, "accountName");
        this.accountName = Optional.ofNullable(accountName);
        return this;
    }

    /**
     * The name of the account according to the provider.
     */
    public Accounts withAccountName(Optional<String> accountName) {
        Utils.checkNotNull(accountName, "accountName");
        this.accountName = accountName;
        return this;
    }

    /**
     * The bank or other financial institution providing the account.
     */
    public Accounts withAccountProvider(String accountProvider) {
        Utils.checkNotNull(accountProvider, "accountProvider");
        this.accountProvider = Optional.ofNullable(accountProvider);
        return this;
    }

    /**
     * The bank or other financial institution providing the account.
     */
    public Accounts withAccountProvider(Optional<String> accountProvider) {
        Utils.checkNotNull(accountProvider, "accountProvider");
        this.accountProvider = accountProvider;
        return this;
    }

    /**
     * The type of banking account, e.g. credit or debit.
     */
    public Accounts withAccountType(String accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = Optional.ofNullable(accountType);
        return this;
    }

    /**
     * The type of banking account, e.g. credit or debit.
     */
    public Accounts withAccountType(Optional<String> accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public Accounts withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public Accounts withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * The balance of the bank account.
     */
    public Accounts withCurrentBalance(BigDecimal currentBalance) {
        Utils.checkNotNull(currentBalance, "currentBalance");
        this.currentBalance = Optional.ofNullable(currentBalance);
        return this;
    }

        /**
         * The balance of the bank account.
         */
    public Accounts withCurrentBalance(double currentBalance) {
        this.currentBalance = Optional.of(BigDecimal.valueOf(currentBalance));
        return this;
    }

    /**
     * The balance of the bank account.
     */
    public Accounts withCurrentBalance(Optional<? extends BigDecimal> currentBalance) {
        Utils.checkNotNull(currentBalance, "currentBalance");
        this.currentBalance = currentBalance;
        return this;
    }

    /**
     * Name of the banking data source, e.g. "Plaid".
     */
    public Accounts withPlatformName(String platformName) {
        Utils.checkNotNull(platformName, "platformName");
        this.platformName = Optional.ofNullable(platformName);
        return this;
    }

    /**
     * Name of the banking data source, e.g. "Plaid".
     */
    public Accounts withPlatformName(Optional<String> platformName) {
        Utils.checkNotNull(platformName, "platformName");
        this.platformName = platformName;
        return this;
    }

    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    public Accounts withSourceRef(ReportSourceReference sourceRef) {
        Utils.checkNotNull(sourceRef, "sourceRef");
        this.sourceRef = Optional.ofNullable(sourceRef);
        return this;
    }

    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    public Accounts withSourceRef(Optional<? extends ReportSourceReference> sourceRef) {
        Utils.checkNotNull(sourceRef, "sourceRef");
        this.sourceRef = sourceRef;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Accounts other = (Accounts) o;
        return 
            Objects.deepEquals(this.accountName, other.accountName) &&
            Objects.deepEquals(this.accountProvider, other.accountProvider) &&
            Objects.deepEquals(this.accountType, other.accountType) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.currentBalance, other.currentBalance) &&
            Objects.deepEquals(this.platformName, other.platformName) &&
            Objects.deepEquals(this.sourceRef, other.sourceRef);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountName,
            accountProvider,
            accountType,
            currency,
            currentBalance,
            platformName,
            sourceRef);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Accounts.class,
                "accountName", accountName,
                "accountProvider", accountProvider,
                "accountType", accountType,
                "currency", currency,
                "currentBalance", currentBalance,
                "platformName", platformName,
                "sourceRef", sourceRef);
    }
    
    public final static class Builder {
 
        private Optional<String> accountName = Optional.empty();
 
        private Optional<String> accountProvider = Optional.empty();
 
        private Optional<String> accountType = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<? extends BigDecimal> currentBalance = Optional.empty();
 
        private Optional<String> platformName = Optional.empty();
 
        private Optional<? extends ReportSourceReference> sourceRef = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the account according to the provider.
         */
        public Builder accountName(String accountName) {
            Utils.checkNotNull(accountName, "accountName");
            this.accountName = Optional.ofNullable(accountName);
            return this;
        }

        /**
         * The name of the account according to the provider.
         */
        public Builder accountName(Optional<String> accountName) {
            Utils.checkNotNull(accountName, "accountName");
            this.accountName = accountName;
            return this;
        }

        /**
         * The bank or other financial institution providing the account.
         */
        public Builder accountProvider(String accountProvider) {
            Utils.checkNotNull(accountProvider, "accountProvider");
            this.accountProvider = Optional.ofNullable(accountProvider);
            return this;
        }

        /**
         * The bank or other financial institution providing the account.
         */
        public Builder accountProvider(Optional<String> accountProvider) {
            Utils.checkNotNull(accountProvider, "accountProvider");
            this.accountProvider = accountProvider;
            return this;
        }

        /**
         * The type of banking account, e.g. credit or debit.
         */
        public Builder accountType(String accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        /**
         * The type of banking account, e.g. credit or debit.
         */
        public Builder accountType(Optional<String> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * The balance of the bank account.
         */
        public Builder currentBalance(BigDecimal currentBalance) {
            Utils.checkNotNull(currentBalance, "currentBalance");
            this.currentBalance = Optional.ofNullable(currentBalance);
            return this;
        }

        /**
         * The balance of the bank account.
         */
        public Builder currentBalance(double currentBalance) {
            this.currentBalance = Optional.of(BigDecimal.valueOf(currentBalance));
            return this;
        }

        /**
         * The balance of the bank account.
         */
        public Builder currentBalance(Optional<? extends BigDecimal> currentBalance) {
            Utils.checkNotNull(currentBalance, "currentBalance");
            this.currentBalance = currentBalance;
            return this;
        }

        /**
         * Name of the banking data source, e.g. "Plaid".
         */
        public Builder platformName(String platformName) {
            Utils.checkNotNull(platformName, "platformName");
            this.platformName = Optional.ofNullable(platformName);
            return this;
        }

        /**
         * Name of the banking data source, e.g. "Plaid".
         */
        public Builder platformName(Optional<String> platformName) {
            Utils.checkNotNull(platformName, "platformName");
            this.platformName = platformName;
            return this;
        }

        /**
         * A source reference containing the `sourceType` object "Banking".
         */
        public Builder sourceRef(ReportSourceReference sourceRef) {
            Utils.checkNotNull(sourceRef, "sourceRef");
            this.sourceRef = Optional.ofNullable(sourceRef);
            return this;
        }

        /**
         * A source reference containing the `sourceType` object "Banking".
         */
        public Builder sourceRef(Optional<? extends ReportSourceReference> sourceRef) {
            Utils.checkNotNull(sourceRef, "sourceRef");
            this.sourceRef = sourceRef;
            return this;
        }
        
        public Accounts build() {
            return new Accounts(
                accountName,
                accountProvider,
                accountType,
                currency,
                currentBalance,
                platformName,
                sourceRef);
        }
    }
}

