/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * AccountingCreateBankAccountResponseAccountingBankAccount - &gt; **Accessing Bank Accounts through Banking API**
 * &gt; 
 * &gt; This datatype was originally used for accessing bank account data both in accounting integrations and open banking aggregators. 
 * &gt; 
 * &gt; To view bank account data through the Banking API, please refer to the new datatype [here](https://docs.codat.io/lending-api#/schemas/Account)
 * 
 * &gt; View the coverage for bank accounts in the &lt;a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&amp;dataType=bankAccounts" target="_blank"&gt;Data coverage explorer&lt;/a&gt;.
 * 
 * ## Overview
 * 
 * A list of bank accounts associated with a company and a specific data connection.
 * 
 * Bank accounts data includes:
 * * The name and ID of the account in the accounting platform.
 * * The currency and balance of the account.
 * * The sort code and account number.
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
@Deprecated
public class AccountingCreateBankAccountResponseAccountingBankAccount {

    /**
     * Name of the bank account in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountName")
    private JsonNullable<? extends String> accountName;

    /**
     * Account number for the bank account.
     * 
     * Xero integrations
     * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
     * 
     * FreeAgent integrations
     * For Credit accounts, only the last four digits are required. For other types, the field is optional.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountNumber")
    private JsonNullable<? extends String> accountNumber;

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountType")
    private Optional<? extends AccountingBankAccountType> accountType;

    /**
     * Total available balance of the bank account as reported by the underlying data source. This may take into account overdrafts or pending transactions for example.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableBalance")
    private JsonNullable<? extends Double> availableBalance;

    /**
     * Balance of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<? extends Double> balance;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    /**
     * International bank account number of the account. Often used when making or receiving international payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iBan")
    private JsonNullable<? extends String> iBan;

    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * The institution of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("institution")
    private JsonNullable<? extends String> institution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends Metadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<? extends String> modifiedDate;

    /**
     * Code used to identify each nominal account for a business.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nominalCode")
    private JsonNullable<? extends String> nominalCode;

    /**
     * Pre-arranged overdraft limit of the account.
     * 
     * The value is always positive. For example, an overdraftLimit of `1000` means that the balance of the account can go down to `-1000`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overdraftLimit")
    private JsonNullable<? extends Double> overdraftLimit;

    /**
     * Sort code for the bank account.
     * 
     * Xero integrations
     * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortCode")
    private JsonNullable<? extends String> sortCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<? extends String> sourceModifiedDate;

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalData")
    private Optional<? extends SupplementalData> supplementalData;

    public AccountingCreateBankAccountResponseAccountingBankAccount(
            @JsonProperty("accountName") JsonNullable<? extends String> accountName,
            @JsonProperty("accountNumber") JsonNullable<? extends String> accountNumber,
            @JsonProperty("accountType") Optional<? extends AccountingBankAccountType> accountType,
            @JsonProperty("availableBalance") JsonNullable<? extends Double> availableBalance,
            @JsonProperty("balance") JsonNullable<? extends Double> balance,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("iBan") JsonNullable<? extends String> iBan,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("institution") JsonNullable<? extends String> institution,
            @JsonProperty("metadata") Optional<? extends Metadata> metadata,
            @JsonProperty("modifiedDate") Optional<? extends String> modifiedDate,
            @JsonProperty("nominalCode") JsonNullable<? extends String> nominalCode,
            @JsonProperty("overdraftLimit") JsonNullable<? extends Double> overdraftLimit,
            @JsonProperty("sortCode") JsonNullable<? extends String> sortCode,
            @JsonProperty("sourceModifiedDate") Optional<? extends String> sourceModifiedDate,
            @JsonProperty("supplementalData") Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(accountName, "accountName");
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(accountType, "accountType");
        Utils.checkNotNull(availableBalance, "availableBalance");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(iBan, "iBan");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(institution, "institution");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(nominalCode, "nominalCode");
        Utils.checkNotNull(overdraftLimit, "overdraftLimit");
        Utils.checkNotNull(sortCode, "sortCode");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.accountName = accountName;
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.availableBalance = availableBalance;
        this.balance = balance;
        this.currency = currency;
        this.iBan = iBan;
        this.id = id;
        this.institution = institution;
        this.metadata = metadata;
        this.modifiedDate = modifiedDate;
        this.nominalCode = nominalCode;
        this.overdraftLimit = overdraftLimit;
        this.sortCode = sortCode;
        this.sourceModifiedDate = sourceModifiedDate;
        this.supplementalData = supplementalData;
    }

    /**
     * Name of the bank account in the accounting platform.
     */
    public JsonNullable<? extends String> accountName() {
        return accountName;
    }

    /**
     * Account number for the bank account.
     * 
     * Xero integrations
     * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
     * 
     * FreeAgent integrations
     * For Credit accounts, only the last four digits are required. For other types, the field is optional.
     */
    public JsonNullable<? extends String> accountNumber() {
        return accountNumber;
    }

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    public Optional<? extends AccountingBankAccountType> accountType() {
        return accountType;
    }

    /**
     * Total available balance of the bank account as reported by the underlying data source. This may take into account overdrafts or pending transactions for example.
     */
    public JsonNullable<? extends Double> availableBalance() {
        return availableBalance;
    }

    /**
     * Balance of the bank account.
     */
    public JsonNullable<? extends Double> balance() {
        return balance;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public Optional<? extends String> currency() {
        return currency;
    }

    /**
     * International bank account number of the account. Often used when making or receiving international payments.
     */
    public JsonNullable<? extends String> iBan() {
        return iBan;
    }

    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * The institution of the bank account.
     */
    public JsonNullable<? extends String> institution() {
        return institution;
    }

    public Optional<? extends Metadata> metadata() {
        return metadata;
    }

    public Optional<? extends String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * Code used to identify each nominal account for a business.
     */
    public JsonNullable<? extends String> nominalCode() {
        return nominalCode;
    }

    /**
     * Pre-arranged overdraft limit of the account.
     * 
     * The value is always positive. For example, an overdraftLimit of `1000` means that the balance of the account can go down to `-1000`.
     */
    public JsonNullable<? extends Double> overdraftLimit() {
        return overdraftLimit;
    }

    /**
     * Sort code for the bank account.
     * 
     * Xero integrations
     * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
     */
    public JsonNullable<? extends String> sortCode() {
        return sortCode;
    }

    public Optional<? extends String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public Optional<? extends SupplementalData> supplementalData() {
        return supplementalData;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the bank account in the accounting platform.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withAccountName(String accountName) {
        Utils.checkNotNull(accountName, "accountName");
        this.accountName = JsonNullable.of(accountName);
        return this;
    }

    /**
     * Name of the bank account in the accounting platform.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withAccountName(JsonNullable<? extends String> accountName) {
        Utils.checkNotNull(accountName, "accountName");
        this.accountName = accountName;
        return this;
    }

    /**
     * Account number for the bank account.
     * 
     * Xero integrations
     * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
     * 
     * FreeAgent integrations
     * For Credit accounts, only the last four digits are required. For other types, the field is optional.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = JsonNullable.of(accountNumber);
        return this;
    }

    /**
     * Account number for the bank account.
     * 
     * Xero integrations
     * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
     * 
     * FreeAgent integrations
     * For Credit accounts, only the last four digits are required. For other types, the field is optional.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withAccountNumber(JsonNullable<? extends String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withAccountType(AccountingBankAccountType accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = Optional.ofNullable(accountType);
        return this;
    }
    
    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withAccountType(Optional<? extends AccountingBankAccountType> accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }

    /**
     * Total available balance of the bank account as reported by the underlying data source. This may take into account overdrafts or pending transactions for example.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withAvailableBalance(double availableBalance) {
        Utils.checkNotNull(availableBalance, "availableBalance");
        this.availableBalance = JsonNullable.of(availableBalance);
        return this;
    }

    /**
     * Total available balance of the bank account as reported by the underlying data source. This may take into account overdrafts or pending transactions for example.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withAvailableBalance(JsonNullable<? extends Double> availableBalance) {
        Utils.checkNotNull(availableBalance, "availableBalance");
        this.availableBalance = availableBalance;
        return this;
    }

    /**
     * Balance of the bank account.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withBalance(double balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

    /**
     * Balance of the bank account.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withBalance(JsonNullable<? extends Double> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }
    
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * International bank account number of the account. Often used when making or receiving international payments.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withIBan(String iBan) {
        Utils.checkNotNull(iBan, "iBan");
        this.iBan = JsonNullable.of(iBan);
        return this;
    }

    /**
     * International bank account number of the account. Often used when making or receiving international payments.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withIBan(JsonNullable<? extends String> iBan) {
        Utils.checkNotNull(iBan, "iBan");
        this.iBan = iBan;
        return this;
    }

    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }
    
    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The institution of the bank account.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withInstitution(String institution) {
        Utils.checkNotNull(institution, "institution");
        this.institution = JsonNullable.of(institution);
        return this;
    }

    /**
     * The institution of the bank account.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withInstitution(JsonNullable<? extends String> institution) {
        Utils.checkNotNull(institution, "institution");
        this.institution = institution;
        return this;
    }

    public AccountingCreateBankAccountResponseAccountingBankAccount withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }
    
    public AccountingCreateBankAccountResponseAccountingBankAccount withMetadata(Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public AccountingCreateBankAccountResponseAccountingBankAccount withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }
    
    public AccountingCreateBankAccountResponseAccountingBankAccount withModifiedDate(Optional<? extends String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * Code used to identify each nominal account for a business.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withNominalCode(String nominalCode) {
        Utils.checkNotNull(nominalCode, "nominalCode");
        this.nominalCode = JsonNullable.of(nominalCode);
        return this;
    }

    /**
     * Code used to identify each nominal account for a business.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withNominalCode(JsonNullable<? extends String> nominalCode) {
        Utils.checkNotNull(nominalCode, "nominalCode");
        this.nominalCode = nominalCode;
        return this;
    }

    /**
     * Pre-arranged overdraft limit of the account.
     * 
     * The value is always positive. For example, an overdraftLimit of `1000` means that the balance of the account can go down to `-1000`.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withOverdraftLimit(double overdraftLimit) {
        Utils.checkNotNull(overdraftLimit, "overdraftLimit");
        this.overdraftLimit = JsonNullable.of(overdraftLimit);
        return this;
    }

    /**
     * Pre-arranged overdraft limit of the account.
     * 
     * The value is always positive. For example, an overdraftLimit of `1000` means that the balance of the account can go down to `-1000`.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withOverdraftLimit(JsonNullable<? extends Double> overdraftLimit) {
        Utils.checkNotNull(overdraftLimit, "overdraftLimit");
        this.overdraftLimit = overdraftLimit;
        return this;
    }

    /**
     * Sort code for the bank account.
     * 
     * Xero integrations
     * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withSortCode(String sortCode) {
        Utils.checkNotNull(sortCode, "sortCode");
        this.sortCode = JsonNullable.of(sortCode);
        return this;
    }

    /**
     * Sort code for the bank account.
     * 
     * Xero integrations
     * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withSortCode(JsonNullable<? extends String> sortCode) {
        Utils.checkNotNull(sortCode, "sortCode");
        this.sortCode = sortCode;
        return this;
    }

    public AccountingCreateBankAccountResponseAccountingBankAccount withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }
    
    public AccountingCreateBankAccountResponseAccountingBankAccount withSourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withSupplementalData(SupplementalData supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = Optional.ofNullable(supplementalData);
        return this;
    }
    
    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public AccountingCreateBankAccountResponseAccountingBankAccount withSupplementalData(Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = supplementalData;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingCreateBankAccountResponseAccountingBankAccount other = (AccountingCreateBankAccountResponseAccountingBankAccount) o;
        return 
            java.util.Objects.deepEquals(this.accountName, other.accountName) &&
            java.util.Objects.deepEquals(this.accountNumber, other.accountNumber) &&
            java.util.Objects.deepEquals(this.accountType, other.accountType) &&
            java.util.Objects.deepEquals(this.availableBalance, other.availableBalance) &&
            java.util.Objects.deepEquals(this.balance, other.balance) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.iBan, other.iBan) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.institution, other.institution) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            java.util.Objects.deepEquals(this.nominalCode, other.nominalCode) &&
            java.util.Objects.deepEquals(this.overdraftLimit, other.overdraftLimit) &&
            java.util.Objects.deepEquals(this.sortCode, other.sortCode) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            java.util.Objects.deepEquals(this.supplementalData, other.supplementalData);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountName,
            accountNumber,
            accountType,
            availableBalance,
            balance,
            currency,
            iBan,
            id,
            institution,
            metadata,
            modifiedDate,
            nominalCode,
            overdraftLimit,
            sortCode,
            sourceModifiedDate,
            supplementalData);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingCreateBankAccountResponseAccountingBankAccount.class,
                "accountName", accountName,
                "accountNumber", accountNumber,
                "accountType", accountType,
                "availableBalance", availableBalance,
                "balance", balance,
                "currency", currency,
                "iBan", iBan,
                "id", id,
                "institution", institution,
                "metadata", metadata,
                "modifiedDate", modifiedDate,
                "nominalCode", nominalCode,
                "overdraftLimit", overdraftLimit,
                "sortCode", sortCode,
                "sourceModifiedDate", sourceModifiedDate,
                "supplementalData", supplementalData);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> accountName = JsonNullable.undefined();
 
        private JsonNullable<? extends String> accountNumber = JsonNullable.undefined();
 
        private Optional<? extends AccountingBankAccountType> accountType = Optional.empty();
 
        private JsonNullable<? extends Double> availableBalance = JsonNullable.undefined();
 
        private JsonNullable<? extends Double> balance = JsonNullable.undefined();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private JsonNullable<? extends String> iBan = JsonNullable.undefined();
 
        private Optional<? extends String> id = Optional.empty();
 
        private JsonNullable<? extends String> institution = JsonNullable.undefined();
 
        private Optional<? extends Metadata> metadata = Optional.empty();
 
        private Optional<? extends String> modifiedDate = Optional.empty();
 
        private JsonNullable<? extends String> nominalCode = JsonNullable.undefined();
 
        private JsonNullable<? extends Double> overdraftLimit = JsonNullable.undefined();
 
        private JsonNullable<? extends String> sortCode = JsonNullable.undefined();
 
        private Optional<? extends String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends SupplementalData> supplementalData = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the bank account in the accounting platform.
         */
        public Builder accountName(String accountName) {
            Utils.checkNotNull(accountName, "accountName");
            this.accountName = JsonNullable.of(accountName);
            return this;
        }

        /**
         * Name of the bank account in the accounting platform.
         */
        public Builder accountName(JsonNullable<? extends String> accountName) {
            Utils.checkNotNull(accountName, "accountName");
            this.accountName = accountName;
            return this;
        }

        /**
         * Account number for the bank account.
         * 
         * Xero integrations
         * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
         * 
         * FreeAgent integrations
         * For Credit accounts, only the last four digits are required. For other types, the field is optional.
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = JsonNullable.of(accountNumber);
            return this;
        }

        /**
         * Account number for the bank account.
         * 
         * Xero integrations
         * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
         * 
         * FreeAgent integrations
         * For Credit accounts, only the last four digits are required. For other types, the field is optional.
         */
        public Builder accountNumber(JsonNullable<? extends String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * The type of transactions and balances on the account.  
         * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
         * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
         */
        public Builder accountType(AccountingBankAccountType accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }
        
        /**
         * The type of transactions and balances on the account.  
         * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
         * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
         */
        public Builder accountType(Optional<? extends AccountingBankAccountType> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }

        /**
         * Total available balance of the bank account as reported by the underlying data source. This may take into account overdrafts or pending transactions for example.
         */
        public Builder availableBalance(double availableBalance) {
            Utils.checkNotNull(availableBalance, "availableBalance");
            this.availableBalance = JsonNullable.of(availableBalance);
            return this;
        }

        /**
         * Total available balance of the bank account as reported by the underlying data source. This may take into account overdrafts or pending transactions for example.
         */
        public Builder availableBalance(JsonNullable<? extends Double> availableBalance) {
            Utils.checkNotNull(availableBalance, "availableBalance");
            this.availableBalance = availableBalance;
            return this;
        }

        /**
         * Balance of the bank account.
         */
        public Builder balance(double balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * Balance of the bank account.
         */
        public Builder balance(JsonNullable<? extends Double> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }
        
        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * International bank account number of the account. Often used when making or receiving international payments.
         */
        public Builder iBan(String iBan) {
            Utils.checkNotNull(iBan, "iBan");
            this.iBan = JsonNullable.of(iBan);
            return this;
        }

        /**
         * International bank account number of the account. Often used when making or receiving international payments.
         */
        public Builder iBan(JsonNullable<? extends String> iBan) {
            Utils.checkNotNull(iBan, "iBan");
            this.iBan = iBan;
            return this;
        }

        /**
         * Identifier for the account, unique for the company in the accounting platform.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }
        
        /**
         * Identifier for the account, unique for the company in the accounting platform.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The institution of the bank account.
         */
        public Builder institution(String institution) {
            Utils.checkNotNull(institution, "institution");
            this.institution = JsonNullable.of(institution);
            return this;
        }

        /**
         * The institution of the bank account.
         */
        public Builder institution(JsonNullable<? extends String> institution) {
            Utils.checkNotNull(institution, "institution");
            this.institution = institution;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }
        
        public Builder metadata(Optional<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }
        
        public Builder modifiedDate(Optional<? extends String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * Code used to identify each nominal account for a business.
         */
        public Builder nominalCode(String nominalCode) {
            Utils.checkNotNull(nominalCode, "nominalCode");
            this.nominalCode = JsonNullable.of(nominalCode);
            return this;
        }

        /**
         * Code used to identify each nominal account for a business.
         */
        public Builder nominalCode(JsonNullable<? extends String> nominalCode) {
            Utils.checkNotNull(nominalCode, "nominalCode");
            this.nominalCode = nominalCode;
            return this;
        }

        /**
         * Pre-arranged overdraft limit of the account.
         * 
         * The value is always positive. For example, an overdraftLimit of `1000` means that the balance of the account can go down to `-1000`.
         */
        public Builder overdraftLimit(double overdraftLimit) {
            Utils.checkNotNull(overdraftLimit, "overdraftLimit");
            this.overdraftLimit = JsonNullable.of(overdraftLimit);
            return this;
        }

        /**
         * Pre-arranged overdraft limit of the account.
         * 
         * The value is always positive. For example, an overdraftLimit of `1000` means that the balance of the account can go down to `-1000`.
         */
        public Builder overdraftLimit(JsonNullable<? extends Double> overdraftLimit) {
            Utils.checkNotNull(overdraftLimit, "overdraftLimit");
            this.overdraftLimit = overdraftLimit;
            return this;
        }

        /**
         * Sort code for the bank account.
         * 
         * Xero integrations
         * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
         */
        public Builder sortCode(String sortCode) {
            Utils.checkNotNull(sortCode, "sortCode");
            this.sortCode = JsonNullable.of(sortCode);
            return this;
        }

        /**
         * Sort code for the bank account.
         * 
         * Xero integrations
         * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
         */
        public Builder sortCode(JsonNullable<? extends String> sortCode) {
            Utils.checkNotNull(sortCode, "sortCode");
            this.sortCode = sortCode;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }
        
        public Builder sourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(SupplementalData supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = Optional.ofNullable(supplementalData);
            return this;
        }
        
        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(Optional<? extends SupplementalData> supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = supplementalData;
            return this;
        }        
        
        public AccountingCreateBankAccountResponseAccountingBankAccount build() {
            return new AccountingCreateBankAccountResponseAccountingBankAccount(
                accountName,
                accountNumber,
                accountType,
                availableBalance,
                balance,
                currency,
                iBan,
                id,
                institution,
                metadata,
                modifiedDate,
                nominalCode,
                overdraftLimit,
                sortCode,
                sourceModifiedDate,
                supplementalData);
        }
    }
}

