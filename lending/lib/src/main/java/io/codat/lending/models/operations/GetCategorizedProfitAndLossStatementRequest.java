/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.operations;

import io.codat.lending.utils.SpeakeasyMetadata;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class GetCategorizedProfitAndLossStatementRequest {

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * The number of periods to return. If not provided, 12 periods will be used as the default value.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=numberOfPeriods")
    private Optional<? extends Long> numberOfPeriods;

    /**
     * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=reportDate")
    private Optional<? extends String> reportDate;

    public GetCategorizedProfitAndLossStatementRequest(
            String companyId,
            Optional<? extends Long> numberOfPeriods,
            Optional<? extends String> reportDate) {
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(numberOfPeriods, "numberOfPeriods");
        Utils.checkNotNull(reportDate, "reportDate");
        this.companyId = companyId;
        this.numberOfPeriods = numberOfPeriods;
        this.reportDate = reportDate;
    }

    /**
     * Unique identifier for a company.
     */
    public String companyId() {
        return companyId;
    }

    /**
     * The number of periods to return. If not provided, 12 periods will be used as the default value.
     */
    public Optional<? extends Long> numberOfPeriods() {
        return numberOfPeriods;
    }

    /**
     * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
     */
    public Optional<? extends String> reportDate() {
        return reportDate;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for a company.
     */
    public GetCategorizedProfitAndLossStatementRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * The number of periods to return. If not provided, 12 periods will be used as the default value.
     */
    public GetCategorizedProfitAndLossStatementRequest withNumberOfPeriods(long numberOfPeriods) {
        Utils.checkNotNull(numberOfPeriods, "numberOfPeriods");
        this.numberOfPeriods = Optional.ofNullable(numberOfPeriods);
        return this;
    }
    
    /**
     * The number of periods to return. If not provided, 12 periods will be used as the default value.
     */
    public GetCategorizedProfitAndLossStatementRequest withNumberOfPeriods(Optional<? extends Long> numberOfPeriods) {
        Utils.checkNotNull(numberOfPeriods, "numberOfPeriods");
        this.numberOfPeriods = numberOfPeriods;
        return this;
    }

    /**
     * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
     */
    public GetCategorizedProfitAndLossStatementRequest withReportDate(String reportDate) {
        Utils.checkNotNull(reportDate, "reportDate");
        this.reportDate = Optional.ofNullable(reportDate);
        return this;
    }
    
    /**
     * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
     */
    public GetCategorizedProfitAndLossStatementRequest withReportDate(Optional<? extends String> reportDate) {
        Utils.checkNotNull(reportDate, "reportDate");
        this.reportDate = reportDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCategorizedProfitAndLossStatementRequest other = (GetCategorizedProfitAndLossStatementRequest) o;
        return 
            java.util.Objects.deepEquals(this.companyId, other.companyId) &&
            java.util.Objects.deepEquals(this.numberOfPeriods, other.numberOfPeriods) &&
            java.util.Objects.deepEquals(this.reportDate, other.reportDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            companyId,
            numberOfPeriods,
            reportDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCategorizedProfitAndLossStatementRequest.class,
                "companyId", companyId,
                "numberOfPeriods", numberOfPeriods,
                "reportDate", reportDate);
    }
    
    public final static class Builder {
 
        private String companyId;
 
        private Optional<? extends Long> numberOfPeriods = Optional.empty();
 
        private Optional<? extends String> reportDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * The number of periods to return. If not provided, 12 periods will be used as the default value.
         */
        public Builder numberOfPeriods(long numberOfPeriods) {
            Utils.checkNotNull(numberOfPeriods, "numberOfPeriods");
            this.numberOfPeriods = Optional.ofNullable(numberOfPeriods);
            return this;
        }
        
        /**
         * The number of periods to return. If not provided, 12 periods will be used as the default value.
         */
        public Builder numberOfPeriods(Optional<? extends Long> numberOfPeriods) {
            Utils.checkNotNull(numberOfPeriods, "numberOfPeriods");
            this.numberOfPeriods = numberOfPeriods;
            return this;
        }

        /**
         * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
         */
        public Builder reportDate(String reportDate) {
            Utils.checkNotNull(reportDate, "reportDate");
            this.reportDate = Optional.ofNullable(reportDate);
            return this;
        }
        
        /**
         * The date in which the report is created up to. Users must specify a specific date, however the response will be provided for the full month.
         */
        public Builder reportDate(Optional<? extends String> reportDate) {
            Utils.checkNotNull(reportDate, "reportDate");
            this.reportDate = reportDate;
            return this;
        }        
        
        public GetCategorizedProfitAndLossStatementRequest build() {
            return new GetCategorizedProfitAndLossStatementRequest(
                companyId,
                numberOfPeriods,
                reportDate);
        }
    }
}

