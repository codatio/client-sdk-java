/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * ProductInventory - Information about the total inventory as well as the locations inventory is in.
 */

public class ProductInventory {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    private Optional<? extends java.util.List<ProductInventoryLocation>> locations;

    /**
     * The total quantity of stock remaining across locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalQuantity")
    private JsonNullable<? extends Double> totalQuantity;

    public ProductInventory(
            @JsonProperty("locations") Optional<? extends java.util.List<ProductInventoryLocation>> locations,
            @JsonProperty("totalQuantity") JsonNullable<? extends Double> totalQuantity) {
        Utils.checkNotNull(locations, "locations");
        Utils.checkNotNull(totalQuantity, "totalQuantity");
        this.locations = locations;
        this.totalQuantity = totalQuantity;
    }

    public Optional<? extends java.util.List<ProductInventoryLocation>> locations() {
        return locations;
    }

    /**
     * The total quantity of stock remaining across locations.
     */
    public JsonNullable<? extends Double> totalQuantity() {
        return totalQuantity;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public ProductInventory withLocations(java.util.List<ProductInventoryLocation> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = Optional.ofNullable(locations);
        return this;
    }
    
    public ProductInventory withLocations(Optional<? extends java.util.List<ProductInventoryLocation>> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = locations;
        return this;
    }

    /**
     * The total quantity of stock remaining across locations.
     */
    public ProductInventory withTotalQuantity(double totalQuantity) {
        Utils.checkNotNull(totalQuantity, "totalQuantity");
        this.totalQuantity = JsonNullable.of(totalQuantity);
        return this;
    }

    /**
     * The total quantity of stock remaining across locations.
     */
    public ProductInventory withTotalQuantity(JsonNullable<? extends Double> totalQuantity) {
        Utils.checkNotNull(totalQuantity, "totalQuantity");
        this.totalQuantity = totalQuantity;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProductInventory other = (ProductInventory) o;
        return 
            java.util.Objects.deepEquals(this.locations, other.locations) &&
            java.util.Objects.deepEquals(this.totalQuantity, other.totalQuantity);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            locations,
            totalQuantity);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProductInventory.class,
                "locations", locations,
                "totalQuantity", totalQuantity);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<ProductInventoryLocation>> locations = Optional.empty();
 
        private JsonNullable<? extends Double> totalQuantity = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder locations(java.util.List<ProductInventoryLocation> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = Optional.ofNullable(locations);
            return this;
        }
        
        public Builder locations(Optional<? extends java.util.List<ProductInventoryLocation>> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = locations;
            return this;
        }

        /**
         * The total quantity of stock remaining across locations.
         */
        public Builder totalQuantity(double totalQuantity) {
            Utils.checkNotNull(totalQuantity, "totalQuantity");
            this.totalQuantity = JsonNullable.of(totalQuantity);
            return this;
        }

        /**
         * The total quantity of stock remaining across locations.
         */
        public Builder totalQuantity(JsonNullable<? extends Double> totalQuantity) {
            Utils.checkNotNull(totalQuantity, "totalQuantity");
            this.totalQuantity = totalQuantity;
            return this;
        }        
        
        public ProductInventory build() {
            return new ProductInventory(
                locations,
                totalQuantity);
        }
    }
}

