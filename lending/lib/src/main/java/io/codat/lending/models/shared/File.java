/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class File {

    /**
     * An optional display name for the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private JsonNullable<? extends String> displayName;

    /**
     * The file's name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileName")
    private JsonNullable<? extends String> fileName;

    /**
     * The source of the file uploaded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceType")
    private JsonNullable<? extends String> sourceType;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploaded")
    private Optional<? extends String> uploaded;

    public File(
            @JsonProperty("displayName") JsonNullable<? extends String> displayName,
            @JsonProperty("fileName") JsonNullable<? extends String> fileName,
            @JsonProperty("sourceType") JsonNullable<? extends String> sourceType,
            @JsonProperty("uploaded") Optional<? extends String> uploaded) {
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(fileName, "fileName");
        Utils.checkNotNull(sourceType, "sourceType");
        Utils.checkNotNull(uploaded, "uploaded");
        this.displayName = displayName;
        this.fileName = fileName;
        this.sourceType = sourceType;
        this.uploaded = uploaded;
    }

    /**
     * An optional display name for the file.
     */
    public JsonNullable<? extends String> displayName() {
        return displayName;
    }

    /**
     * The file's name.
     */
    public JsonNullable<? extends String> fileName() {
        return fileName;
    }

    /**
     * The source of the file uploaded.
     */
    public JsonNullable<? extends String> sourceType() {
        return sourceType;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> uploaded() {
        return uploaded;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An optional display name for the file.
     */
    public File withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = JsonNullable.of(displayName);
        return this;
    }

    /**
     * An optional display name for the file.
     */
    public File withDisplayName(JsonNullable<? extends String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The file's name.
     */
    public File withFileName(String fileName) {
        Utils.checkNotNull(fileName, "fileName");
        this.fileName = JsonNullable.of(fileName);
        return this;
    }

    /**
     * The file's name.
     */
    public File withFileName(JsonNullable<? extends String> fileName) {
        Utils.checkNotNull(fileName, "fileName");
        this.fileName = fileName;
        return this;
    }

    /**
     * The source of the file uploaded.
     */
    public File withSourceType(String sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = JsonNullable.of(sourceType);
        return this;
    }

    /**
     * The source of the file uploaded.
     */
    public File withSourceType(JsonNullable<? extends String> sourceType) {
        Utils.checkNotNull(sourceType, "sourceType");
        this.sourceType = sourceType;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public File withUploaded(String uploaded) {
        Utils.checkNotNull(uploaded, "uploaded");
        this.uploaded = Optional.ofNullable(uploaded);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public File withUploaded(Optional<? extends String> uploaded) {
        Utils.checkNotNull(uploaded, "uploaded");
        this.uploaded = uploaded;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        File other = (File) o;
        return 
            java.util.Objects.deepEquals(this.displayName, other.displayName) &&
            java.util.Objects.deepEquals(this.fileName, other.fileName) &&
            java.util.Objects.deepEquals(this.sourceType, other.sourceType) &&
            java.util.Objects.deepEquals(this.uploaded, other.uploaded);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            displayName,
            fileName,
            sourceType,
            uploaded);
    }
    
    @Override
    public String toString() {
        return Utils.toString(File.class,
                "displayName", displayName,
                "fileName", fileName,
                "sourceType", sourceType,
                "uploaded", uploaded);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> displayName = JsonNullable.undefined();
 
        private JsonNullable<? extends String> fileName = JsonNullable.undefined();
 
        private JsonNullable<? extends String> sourceType = JsonNullable.undefined();
 
        private Optional<? extends String> uploaded = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An optional display name for the file.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = JsonNullable.of(displayName);
            return this;
        }

        /**
         * An optional display name for the file.
         */
        public Builder displayName(JsonNullable<? extends String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The file's name.
         */
        public Builder fileName(String fileName) {
            Utils.checkNotNull(fileName, "fileName");
            this.fileName = JsonNullable.of(fileName);
            return this;
        }

        /**
         * The file's name.
         */
        public Builder fileName(JsonNullable<? extends String> fileName) {
            Utils.checkNotNull(fileName, "fileName");
            this.fileName = fileName;
            return this;
        }

        /**
         * The source of the file uploaded.
         */
        public Builder sourceType(String sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = JsonNullable.of(sourceType);
            return this;
        }

        /**
         * The source of the file uploaded.
         */
        public Builder sourceType(JsonNullable<? extends String> sourceType) {
            Utils.checkNotNull(sourceType, "sourceType");
            this.sourceType = sourceType;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder uploaded(String uploaded) {
            Utils.checkNotNull(uploaded, "uploaded");
            this.uploaded = Optional.ofNullable(uploaded);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder uploaded(Optional<? extends String> uploaded) {
            Utils.checkNotNull(uploaded, "uploaded");
            this.uploaded = uploaded;
            return this;
        }        
        
        public File build() {
            return new File(
                displayName,
                fileName,
                sourceType,
                uploaded);
        }
    }
}

