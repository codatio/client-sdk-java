/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * SupplementalData - Supplemental data is additional data you can include in our standard data types. 
 * 
 * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
 */

public class SupplementalData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private JsonNullable<? extends java.util.Map<String, java.util.Map<String, java.lang.Object>>> content;

    public SupplementalData(
            @JsonProperty("content") JsonNullable<? extends java.util.Map<String, java.util.Map<String, java.lang.Object>>> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
    }

    public JsonNullable<? extends java.util.Map<String, java.util.Map<String, java.lang.Object>>> content() {
        return content;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public SupplementalData withContent(java.util.Map<String, java.util.Map<String, java.lang.Object>> content) {
        Utils.checkNotNull(content, "content");
        this.content = JsonNullable.of(content);
        return this;
    }

    public SupplementalData withContent(JsonNullable<? extends java.util.Map<String, java.util.Map<String, java.lang.Object>>> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupplementalData other = (SupplementalData) o;
        return 
            java.util.Objects.deepEquals(this.content, other.content);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            content);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SupplementalData.class,
                "content", content);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends java.util.Map<String, java.util.Map<String, java.lang.Object>>> content = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder content(java.util.Map<String, java.util.Map<String, java.lang.Object>> content) {
            Utils.checkNotNull(content, "content");
            this.content = JsonNullable.of(content);
            return this;
        }

        public Builder content(JsonNullable<? extends java.util.Map<String, java.util.Map<String, java.lang.Object>>> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }        
        
        public SupplementalData build() {
            return new SupplementalData(
                content);
        }
    }
}

