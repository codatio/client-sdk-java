/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class DataIntegrityByCount {

    /**
     * The percentage of records of the type specified in the route which have a match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matchPercentage")
    private Optional<? extends Double> matchPercentage;

    /**
     * The number of records of the type specified in the route which do have a match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matched")
    private Optional<? extends Double> matched;

    /**
     * The total of unmatched and matched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    private Optional<? extends Double> total;

    /**
     * The number of records of the type specified in the route which don't have a match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unmatched")
    private Optional<? extends Double> unmatched;

    public DataIntegrityByCount(
            @JsonProperty("matchPercentage") Optional<? extends Double> matchPercentage,
            @JsonProperty("matched") Optional<? extends Double> matched,
            @JsonProperty("total") Optional<? extends Double> total,
            @JsonProperty("unmatched") Optional<? extends Double> unmatched) {
        Utils.checkNotNull(matchPercentage, "matchPercentage");
        Utils.checkNotNull(matched, "matched");
        Utils.checkNotNull(total, "total");
        Utils.checkNotNull(unmatched, "unmatched");
        this.matchPercentage = matchPercentage;
        this.matched = matched;
        this.total = total;
        this.unmatched = unmatched;
    }

    /**
     * The percentage of records of the type specified in the route which have a match.
     */
    public Optional<? extends Double> matchPercentage() {
        return matchPercentage;
    }

    /**
     * The number of records of the type specified in the route which do have a match.
     */
    public Optional<? extends Double> matched() {
        return matched;
    }

    /**
     * The total of unmatched and matched.
     */
    public Optional<? extends Double> total() {
        return total;
    }

    /**
     * The number of records of the type specified in the route which don't have a match.
     */
    public Optional<? extends Double> unmatched() {
        return unmatched;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The percentage of records of the type specified in the route which have a match.
     */
    public DataIntegrityByCount withMatchPercentage(double matchPercentage) {
        Utils.checkNotNull(matchPercentage, "matchPercentage");
        this.matchPercentage = Optional.ofNullable(matchPercentage);
        return this;
    }
    
    /**
     * The percentage of records of the type specified in the route which have a match.
     */
    public DataIntegrityByCount withMatchPercentage(Optional<? extends Double> matchPercentage) {
        Utils.checkNotNull(matchPercentage, "matchPercentage");
        this.matchPercentage = matchPercentage;
        return this;
    }

    /**
     * The number of records of the type specified in the route which do have a match.
     */
    public DataIntegrityByCount withMatched(double matched) {
        Utils.checkNotNull(matched, "matched");
        this.matched = Optional.ofNullable(matched);
        return this;
    }
    
    /**
     * The number of records of the type specified in the route which do have a match.
     */
    public DataIntegrityByCount withMatched(Optional<? extends Double> matched) {
        Utils.checkNotNull(matched, "matched");
        this.matched = matched;
        return this;
    }

    /**
     * The total of unmatched and matched.
     */
    public DataIntegrityByCount withTotal(double total) {
        Utils.checkNotNull(total, "total");
        this.total = Optional.ofNullable(total);
        return this;
    }
    
    /**
     * The total of unmatched and matched.
     */
    public DataIntegrityByCount withTotal(Optional<? extends Double> total) {
        Utils.checkNotNull(total, "total");
        this.total = total;
        return this;
    }

    /**
     * The number of records of the type specified in the route which don't have a match.
     */
    public DataIntegrityByCount withUnmatched(double unmatched) {
        Utils.checkNotNull(unmatched, "unmatched");
        this.unmatched = Optional.ofNullable(unmatched);
        return this;
    }
    
    /**
     * The number of records of the type specified in the route which don't have a match.
     */
    public DataIntegrityByCount withUnmatched(Optional<? extends Double> unmatched) {
        Utils.checkNotNull(unmatched, "unmatched");
        this.unmatched = unmatched;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataIntegrityByCount other = (DataIntegrityByCount) o;
        return 
            java.util.Objects.deepEquals(this.matchPercentage, other.matchPercentage) &&
            java.util.Objects.deepEquals(this.matched, other.matched) &&
            java.util.Objects.deepEquals(this.total, other.total) &&
            java.util.Objects.deepEquals(this.unmatched, other.unmatched);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            matchPercentage,
            matched,
            total,
            unmatched);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataIntegrityByCount.class,
                "matchPercentage", matchPercentage,
                "matched", matched,
                "total", total,
                "unmatched", unmatched);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> matchPercentage = Optional.empty();
 
        private Optional<? extends Double> matched = Optional.empty();
 
        private Optional<? extends Double> total = Optional.empty();
 
        private Optional<? extends Double> unmatched = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The percentage of records of the type specified in the route which have a match.
         */
        public Builder matchPercentage(double matchPercentage) {
            Utils.checkNotNull(matchPercentage, "matchPercentage");
            this.matchPercentage = Optional.ofNullable(matchPercentage);
            return this;
        }
        
        /**
         * The percentage of records of the type specified in the route which have a match.
         */
        public Builder matchPercentage(Optional<? extends Double> matchPercentage) {
            Utils.checkNotNull(matchPercentage, "matchPercentage");
            this.matchPercentage = matchPercentage;
            return this;
        }

        /**
         * The number of records of the type specified in the route which do have a match.
         */
        public Builder matched(double matched) {
            Utils.checkNotNull(matched, "matched");
            this.matched = Optional.ofNullable(matched);
            return this;
        }
        
        /**
         * The number of records of the type specified in the route which do have a match.
         */
        public Builder matched(Optional<? extends Double> matched) {
            Utils.checkNotNull(matched, "matched");
            this.matched = matched;
            return this;
        }

        /**
         * The total of unmatched and matched.
         */
        public Builder total(double total) {
            Utils.checkNotNull(total, "total");
            this.total = Optional.ofNullable(total);
            return this;
        }
        
        /**
         * The total of unmatched and matched.
         */
        public Builder total(Optional<? extends Double> total) {
            Utils.checkNotNull(total, "total");
            this.total = total;
            return this;
        }

        /**
         * The number of records of the type specified in the route which don't have a match.
         */
        public Builder unmatched(double unmatched) {
            Utils.checkNotNull(unmatched, "unmatched");
            this.unmatched = Optional.ofNullable(unmatched);
            return this;
        }
        
        /**
         * The number of records of the type specified in the route which don't have a match.
         */
        public Builder unmatched(Optional<? extends Double> unmatched) {
            Utils.checkNotNull(unmatched, "unmatched");
            this.unmatched = unmatched;
            return this;
        }        
        
        public DataIntegrityByCount build() {
            return new DataIntegrityByCount(
                matchPercentage,
                matched,
                total,
                unmatched);
        }
    }
}

