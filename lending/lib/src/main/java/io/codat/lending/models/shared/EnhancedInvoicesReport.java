/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;

/**
 * EnhancedInvoicesReport - The enhanced invoices report takes the key elements of the Invoices report verifying those marked as paid in the accounting platform have actually been paid by matching with the bank statement.
 */

public class EnhancedInvoicesReport {

    /**
     * Report additional information, which is specific to Lending API reports.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportInfo")
    private Optional<? extends ReportInfo> reportInfo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportItems")
    private Optional<? extends java.util.List<EnhancedInvoiceReportItem>> reportItems;

    public EnhancedInvoicesReport(
            @JsonProperty("reportInfo") Optional<? extends ReportInfo> reportInfo,
            @JsonProperty("reportItems") Optional<? extends java.util.List<EnhancedInvoiceReportItem>> reportItems) {
        Utils.checkNotNull(reportInfo, "reportInfo");
        Utils.checkNotNull(reportItems, "reportItems");
        this.reportInfo = reportInfo;
        this.reportItems = reportItems;
    }

    /**
     * Report additional information, which is specific to Lending API reports.
     */
    public Optional<? extends ReportInfo> reportInfo() {
        return reportInfo;
    }

    public Optional<? extends java.util.List<EnhancedInvoiceReportItem>> reportItems() {
        return reportItems;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Report additional information, which is specific to Lending API reports.
     */
    public EnhancedInvoicesReport withReportInfo(ReportInfo reportInfo) {
        Utils.checkNotNull(reportInfo, "reportInfo");
        this.reportInfo = Optional.ofNullable(reportInfo);
        return this;
    }
    
    /**
     * Report additional information, which is specific to Lending API reports.
     */
    public EnhancedInvoicesReport withReportInfo(Optional<? extends ReportInfo> reportInfo) {
        Utils.checkNotNull(reportInfo, "reportInfo");
        this.reportInfo = reportInfo;
        return this;
    }

    public EnhancedInvoicesReport withReportItems(java.util.List<EnhancedInvoiceReportItem> reportItems) {
        Utils.checkNotNull(reportItems, "reportItems");
        this.reportItems = Optional.ofNullable(reportItems);
        return this;
    }
    
    public EnhancedInvoicesReport withReportItems(Optional<? extends java.util.List<EnhancedInvoiceReportItem>> reportItems) {
        Utils.checkNotNull(reportItems, "reportItems");
        this.reportItems = reportItems;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnhancedInvoicesReport other = (EnhancedInvoicesReport) o;
        return 
            java.util.Objects.deepEquals(this.reportInfo, other.reportInfo) &&
            java.util.Objects.deepEquals(this.reportItems, other.reportItems);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            reportInfo,
            reportItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EnhancedInvoicesReport.class,
                "reportInfo", reportInfo,
                "reportItems", reportItems);
    }
    
    public final static class Builder {
 
        private Optional<? extends ReportInfo> reportInfo = Optional.empty();
 
        private Optional<? extends java.util.List<EnhancedInvoiceReportItem>> reportItems = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Report additional information, which is specific to Lending API reports.
         */
        public Builder reportInfo(ReportInfo reportInfo) {
            Utils.checkNotNull(reportInfo, "reportInfo");
            this.reportInfo = Optional.ofNullable(reportInfo);
            return this;
        }
        
        /**
         * Report additional information, which is specific to Lending API reports.
         */
        public Builder reportInfo(Optional<? extends ReportInfo> reportInfo) {
            Utils.checkNotNull(reportInfo, "reportInfo");
            this.reportInfo = reportInfo;
            return this;
        }

        public Builder reportItems(java.util.List<EnhancedInvoiceReportItem> reportItems) {
            Utils.checkNotNull(reportItems, "reportItems");
            this.reportItems = Optional.ofNullable(reportItems);
            return this;
        }
        
        public Builder reportItems(Optional<? extends java.util.List<EnhancedInvoiceReportItem>> reportItems) {
            Utils.checkNotNull(reportItems, "reportItems");
            this.reportItems = reportItems;
            return this;
        }        
        
        public EnhancedInvoicesReport build() {
            return new EnhancedInvoicesReport(
                reportInfo,
                reportItems);
        }
    }
}

