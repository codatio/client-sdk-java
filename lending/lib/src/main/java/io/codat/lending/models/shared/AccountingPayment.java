/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * AccountingPayment - ﻿&gt; **Payments or bill payments?**
 * &gt;
 * &gt;  In Codat, payments represent accounts receivable only. For accounts payable, see [bill payments](https://docs.codat.io/lending-api#/schemas/BillPayment). These include [bills](https://docs.codat.io/lending-api#/schemas/Bill) and credit notes against bills.
 * 
 * &gt; View the coverage for payments in the &lt;a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&amp;dataType=payments" target="_blank"&gt;Data coverage explorer&lt;/a&gt;.
 * 
 * ## Overview
 * 
 * Payments include all accounts receivable transaction data. This includes [invoices](https://docs.codat.io/lending-api#/schemas/Invoice) and [credit notes](https://docs.codat.io/lending-api#/schemas/CreditNote).
 * 
 * A payment in Codat usually represents an allocation of money within any customer accounts receivable account. This includes, but is not strictly limited to:
 * 
 * - A payment made against an invoice, like a credit card, cheque, or cash payment.
 * - An allocation of a customer's credit note, either to an invoice or maybe a refund.
 * - A payment made directly to that accounts receivable account. This might be an overpayment or a prepayment. It might also be the refund of a payment made directly to an accounts receivable account.
 * 
 * Depending on the payments allowed by the underlying accounting package, some payment types may be combined. Please see the example for more details.
 * 
 * In Codat, a payment contains details of:
 * 
 * - When the payment was recorded in the accounting system.
 * - How much it is for and in what currency that amount is in.
 * - Who the payment was _paid by_ – the _customer_.
 * - The payment method used.
 * - The breakdown of the types of payments – the _line items_.
 * 
 * Payments is a child data type of [account transactions](https://docs.codat.io/lending-api#/schemas/AccountTransaction).
 * 
 * ## Payment types
 * 
 * ## Payment of an invoice
 * 
 * A payment paying a single invoice has one entry in its `lines` array. This **line** has the following properties:
 * 
 * - An _amount_ that indicates the amount of the invoice that was paid. This is always positive.
 * - A **links** array containing one element with the following properties:
 *     - A **type** that indicates the type of **link**, in this case an `Invoice`.
 *     - An **id** that contains the ID of the invoice that was paid.
 *     - An **amount** for the link. The sum of the **line.amount** and the **links.amount** must equal `0`.
 * 
 * The **amount** field on the **line** equals the **totalAmount** on the payment.
 * 
 * ## Payment of multiple invoices
 * 
 * A single payment can pay multiple invoices. This can be represented in one of two formats depending on how the customer keeps their books:
 * 
 * - The payment has multiple entries in its **lines** array, one for each invoice that is paid. Each line follows the example and rules described in [Payment of an invoice](#payment-of-an-invoice).
 * - The payment has a line with multiple links to each invoice. This occurs when the proportion of the original payment allocated to each invoice is not available.
 * 
 * Each **line** has the same properties as those described in [Payment of an invoice](#payment-of-an-invoice), with the **amount** indicating how much of the payment was allocated to the invoice. The sum of line amounts equals the **totalAmount** on the payment.
 * 
 * ## Payments and refunds on account
 * 
 * A payment on account, that is a payment that doesn’t pay a specific invoice, has one entry in its lines array. The **line** has the following properties:
 * 
 * - A **totalAmount** that indicates the amount paid by a customer or refunded to them by a company. A payment to the customer is always negative. A refund is always positive.
 * - A **links** array containing one element with the following properties:
 * - A **type** that indicates the type of link. For a payment this is `PaymentOnAccount`. For a refund this is `Refund`.
 * - The **id** containing the ID of the customer.
 * - The **amount** for the link is `0` – the **totalAmount** _or_ the amount of the payment or refund.
 * 
 * It is possible to have a payment that is part _on account_ and part _allocated_ to an invoice. Each line should follow the examples above.
 * 
 * ## Using a credit note to pay an invoice
 * 
 * The payment of an invoice using a credit note has one entry in its **lines** array. This **line** has the following properties:
 * 
 * - An **amount** that indicates the amount of money moved, which in this case is `0`, as the credit note and invoice allocation must balance each other.
 * - A **links** array containing two elements:
 *     - The first **link** has:
 *         - A **type** that indicates the type of **link**, in this case an `Invoice`.
 *         - An **id** that contains the ID of the invoice that was paid.
 *     - The second **link** has:
 *         - A **type** that indicates the type of **link**, in this case a `CreditNote`.
 *         - An **id** that contains the ID of the credit note used by this payment.
 * 
 * The **amount** field on the **line** equals the **totalAmount** on the payment.
 * 
 * ## Refunding a credit note
 * 
 * A payment refunding a credit note has one entry in its **lines** array. This **line** has the following properties:
 * 
 * - An **amount** that indicates the amount of the credit note that was refunded. This is always negative for a refund.
 * - A **links** array that contains one element with the following properties:
 *     - A **type** that indicates the type of **link**, in this case a `CreditNote`.
 *     - An **id** that contains the ID of the credit note that was refunded.
 * 
 * The **totalAmount** field on the payment equals the **amount** field of the **line**. These are both negative, as this is money leaving accounts receivable.
 * 
 * ## Refunding a payment
 * 
 * If a payment is refunded, for example, if a customer overpaid an invoice and the overpayment is returned to the customer, there are two payment records:
 * 
 * - One for the incoming over payment.
 * - Another for the outgoing refund.
 * 
 * The payment issuing the refund has a negative **totalAmount**. This payment also has one entry in its lines array with the following properties:
 * 
 * - An **amount** that indicates the amount that was refunded. This is always negative.
 * - A **links** array that contains one element with the following properties:
 *     - A **type** that indicates the type of **link**, in this case a `Payment`.
 *     - An **id** that contains the ID of the payment that was refunded.
 * 
 * The **amount** field on the **line** equals the **totalAmount** on the payment and is negative, as this is money leaving accounts receivable.
 * 
 * The payment that was refunded has a line where the **amount** is positive and the type of the link is `Refund`. This payment may have several entries in its **lines** array if it was used to partly pay an invoice.
 * 
 * For example: A £1,050 payment on a £1,000 invoice with a refund of £50 has two lines:
 * 
 * - One for £1,000 linked to the invoice that was paid.
 * - Another for £50 linked to the payment that refunded the overpayment with a** type** of `Refund` and an ID that corresponds to the payment.
 * 
 * The **line** linked to the payment has the following properties:
 * 
 * - An **amount** that indicates the amount that was refunded. This is positive as its money that was added to accounts receivable. It's balanced out by the negative amount of the refund.
 * - A **links** array containing one element with the following properties:
 *     - A **type** that indicates the type of **link**, in this case a `Refund`.
 *     - An **id** that contains the ID of the payment that refunded this line.
 * 
 * &gt; **Support for linked payments**
 * &gt;
 * &gt; Not all accounting packages support linking payments in this way. In some platforms, you may see a payment on account and a refund on account.
 * 
 * ## Foreign currencies
 * 
 * There are two types of currency rate that are included in the payments data type:
 * 
 * Payment currency rate:
 * 
 * - Base currency of the accounts receivable account.
 * - Foreign currency of the payment.
 * 
 * Payment line link currency rate:
 * 
 * - Base currency of the item the link represents.
 * - Foreign currency of the payment.
 * 
 * These two rates allow the calculation of currency loss or gain for any of the transactions affected by the payment lines. The second rate is used when a payment is applied to an item in a currency that doesn't match either:
 * 
 * - The base currency for the accounts receivable account.
 * - The currency of the item.
 * 
 *   ```json title="Currency rate example"
 *   {
 *       "id": "123",
 *       "note": "",
 *       "totalAmount": 99.99,
 *       "currency": "GBP",
 *       "lines": [
 *           {
 *               "amount": 99.99,
 *               "links": [
 *                   {
 *                       "type": "Invoice",
 *                       "id": "178",
 *                       "amount": -50,
 *                       "currencyRate":  1.9998
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 * ## Example data
 * 
 * &gt; **Object properties**
 * &gt;
 * &gt; For the sake of brevity, the examples here may omit properties from objects. For the full object definition, see [Payments](https://api.codat.io/swagger/index.html#/Payments).
 * 
 * ## Simple examples
 * 
 *   ```json title="Payment for invoice"
 *   {
 *       "totalAmount": 1000,
 *       "lines": [
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Allocation of credit note"
 *   {
 *       "totalAmount": 0,
 *       "lines": [
 *           {
 *               "amount" : 0,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "y",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Payment of invoice and payment on account"
 *   {
 *       "totalAmount": 2000,
 *       "lines": [
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "PaymentOnAccount",
 *                       "id" : "y",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Refund of credit note"
 *   {
 *       "totalAmount": -1000,
 *       "lines": [
 *           {
 *               "amount" : -1000,
 *               "links" : [
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "y",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Refund on accounts receivable account"
 *   {
 *       "totalAmount": -1000,
 *       "lines": [
 *           {
 *               "amount" : -1000,
 *               "links" : [
 *                   {
 *                       "type" : "PaymentOnAccount",
 *                       "id" : "y",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Linked refund on accounts receivable account"
 *   {
 *       "id" : "payment-001",
 *       "totalAmount": 1000,
 *       "lines": [
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Refund",
 *                       "id" : "refund-001",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   {
 *       "id" : "refund-001",
 *       "totalAmount": -1000,
 *       "lines": [
 *           {
 *               "amount" : -1000,
 *               "links" : [
 *                   {
 *                       "type" : "Payment",
 *                       "id" : "payment-001",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Using a credit note and cash to pay an invoice"
 *   {
 *       "totalAmount": 250,
 *       "lines": [
 *           {
 *               "amount": 0,
 *               "links": [
 *                   {
 *                       "type": "Invoice",
 *                       "id": "x",
 *                       "amount": -750
 *                   }, 
 *                   {
 *                       "type": "CreditNote",
 *                       "id": "y",
 *                       "amount": 750
 *                   }
 *               ]
 *           },
 *           {
 *               "amount": 250,
 *               "links": [
 *                   {
 *                       "type": "Invoice",
 *                       "id": "x",
 *                       "amount": -250
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 * ## Complex examples
 * 
 *   ```json title="Use two credit notes and 1000 in to "bank" (cash, cheque etc.) to pay invoice"
 *   {
 *       "totalAmount": 1000,
 *       "lines": [
 *           {
 *               "amount" : 0,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "y",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 0,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "z",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Pay an invoice with two credit notes and cash, with 1000 left 'on account'"
 *   {
 *       "totalAmount": 2000,
 *       "lines": [
 *           {
 *               "amount" : 0,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "y",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 0,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "z",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "PaymentOnAccount",
 *                       "id" : "customer-001",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Two credit notes pay two invoices with no allocation amount specified"
 *   {
 *       "totalAmount": 0,
 *       "lines": [
 *           {
 *               "amount" : 0,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "w",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "y",
 *                       "amount" : 1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "z",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Two credit notes and cash pay three invoices with no allocation amount specified, and refund cash"
 *   {
 *       "totalAmount": 2000,
 *       "lines": [
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "w",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "x",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "u",
 *                       "amount" : -1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "y",
 *                       "amount" : 1000
 *                   },
 *                   {
 *                       "type" : "CreditNote",
 *                       "id" : "z",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Refund",
 *                       "id" : "refund-001",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   {
 *       "id" : "refund-001",
 *       "totalAmount": -1000,
 *       "lines": [
 *           {
 *               "amount" : -1000,
 *               "links" : [
 *                   {
 *                       "type" : "Payment",
 *                       "id" : "payment-001",
 *                       "amount" : 1000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 * In this example, a payment on account is used to pay the same invoice in January and again in February.
 * 
 *   ```json title="January"
 *   {
 *       "id": "001",
 *       "totalAmount": 5000,
 *       "date" : "1901-01-01",
 *       "lines": [
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "Invoice-x",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 4000,
 *               "links" : [
 *                   {
 *                       "type" : "PaymentOnAccount",
 *                       "id" : "PaymentOnAccount-y",
 *                       "amount" : -4000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="February"
 *   {
 *       "id": "001",
 *       "totalAmount": 5000,
 *       "date" : "1901-02-01",
 *       "lines": [
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "Invoice-x",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 1000,
 *               "links" : [
 *                   {
 *                       "type" : "Invoice",
 *                       "id" : "Invoice-y",
 *                       "amount" : -1000
 *                   }
 *               ]
 *           },
 *           {
 *               "amount" : 3000,
 *               "links" : [
 *                   {
 *                       "type" : "PaymentOnAccount",
 *                       "id" : "PaymentOnAccount-y",
 *                       "amount" : -3000
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 * 
 * 
 * 
 *   ```json title="Two credit notes and some cash pay two invoices with no allocations specified"
 *   {
 *       "totalAmount": 500,
 *       "lines": [
 *           {
 *               "amount": 500,
 *               "links": [{
 *                       "type": "Invoice",
 *                       "id": "a",
 *                       "amount": -1000
 *                   }, {
 *                       "type": "Invoice",
 *                       "id": "b",
 *                       "amount": -1000
 *                   }, {
 *                       "type": "CreditNote",
 *                       "id": "y",
 *                       "amount": 750
 *                   },{
 *                       "type": "CreditNote",
 *                       "id": "z",
 *                       "amount": 750
 *                   }
 *               ]
 *           }
 *       ]
 *   }
 *   ```
 */

public class AccountingPayment {

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountRef")
    private Optional<? extends AccountRef> accountRef;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyRate")
    private JsonNullable<? extends Double> currencyRate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customerRef")
    private Optional<? extends AccountingCustomerRef> customerRef;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonProperty("date")
    private String date;

    /**
     * Identifier for the payment, unique to the company in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * An array of payment lines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lines")
    private JsonNullable<? extends java.util.List<PaymentLine>> lines;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends Metadata> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedDate")
    private Optional<? extends String> modifiedDate;

    /**
     * Any additional information associated with the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private JsonNullable<? extends String> note;

    /**
     * The payment method the record is linked to in the accounting or commerce platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethodRef")
    private Optional<? extends PaymentMethodRef> paymentMethodRef;

    /**
     * Friendly reference for the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<? extends String> reference;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<? extends String> sourceModifiedDate;

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalData")
    private Optional<? extends SupplementalData> supplementalData;

    /**
     * Amount of the payment in the payment currency. This value should never change and represents the amount of money paid into the customer's account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends Double> totalAmount;

    public AccountingPayment(
            @JsonProperty("accountRef") Optional<? extends AccountRef> accountRef,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("currencyRate") JsonNullable<? extends Double> currencyRate,
            @JsonProperty("customerRef") Optional<? extends AccountingCustomerRef> customerRef,
            @JsonProperty("date") String date,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("lines") JsonNullable<? extends java.util.List<PaymentLine>> lines,
            @JsonProperty("metadata") Optional<? extends Metadata> metadata,
            @JsonProperty("modifiedDate") Optional<? extends String> modifiedDate,
            @JsonProperty("note") JsonNullable<? extends String> note,
            @JsonProperty("paymentMethodRef") Optional<? extends PaymentMethodRef> paymentMethodRef,
            @JsonProperty("reference") JsonNullable<? extends String> reference,
            @JsonProperty("sourceModifiedDate") Optional<? extends String> sourceModifiedDate,
            @JsonProperty("supplementalData") Optional<? extends SupplementalData> supplementalData,
            @JsonProperty("totalAmount") Optional<? extends Double> totalAmount) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(currencyRate, "currencyRate");
        Utils.checkNotNull(customerRef, "customerRef");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lines, "lines");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(paymentMethodRef, "paymentMethodRef");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(supplementalData, "supplementalData");
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.accountRef = accountRef;
        this.currency = currency;
        this.currencyRate = currencyRate;
        this.customerRef = customerRef;
        this.date = date;
        this.id = id;
        this.lines = lines;
        this.metadata = metadata;
        this.modifiedDate = modifiedDate;
        this.note = note;
        this.paymentMethodRef = paymentMethodRef;
        this.reference = reference;
        this.sourceModifiedDate = sourceModifiedDate;
        this.supplementalData = supplementalData;
        this.totalAmount = totalAmount;
    }

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    public Optional<? extends AccountRef> accountRef() {
        return accountRef;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public Optional<? extends String> currency() {
        return currency;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    public JsonNullable<? extends Double> currencyRate() {
        return currencyRate;
    }

    public Optional<? extends AccountingCustomerRef> customerRef() {
        return customerRef;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public String date() {
        return date;
    }

    /**
     * Identifier for the payment, unique to the company in the accounting platform.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * An array of payment lines.
     */
    public JsonNullable<? extends java.util.List<PaymentLine>> lines() {
        return lines;
    }

    public Optional<? extends Metadata> metadata() {
        return metadata;
    }

    public Optional<? extends String> modifiedDate() {
        return modifiedDate;
    }

    /**
     * Any additional information associated with the payment.
     */
    public JsonNullable<? extends String> note() {
        return note;
    }

    /**
     * The payment method the record is linked to in the accounting or commerce platform.
     */
    public Optional<? extends PaymentMethodRef> paymentMethodRef() {
        return paymentMethodRef;
    }

    /**
     * Friendly reference for the payment.
     */
    public JsonNullable<? extends String> reference() {
        return reference;
    }

    public Optional<? extends String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public Optional<? extends SupplementalData> supplementalData() {
        return supplementalData;
    }

    /**
     * Amount of the payment in the payment currency. This value should never change and represents the amount of money paid into the customer's account.
     */
    public Optional<? extends Double> totalAmount() {
        return totalAmount;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    public AccountingPayment withAccountRef(AccountRef accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = Optional.ofNullable(accountRef);
        return this;
    }
    
    /**
     * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
     */
    public AccountingPayment withAccountRef(Optional<? extends AccountRef> accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public AccountingPayment withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }
    
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public AccountingPayment withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    public AccountingPayment withCurrencyRate(double currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = JsonNullable.of(currencyRate);
        return this;
    }

    /**
     * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
     * 
     * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
     * 
     * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
     * 
     * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
     * 
     * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
     * 
     * ## Examples with base currency of GBP
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **USD**          | $20            | 0.781         | £15.62                     |
     * | **EUR**          | €20            | 0.885         | £17.70                     |
     * | **RUB**          | ₽20            | 0.011         | £0.22                      |
     * 
     * ## Examples with base currency of USD
     * 
     * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
     * | :--------------- | :------------- | :------------ | :------------------------- |
     * | **GBP**          | £20            | 1.277         | $25.54                     |
     * | **EUR**          | €20            | 1.134         | $22.68                     |
     * | **RUB**          | ₽20            | 0.015         | $0.30                      |
     * 
     * 
     * ### Integration-specific details
     * 
     * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
     * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
     * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
     */
    public AccountingPayment withCurrencyRate(JsonNullable<? extends Double> currencyRate) {
        Utils.checkNotNull(currencyRate, "currencyRate");
        this.currencyRate = currencyRate;
        return this;
    }

    public AccountingPayment withCustomerRef(AccountingCustomerRef customerRef) {
        Utils.checkNotNull(customerRef, "customerRef");
        this.customerRef = Optional.ofNullable(customerRef);
        return this;
    }
    
    public AccountingPayment withCustomerRef(Optional<? extends AccountingCustomerRef> customerRef) {
        Utils.checkNotNull(customerRef, "customerRef");
        this.customerRef = customerRef;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public AccountingPayment withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Identifier for the payment, unique to the company in the accounting platform.
     */
    public AccountingPayment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }
    
    /**
     * Identifier for the payment, unique to the company in the accounting platform.
     */
    public AccountingPayment withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * An array of payment lines.
     */
    public AccountingPayment withLines(java.util.List<PaymentLine> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = JsonNullable.of(lines);
        return this;
    }

    /**
     * An array of payment lines.
     */
    public AccountingPayment withLines(JsonNullable<? extends java.util.List<PaymentLine>> lines) {
        Utils.checkNotNull(lines, "lines");
        this.lines = lines;
        return this;
    }

    public AccountingPayment withMetadata(Metadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }
    
    public AccountingPayment withMetadata(Optional<? extends Metadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public AccountingPayment withModifiedDate(String modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = Optional.ofNullable(modifiedDate);
        return this;
    }
    
    public AccountingPayment withModifiedDate(Optional<? extends String> modifiedDate) {
        Utils.checkNotNull(modifiedDate, "modifiedDate");
        this.modifiedDate = modifiedDate;
        return this;
    }

    /**
     * Any additional information associated with the payment.
     */
    public AccountingPayment withNote(String note) {
        Utils.checkNotNull(note, "note");
        this.note = JsonNullable.of(note);
        return this;
    }

    /**
     * Any additional information associated with the payment.
     */
    public AccountingPayment withNote(JsonNullable<? extends String> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * The payment method the record is linked to in the accounting or commerce platform.
     */
    public AccountingPayment withPaymentMethodRef(PaymentMethodRef paymentMethodRef) {
        Utils.checkNotNull(paymentMethodRef, "paymentMethodRef");
        this.paymentMethodRef = Optional.ofNullable(paymentMethodRef);
        return this;
    }
    
    /**
     * The payment method the record is linked to in the accounting or commerce platform.
     */
    public AccountingPayment withPaymentMethodRef(Optional<? extends PaymentMethodRef> paymentMethodRef) {
        Utils.checkNotNull(paymentMethodRef, "paymentMethodRef");
        this.paymentMethodRef = paymentMethodRef;
        return this;
    }

    /**
     * Friendly reference for the payment.
     */
    public AccountingPayment withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * Friendly reference for the payment.
     */
    public AccountingPayment withReference(JsonNullable<? extends String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public AccountingPayment withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }
    
    public AccountingPayment withSourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public AccountingPayment withSupplementalData(SupplementalData supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = Optional.ofNullable(supplementalData);
        return this;
    }
    
    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public AccountingPayment withSupplementalData(Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = supplementalData;
        return this;
    }

    /**
     * Amount of the payment in the payment currency. This value should never change and represents the amount of money paid into the customer's account.
     */
    public AccountingPayment withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }
    
    /**
     * Amount of the payment in the payment currency. This value should never change and represents the amount of money paid into the customer's account.
     */
    public AccountingPayment withTotalAmount(Optional<? extends Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingPayment other = (AccountingPayment) o;
        return 
            java.util.Objects.deepEquals(this.accountRef, other.accountRef) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.currencyRate, other.currencyRate) &&
            java.util.Objects.deepEquals(this.customerRef, other.customerRef) &&
            java.util.Objects.deepEquals(this.date, other.date) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.lines, other.lines) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.modifiedDate, other.modifiedDate) &&
            java.util.Objects.deepEquals(this.note, other.note) &&
            java.util.Objects.deepEquals(this.paymentMethodRef, other.paymentMethodRef) &&
            java.util.Objects.deepEquals(this.reference, other.reference) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            java.util.Objects.deepEquals(this.supplementalData, other.supplementalData) &&
            java.util.Objects.deepEquals(this.totalAmount, other.totalAmount);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountRef,
            currency,
            currencyRate,
            customerRef,
            date,
            id,
            lines,
            metadata,
            modifiedDate,
            note,
            paymentMethodRef,
            reference,
            sourceModifiedDate,
            supplementalData,
            totalAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingPayment.class,
                "accountRef", accountRef,
                "currency", currency,
                "currencyRate", currencyRate,
                "customerRef", customerRef,
                "date", date,
                "id", id,
                "lines", lines,
                "metadata", metadata,
                "modifiedDate", modifiedDate,
                "note", note,
                "paymentMethodRef", paymentMethodRef,
                "reference", reference,
                "sourceModifiedDate", sourceModifiedDate,
                "supplementalData", supplementalData,
                "totalAmount", totalAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends AccountRef> accountRef = Optional.empty();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private JsonNullable<? extends Double> currencyRate = JsonNullable.undefined();
 
        private Optional<? extends AccountingCustomerRef> customerRef = Optional.empty();
 
        private String date;
 
        private Optional<? extends String> id = Optional.empty();
 
        private JsonNullable<? extends java.util.List<PaymentLine>> lines = JsonNullable.undefined();
 
        private Optional<? extends Metadata> metadata = Optional.empty();
 
        private Optional<? extends String> modifiedDate = Optional.empty();
 
        private JsonNullable<? extends String> note = JsonNullable.undefined();
 
        private Optional<? extends PaymentMethodRef> paymentMethodRef = Optional.empty();
 
        private JsonNullable<? extends String> reference = JsonNullable.undefined();
 
        private Optional<? extends String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends SupplementalData> supplementalData = Optional.empty();
 
        private Optional<? extends Double> totalAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
         */
        public Builder accountRef(AccountRef accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = Optional.ofNullable(accountRef);
            return this;
        }
        
        /**
         * Data types that reference an account, for example bill and invoice line items, use an accountRef that includes the ID and name of the linked account.
         */
        public Builder accountRef(Optional<? extends AccountRef> accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }
        
        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
         */
        public Builder currencyRate(double currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = JsonNullable.of(currencyRate);
            return this;
        }

        /**
         * Rate to convert the total amount of the payment into the base currency for the company at the time of the payment.
         * 
         * Currency rates in Codat are implemented as the multiple of foreign currency units to each base currency unit.  
         * 
         * It is not possible to perform the currency conversion with two or more non-base currencies participating in the transaction. For example, if a company's base currency is USD, and it has a bill issued in EUR, then the bill payment must happen in USD or EUR.
         * 
         * Where the currency rate is provided by the underlying accounting platform, it will be available from Codat with the same precision (up to a maximum of 9 decimal places). 
         * 
         * For accounting platforms which do not provide an explicit currency rate, it is calculated as `baseCurrency / foreignCurrency` and will be returned to 9 decimal places.
         * 
         * ## Examples with base currency of GBP
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (GBP) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **USD**          | $20            | 0.781         | £15.62                     |
         * | **EUR**          | €20            | 0.885         | £17.70                     |
         * | **RUB**          | ₽20            | 0.011         | £0.22                      |
         * 
         * ## Examples with base currency of USD
         * 
         * | Foreign Currency | Foreign Amount | Currency Rate | Base Currency Amount (USD) |
         * | :--------------- | :------------- | :------------ | :------------------------- |
         * | **GBP**          | £20            | 1.277         | $25.54                     |
         * | **EUR**          | €20            | 1.134         | $22.68                     |
         * | **RUB**          | ₽20            | 0.015         | $0.30                      |
         * 
         * 
         * ### Integration-specific details
         * 
         * | Integration       | Scenario                                        | System behavior                                                                                                                                                      |
         * |-------------------|-------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|
         * | QuickBooks Online | Transaction currency differs from base currency | If currency rate value is left `null`, a rate of 1 will be used by QBO by default. To override this, include the required currency rate in the expense transaction.  |
         */
        public Builder currencyRate(JsonNullable<? extends Double> currencyRate) {
            Utils.checkNotNull(currencyRate, "currencyRate");
            this.currencyRate = currencyRate;
            return this;
        }

        public Builder customerRef(AccountingCustomerRef customerRef) {
            Utils.checkNotNull(customerRef, "customerRef");
            this.customerRef = Optional.ofNullable(customerRef);
            return this;
        }
        
        public Builder customerRef(Optional<? extends AccountingCustomerRef> customerRef) {
            Utils.checkNotNull(customerRef, "customerRef");
            this.customerRef = customerRef;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        /**
         * Identifier for the payment, unique to the company in the accounting platform.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }
        
        /**
         * Identifier for the payment, unique to the company in the accounting platform.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * An array of payment lines.
         */
        public Builder lines(java.util.List<PaymentLine> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = JsonNullable.of(lines);
            return this;
        }

        /**
         * An array of payment lines.
         */
        public Builder lines(JsonNullable<? extends java.util.List<PaymentLine>> lines) {
            Utils.checkNotNull(lines, "lines");
            this.lines = lines;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }
        
        public Builder metadata(Optional<? extends Metadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder modifiedDate(String modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = Optional.ofNullable(modifiedDate);
            return this;
        }
        
        public Builder modifiedDate(Optional<? extends String> modifiedDate) {
            Utils.checkNotNull(modifiedDate, "modifiedDate");
            this.modifiedDate = modifiedDate;
            return this;
        }

        /**
         * Any additional information associated with the payment.
         */
        public Builder note(String note) {
            Utils.checkNotNull(note, "note");
            this.note = JsonNullable.of(note);
            return this;
        }

        /**
         * Any additional information associated with the payment.
         */
        public Builder note(JsonNullable<? extends String> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * The payment method the record is linked to in the accounting or commerce platform.
         */
        public Builder paymentMethodRef(PaymentMethodRef paymentMethodRef) {
            Utils.checkNotNull(paymentMethodRef, "paymentMethodRef");
            this.paymentMethodRef = Optional.ofNullable(paymentMethodRef);
            return this;
        }
        
        /**
         * The payment method the record is linked to in the accounting or commerce platform.
         */
        public Builder paymentMethodRef(Optional<? extends PaymentMethodRef> paymentMethodRef) {
            Utils.checkNotNull(paymentMethodRef, "paymentMethodRef");
            this.paymentMethodRef = paymentMethodRef;
            return this;
        }

        /**
         * Friendly reference for the payment.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * Friendly reference for the payment.
         */
        public Builder reference(JsonNullable<? extends String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }
        
        public Builder sourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(SupplementalData supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = Optional.ofNullable(supplementalData);
            return this;
        }
        
        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(Optional<? extends SupplementalData> supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = supplementalData;
            return this;
        }

        /**
         * Amount of the payment in the payment currency. This value should never change and represents the amount of money paid into the customer's account.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }
        
        /**
         * Amount of the payment in the payment currency. This value should never change and represents the amount of money paid into the customer's account.
         */
        public Builder totalAmount(Optional<? extends Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }        
        
        public AccountingPayment build() {
            return new AccountingPayment(
                accountRef,
                currency,
                currencyRate,
                customerRef,
                date,
                id,
                lines,
                metadata,
                modifiedDate,
                note,
                paymentMethodRef,
                reference,
                sourceModifiedDate,
                supplementalData,
                totalAmount);
        }
    }
}

