/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class ReportComponentMeasure {

    /**
     * The measure's index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Long> index;

    /**
     * The measure's display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("measureDisplayName")
    private Optional<? extends String> measureDisplayName;

    /**
     * The measure's value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends Double> value;

    public ReportComponentMeasure(
            @JsonProperty("index") Optional<? extends Long> index,
            @JsonProperty("measureDisplayName") Optional<? extends String> measureDisplayName,
            @JsonProperty("value") Optional<? extends Double> value) {
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(measureDisplayName, "measureDisplayName");
        Utils.checkNotNull(value, "value");
        this.index = index;
        this.measureDisplayName = measureDisplayName;
        this.value = value;
    }

    /**
     * The measure's index.
     */
    public Optional<? extends Long> index() {
        return index;
    }

    /**
     * The measure's display name.
     */
    public Optional<? extends String> measureDisplayName() {
        return measureDisplayName;
    }

    /**
     * The measure's value.
     */
    public Optional<? extends Double> value() {
        return value;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The measure's index.
     */
    public ReportComponentMeasure withIndex(long index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }
    
    /**
     * The measure's index.
     */
    public ReportComponentMeasure withIndex(Optional<? extends Long> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    /**
     * The measure's display name.
     */
    public ReportComponentMeasure withMeasureDisplayName(String measureDisplayName) {
        Utils.checkNotNull(measureDisplayName, "measureDisplayName");
        this.measureDisplayName = Optional.ofNullable(measureDisplayName);
        return this;
    }
    
    /**
     * The measure's display name.
     */
    public ReportComponentMeasure withMeasureDisplayName(Optional<? extends String> measureDisplayName) {
        Utils.checkNotNull(measureDisplayName, "measureDisplayName");
        this.measureDisplayName = measureDisplayName;
        return this;
    }

    /**
     * The measure's value.
     */
    public ReportComponentMeasure withValue(double value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }
    
    /**
     * The measure's value.
     */
    public ReportComponentMeasure withValue(Optional<? extends Double> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportComponentMeasure other = (ReportComponentMeasure) o;
        return 
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.measureDisplayName, other.measureDisplayName) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            index,
            measureDisplayName,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportComponentMeasure.class,
                "index", index,
                "measureDisplayName", measureDisplayName,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> index = Optional.empty();
 
        private Optional<? extends String> measureDisplayName = Optional.empty();
 
        private Optional<? extends Double> value = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The measure's index.
         */
        public Builder index(long index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }
        
        /**
         * The measure's index.
         */
        public Builder index(Optional<? extends Long> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        /**
         * The measure's display name.
         */
        public Builder measureDisplayName(String measureDisplayName) {
            Utils.checkNotNull(measureDisplayName, "measureDisplayName");
            this.measureDisplayName = Optional.ofNullable(measureDisplayName);
            return this;
        }
        
        /**
         * The measure's display name.
         */
        public Builder measureDisplayName(Optional<? extends String> measureDisplayName) {
            Utils.checkNotNull(measureDisplayName, "measureDisplayName");
            this.measureDisplayName = measureDisplayName;
            return this;
        }

        /**
         * The measure's value.
         */
        public Builder value(double value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }
        
        /**
         * The measure's value.
         */
        public Builder value(Optional<? extends Double> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }        
        
        public ReportComponentMeasure build() {
            return new ReportComponentMeasure(
                index,
                measureDisplayName,
                value);
        }
    }
}

