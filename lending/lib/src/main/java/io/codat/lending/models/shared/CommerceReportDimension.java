/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class CommerceReportDimension {

    /**
     * The dimension's display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<? extends String> displayName;

    /**
     * The dimension's index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Long> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    private Optional<? extends java.util.List<CommerceReportDimensionItems>> items;

    /**
     * The dimension's type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    public CommerceReportDimension(
            @JsonProperty("displayName") Optional<? extends String> displayName,
            @JsonProperty("index") Optional<? extends Long> index,
            @JsonProperty("items") Optional<? extends java.util.List<CommerceReportDimensionItems>> items,
            @JsonProperty("type") Optional<? extends String> type) {
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(type, "type");
        this.displayName = displayName;
        this.index = index;
        this.items = items;
        this.type = type;
    }

    /**
     * The dimension's display name.
     */
    public Optional<? extends String> displayName() {
        return displayName;
    }

    /**
     * The dimension's index.
     */
    public Optional<? extends Long> index() {
        return index;
    }

    public Optional<? extends java.util.List<CommerceReportDimensionItems>> items() {
        return items;
    }

    /**
     * The dimension's type.
     */
    public Optional<? extends String> type() {
        return type;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The dimension's display name.
     */
    public CommerceReportDimension withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }
    
    /**
     * The dimension's display name.
     */
    public CommerceReportDimension withDisplayName(Optional<? extends String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * The dimension's index.
     */
    public CommerceReportDimension withIndex(long index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }
    
    /**
     * The dimension's index.
     */
    public CommerceReportDimension withIndex(Optional<? extends Long> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public CommerceReportDimension withItems(java.util.List<CommerceReportDimensionItems> items) {
        Utils.checkNotNull(items, "items");
        this.items = Optional.ofNullable(items);
        return this;
    }
    
    public CommerceReportDimension withItems(Optional<? extends java.util.List<CommerceReportDimensionItems>> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    /**
     * The dimension's type.
     */
    public CommerceReportDimension withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }
    
    /**
     * The dimension's type.
     */
    public CommerceReportDimension withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceReportDimension other = (CommerceReportDimension) o;
        return 
            java.util.Objects.deepEquals(this.displayName, other.displayName) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.items, other.items) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            displayName,
            index,
            items,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceReportDimension.class,
                "displayName", displayName,
                "index", index,
                "items", items,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> displayName = Optional.empty();
 
        private Optional<? extends Long> index = Optional.empty();
 
        private Optional<? extends java.util.List<CommerceReportDimensionItems>> items = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The dimension's display name.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }
        
        /**
         * The dimension's display name.
         */
        public Builder displayName(Optional<? extends String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * The dimension's index.
         */
        public Builder index(long index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }
        
        /**
         * The dimension's index.
         */
        public Builder index(Optional<? extends Long> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder items(java.util.List<CommerceReportDimensionItems> items) {
            Utils.checkNotNull(items, "items");
            this.items = Optional.ofNullable(items);
            return this;
        }
        
        public Builder items(Optional<? extends java.util.List<CommerceReportDimensionItems>> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        /**
         * The dimension's type.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }
        
        /**
         * The dimension's type.
         */
        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }        
        
        public CommerceReportDimension build() {
            return new CommerceReportDimension(
                displayName,
                index,
                items,
                type);
        }
    }
}

