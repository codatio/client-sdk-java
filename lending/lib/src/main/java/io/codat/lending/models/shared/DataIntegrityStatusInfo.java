/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class DataIntegrityStatusInfo {

    /**
     * The current status of the most recently run matching algorithm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentStatus")
    private Optional<? extends IntegrityStatus> currentStatus;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastMatched")
    private Optional<? extends String> lastMatched;

    /**
     * Detailed explanation supporting the status value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    private Optional<? extends String> statusMessage;

    public DataIntegrityStatusInfo(
            @JsonProperty("currentStatus") Optional<? extends IntegrityStatus> currentStatus,
            @JsonProperty("lastMatched") Optional<? extends String> lastMatched,
            @JsonProperty("statusMessage") Optional<? extends String> statusMessage) {
        Utils.checkNotNull(currentStatus, "currentStatus");
        Utils.checkNotNull(lastMatched, "lastMatched");
        Utils.checkNotNull(statusMessage, "statusMessage");
        this.currentStatus = currentStatus;
        this.lastMatched = lastMatched;
        this.statusMessage = statusMessage;
    }

    /**
     * The current status of the most recently run matching algorithm.
     */
    public Optional<? extends IntegrityStatus> currentStatus() {
        return currentStatus;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> lastMatched() {
        return lastMatched;
    }

    /**
     * Detailed explanation supporting the status value.
     */
    public Optional<? extends String> statusMessage() {
        return statusMessage;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current status of the most recently run matching algorithm.
     */
    public DataIntegrityStatusInfo withCurrentStatus(IntegrityStatus currentStatus) {
        Utils.checkNotNull(currentStatus, "currentStatus");
        this.currentStatus = Optional.ofNullable(currentStatus);
        return this;
    }
    
    /**
     * The current status of the most recently run matching algorithm.
     */
    public DataIntegrityStatusInfo withCurrentStatus(Optional<? extends IntegrityStatus> currentStatus) {
        Utils.checkNotNull(currentStatus, "currentStatus");
        this.currentStatus = currentStatus;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public DataIntegrityStatusInfo withLastMatched(String lastMatched) {
        Utils.checkNotNull(lastMatched, "lastMatched");
        this.lastMatched = Optional.ofNullable(lastMatched);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public DataIntegrityStatusInfo withLastMatched(Optional<? extends String> lastMatched) {
        Utils.checkNotNull(lastMatched, "lastMatched");
        this.lastMatched = lastMatched;
        return this;
    }

    /**
     * Detailed explanation supporting the status value.
     */
    public DataIntegrityStatusInfo withStatusMessage(String statusMessage) {
        Utils.checkNotNull(statusMessage, "statusMessage");
        this.statusMessage = Optional.ofNullable(statusMessage);
        return this;
    }
    
    /**
     * Detailed explanation supporting the status value.
     */
    public DataIntegrityStatusInfo withStatusMessage(Optional<? extends String> statusMessage) {
        Utils.checkNotNull(statusMessage, "statusMessage");
        this.statusMessage = statusMessage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataIntegrityStatusInfo other = (DataIntegrityStatusInfo) o;
        return 
            java.util.Objects.deepEquals(this.currentStatus, other.currentStatus) &&
            java.util.Objects.deepEquals(this.lastMatched, other.lastMatched) &&
            java.util.Objects.deepEquals(this.statusMessage, other.statusMessage);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            currentStatus,
            lastMatched,
            statusMessage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataIntegrityStatusInfo.class,
                "currentStatus", currentStatus,
                "lastMatched", lastMatched,
                "statusMessage", statusMessage);
    }
    
    public final static class Builder {
 
        private Optional<? extends IntegrityStatus> currentStatus = Optional.empty();
 
        private Optional<? extends String> lastMatched = Optional.empty();
 
        private Optional<? extends String> statusMessage = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current status of the most recently run matching algorithm.
         */
        public Builder currentStatus(IntegrityStatus currentStatus) {
            Utils.checkNotNull(currentStatus, "currentStatus");
            this.currentStatus = Optional.ofNullable(currentStatus);
            return this;
        }
        
        /**
         * The current status of the most recently run matching algorithm.
         */
        public Builder currentStatus(Optional<? extends IntegrityStatus> currentStatus) {
            Utils.checkNotNull(currentStatus, "currentStatus");
            this.currentStatus = currentStatus;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder lastMatched(String lastMatched) {
            Utils.checkNotNull(lastMatched, "lastMatched");
            this.lastMatched = Optional.ofNullable(lastMatched);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder lastMatched(Optional<? extends String> lastMatched) {
            Utils.checkNotNull(lastMatched, "lastMatched");
            this.lastMatched = lastMatched;
            return this;
        }

        /**
         * Detailed explanation supporting the status value.
         */
        public Builder statusMessage(String statusMessage) {
            Utils.checkNotNull(statusMessage, "statusMessage");
            this.statusMessage = Optional.ofNullable(statusMessage);
            return this;
        }
        
        /**
         * Detailed explanation supporting the status value.
         */
        public Builder statusMessage(Optional<? extends String> statusMessage) {
            Utils.checkNotNull(statusMessage, "statusMessage");
            this.statusMessage = statusMessage;
            return this;
        }        
        
        public DataIntegrityStatusInfo build() {
            return new DataIntegrityStatusInfo(
                currentStatus,
                lastMatched,
                statusMessage);
        }
    }
}

