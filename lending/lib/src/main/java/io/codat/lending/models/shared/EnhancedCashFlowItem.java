/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class EnhancedCashFlowItem {

    /**
     * An array of transaction data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    private Optional<? extends java.util.List<EnhancedCashFlowTransaction>> transactions;

    public EnhancedCashFlowItem(
            @JsonProperty("transactions") Optional<? extends java.util.List<EnhancedCashFlowTransaction>> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = transactions;
    }

    /**
     * An array of transaction data.
     */
    public Optional<? extends java.util.List<EnhancedCashFlowTransaction>> transactions() {
        return transactions;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An array of transaction data.
     */
    public EnhancedCashFlowItem withTransactions(java.util.List<EnhancedCashFlowTransaction> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = Optional.ofNullable(transactions);
        return this;
    }
    
    /**
     * An array of transaction data.
     */
    public EnhancedCashFlowItem withTransactions(Optional<? extends java.util.List<EnhancedCashFlowTransaction>> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = transactions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnhancedCashFlowItem other = (EnhancedCashFlowItem) o;
        return 
            java.util.Objects.deepEquals(this.transactions, other.transactions);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            transactions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EnhancedCashFlowItem.class,
                "transactions", transactions);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<EnhancedCashFlowTransaction>> transactions = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array of transaction data.
         */
        public Builder transactions(java.util.List<EnhancedCashFlowTransaction> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = Optional.ofNullable(transactions);
            return this;
        }
        
        /**
         * An array of transaction data.
         */
        public Builder transactions(Optional<? extends java.util.List<EnhancedCashFlowTransaction>> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = transactions;
            return this;
        }        
        
        public EnhancedCashFlowItem build() {
            return new EnhancedCashFlowItem(
                transactions);
        }
    }
}

