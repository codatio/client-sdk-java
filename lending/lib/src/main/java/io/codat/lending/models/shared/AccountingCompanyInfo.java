/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * AccountingCompanyInfo - &gt; View the coverage for company profile in the &lt;a className="external" href="https://knowledge.codat.io/supported-features/accounting?view=tab-by-data-type&amp;dataType=cashFlowStatement" target="_blank"&gt;Data coverage explorer&lt;/a&gt;.
 * 
 * Company info provides standard details about a linked company such as their address, phone number, and company registration.
 * 
 * &gt; **Company information or companies?**
 * &gt; 
 * &gt; Company profile is standard information that is held in the accounting platform about a company. `Companies` is an endpoint that lists businesses in the Codat system that have linked and shared their data sources.
 */

public class AccountingCompanyInfo {

    /**
     * Identifier or reference for the company in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingPlatformRef")
    private JsonNullable<? extends String> accountingPlatformRef;

    /**
     * An array of Addresses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private JsonNullable<? extends java.util.List<AccountingAddress>> addresses;

    /**
     * Currency set in the accounting platform of the linked company. Used by the currency rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseCurrency")
    private JsonNullable<? extends String> baseCurrency;

    /**
     * Registered legal name of the linked company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyLegalName")
    private JsonNullable<? extends String> companyLegalName;

    /**
     * Name of the linked company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyName")
    private JsonNullable<? extends String> companyName;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdDate")
    private Optional<? extends String> createdDate;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("financialYearStartDate")
    private Optional<? extends String> financialYearStartDate;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ledgerLockDate")
    private Optional<? extends String> ledgerLockDate;

    /**
     * An array of phone numbers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumbers")
    private JsonNullable<? extends java.util.List<PhoneNumber>> phoneNumbers;

    /**
     * Registration number given to the linked company by the companies authority in the country of origin. In the UK this is Companies House.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationNumber")
    private JsonNullable<? extends String> registrationNumber;

    /**
     * URL addresses for the accounting source.
     * 
     * For example, for Xero integrations two URLs are returned. These have many potential use cases, such as [deep linking](https://developer.xero.com/documentation/api-guides/deep-link-xero).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceUrls")
    private JsonNullable<? extends java.util.Map<String, String>> sourceUrls;

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplementalData")
    private Optional<? extends SupplementalData> supplementalData;

    /**
     * Company tax number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxNumber")
    private JsonNullable<? extends String> taxNumber;

    /**
     * An array of weblinks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webLinks")
    private JsonNullable<? extends java.util.List<WebLink>> webLinks;

    public AccountingCompanyInfo(
            @JsonProperty("accountingPlatformRef") JsonNullable<? extends String> accountingPlatformRef,
            @JsonProperty("addresses") JsonNullable<? extends java.util.List<AccountingAddress>> addresses,
            @JsonProperty("baseCurrency") JsonNullable<? extends String> baseCurrency,
            @JsonProperty("companyLegalName") JsonNullable<? extends String> companyLegalName,
            @JsonProperty("companyName") JsonNullable<? extends String> companyName,
            @JsonProperty("createdDate") Optional<? extends String> createdDate,
            @JsonProperty("financialYearStartDate") Optional<? extends String> financialYearStartDate,
            @JsonProperty("ledgerLockDate") Optional<? extends String> ledgerLockDate,
            @JsonProperty("phoneNumbers") JsonNullable<? extends java.util.List<PhoneNumber>> phoneNumbers,
            @JsonProperty("registrationNumber") JsonNullable<? extends String> registrationNumber,
            @JsonProperty("sourceUrls") JsonNullable<? extends java.util.Map<String, String>> sourceUrls,
            @JsonProperty("supplementalData") Optional<? extends SupplementalData> supplementalData,
            @JsonProperty("taxNumber") JsonNullable<? extends String> taxNumber,
            @JsonProperty("webLinks") JsonNullable<? extends java.util.List<WebLink>> webLinks) {
        Utils.checkNotNull(accountingPlatformRef, "accountingPlatformRef");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        Utils.checkNotNull(companyLegalName, "companyLegalName");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(createdDate, "createdDate");
        Utils.checkNotNull(financialYearStartDate, "financialYearStartDate");
        Utils.checkNotNull(ledgerLockDate, "ledgerLockDate");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        Utils.checkNotNull(sourceUrls, "sourceUrls");
        Utils.checkNotNull(supplementalData, "supplementalData");
        Utils.checkNotNull(taxNumber, "taxNumber");
        Utils.checkNotNull(webLinks, "webLinks");
        this.accountingPlatformRef = accountingPlatformRef;
        this.addresses = addresses;
        this.baseCurrency = baseCurrency;
        this.companyLegalName = companyLegalName;
        this.companyName = companyName;
        this.createdDate = createdDate;
        this.financialYearStartDate = financialYearStartDate;
        this.ledgerLockDate = ledgerLockDate;
        this.phoneNumbers = phoneNumbers;
        this.registrationNumber = registrationNumber;
        this.sourceUrls = sourceUrls;
        this.supplementalData = supplementalData;
        this.taxNumber = taxNumber;
        this.webLinks = webLinks;
    }

    /**
     * Identifier or reference for the company in the accounting platform.
     */
    public JsonNullable<? extends String> accountingPlatformRef() {
        return accountingPlatformRef;
    }

    /**
     * An array of Addresses.
     */
    public JsonNullable<? extends java.util.List<AccountingAddress>> addresses() {
        return addresses;
    }

    /**
     * Currency set in the accounting platform of the linked company. Used by the currency rate.
     */
    public JsonNullable<? extends String> baseCurrency() {
        return baseCurrency;
    }

    /**
     * Registered legal name of the linked company.
     */
    public JsonNullable<? extends String> companyLegalName() {
        return companyLegalName;
    }

    /**
     * Name of the linked company.
     */
    public JsonNullable<? extends String> companyName() {
        return companyName;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> createdDate() {
        return createdDate;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> financialYearStartDate() {
        return financialYearStartDate;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> ledgerLockDate() {
        return ledgerLockDate;
    }

    /**
     * An array of phone numbers.
     */
    public JsonNullable<? extends java.util.List<PhoneNumber>> phoneNumbers() {
        return phoneNumbers;
    }

    /**
     * Registration number given to the linked company by the companies authority in the country of origin. In the UK this is Companies House.
     */
    public JsonNullable<? extends String> registrationNumber() {
        return registrationNumber;
    }

    /**
     * URL addresses for the accounting source.
     * 
     * For example, for Xero integrations two URLs are returned. These have many potential use cases, such as [deep linking](https://developer.xero.com/documentation/api-guides/deep-link-xero).
     */
    public JsonNullable<? extends java.util.Map<String, String>> sourceUrls() {
        return sourceUrls;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public Optional<? extends SupplementalData> supplementalData() {
        return supplementalData;
    }

    /**
     * Company tax number.
     */
    public JsonNullable<? extends String> taxNumber() {
        return taxNumber;
    }

    /**
     * An array of weblinks.
     */
    public JsonNullable<? extends java.util.List<WebLink>> webLinks() {
        return webLinks;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Identifier or reference for the company in the accounting platform.
     */
    public AccountingCompanyInfo withAccountingPlatformRef(String accountingPlatformRef) {
        Utils.checkNotNull(accountingPlatformRef, "accountingPlatformRef");
        this.accountingPlatformRef = JsonNullable.of(accountingPlatformRef);
        return this;
    }

    /**
     * Identifier or reference for the company in the accounting platform.
     */
    public AccountingCompanyInfo withAccountingPlatformRef(JsonNullable<? extends String> accountingPlatformRef) {
        Utils.checkNotNull(accountingPlatformRef, "accountingPlatformRef");
        this.accountingPlatformRef = accountingPlatformRef;
        return this;
    }

    /**
     * An array of Addresses.
     */
    public AccountingCompanyInfo withAddresses(java.util.List<AccountingAddress> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = JsonNullable.of(addresses);
        return this;
    }

    /**
     * An array of Addresses.
     */
    public AccountingCompanyInfo withAddresses(JsonNullable<? extends java.util.List<AccountingAddress>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * Currency set in the accounting platform of the linked company. Used by the currency rate.
     */
    public AccountingCompanyInfo withBaseCurrency(String baseCurrency) {
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        this.baseCurrency = JsonNullable.of(baseCurrency);
        return this;
    }

    /**
     * Currency set in the accounting platform of the linked company. Used by the currency rate.
     */
    public AccountingCompanyInfo withBaseCurrency(JsonNullable<? extends String> baseCurrency) {
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        this.baseCurrency = baseCurrency;
        return this;
    }

    /**
     * Registered legal name of the linked company.
     */
    public AccountingCompanyInfo withCompanyLegalName(String companyLegalName) {
        Utils.checkNotNull(companyLegalName, "companyLegalName");
        this.companyLegalName = JsonNullable.of(companyLegalName);
        return this;
    }

    /**
     * Registered legal name of the linked company.
     */
    public AccountingCompanyInfo withCompanyLegalName(JsonNullable<? extends String> companyLegalName) {
        Utils.checkNotNull(companyLegalName, "companyLegalName");
        this.companyLegalName = companyLegalName;
        return this;
    }

    /**
     * Name of the linked company.
     */
    public AccountingCompanyInfo withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = JsonNullable.of(companyName);
        return this;
    }

    /**
     * Name of the linked company.
     */
    public AccountingCompanyInfo withCompanyName(JsonNullable<? extends String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public AccountingCompanyInfo withCreatedDate(String createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = Optional.ofNullable(createdDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public AccountingCompanyInfo withCreatedDate(Optional<? extends String> createdDate) {
        Utils.checkNotNull(createdDate, "createdDate");
        this.createdDate = createdDate;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public AccountingCompanyInfo withFinancialYearStartDate(String financialYearStartDate) {
        Utils.checkNotNull(financialYearStartDate, "financialYearStartDate");
        this.financialYearStartDate = Optional.ofNullable(financialYearStartDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public AccountingCompanyInfo withFinancialYearStartDate(Optional<? extends String> financialYearStartDate) {
        Utils.checkNotNull(financialYearStartDate, "financialYearStartDate");
        this.financialYearStartDate = financialYearStartDate;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public AccountingCompanyInfo withLedgerLockDate(String ledgerLockDate) {
        Utils.checkNotNull(ledgerLockDate, "ledgerLockDate");
        this.ledgerLockDate = Optional.ofNullable(ledgerLockDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public AccountingCompanyInfo withLedgerLockDate(Optional<? extends String> ledgerLockDate) {
        Utils.checkNotNull(ledgerLockDate, "ledgerLockDate");
        this.ledgerLockDate = ledgerLockDate;
        return this;
    }

    /**
     * An array of phone numbers.
     */
    public AccountingCompanyInfo withPhoneNumbers(java.util.List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = JsonNullable.of(phoneNumbers);
        return this;
    }

    /**
     * An array of phone numbers.
     */
    public AccountingCompanyInfo withPhoneNumbers(JsonNullable<? extends java.util.List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    /**
     * Registration number given to the linked company by the companies authority in the country of origin. In the UK this is Companies House.
     */
    public AccountingCompanyInfo withRegistrationNumber(String registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = JsonNullable.of(registrationNumber);
        return this;
    }

    /**
     * Registration number given to the linked company by the companies authority in the country of origin. In the UK this is Companies House.
     */
    public AccountingCompanyInfo withRegistrationNumber(JsonNullable<? extends String> registrationNumber) {
        Utils.checkNotNull(registrationNumber, "registrationNumber");
        this.registrationNumber = registrationNumber;
        return this;
    }

    /**
     * URL addresses for the accounting source.
     * 
     * For example, for Xero integrations two URLs are returned. These have many potential use cases, such as [deep linking](https://developer.xero.com/documentation/api-guides/deep-link-xero).
     */
    public AccountingCompanyInfo withSourceUrls(java.util.Map<String, String> sourceUrls) {
        Utils.checkNotNull(sourceUrls, "sourceUrls");
        this.sourceUrls = JsonNullable.of(sourceUrls);
        return this;
    }

    /**
     * URL addresses for the accounting source.
     * 
     * For example, for Xero integrations two URLs are returned. These have many potential use cases, such as [deep linking](https://developer.xero.com/documentation/api-guides/deep-link-xero).
     */
    public AccountingCompanyInfo withSourceUrls(JsonNullable<? extends java.util.Map<String, String>> sourceUrls) {
        Utils.checkNotNull(sourceUrls, "sourceUrls");
        this.sourceUrls = sourceUrls;
        return this;
    }

    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public AccountingCompanyInfo withSupplementalData(SupplementalData supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = Optional.ofNullable(supplementalData);
        return this;
    }
    
    /**
     * Supplemental data is additional data you can include in our standard data types. 
     * 
     * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
     */
    public AccountingCompanyInfo withSupplementalData(Optional<? extends SupplementalData> supplementalData) {
        Utils.checkNotNull(supplementalData, "supplementalData");
        this.supplementalData = supplementalData;
        return this;
    }

    /**
     * Company tax number.
     */
    public AccountingCompanyInfo withTaxNumber(String taxNumber) {
        Utils.checkNotNull(taxNumber, "taxNumber");
        this.taxNumber = JsonNullable.of(taxNumber);
        return this;
    }

    /**
     * Company tax number.
     */
    public AccountingCompanyInfo withTaxNumber(JsonNullable<? extends String> taxNumber) {
        Utils.checkNotNull(taxNumber, "taxNumber");
        this.taxNumber = taxNumber;
        return this;
    }

    /**
     * An array of weblinks.
     */
    public AccountingCompanyInfo withWebLinks(java.util.List<WebLink> webLinks) {
        Utils.checkNotNull(webLinks, "webLinks");
        this.webLinks = JsonNullable.of(webLinks);
        return this;
    }

    /**
     * An array of weblinks.
     */
    public AccountingCompanyInfo withWebLinks(JsonNullable<? extends java.util.List<WebLink>> webLinks) {
        Utils.checkNotNull(webLinks, "webLinks");
        this.webLinks = webLinks;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingCompanyInfo other = (AccountingCompanyInfo) o;
        return 
            java.util.Objects.deepEquals(this.accountingPlatformRef, other.accountingPlatformRef) &&
            java.util.Objects.deepEquals(this.addresses, other.addresses) &&
            java.util.Objects.deepEquals(this.baseCurrency, other.baseCurrency) &&
            java.util.Objects.deepEquals(this.companyLegalName, other.companyLegalName) &&
            java.util.Objects.deepEquals(this.companyName, other.companyName) &&
            java.util.Objects.deepEquals(this.createdDate, other.createdDate) &&
            java.util.Objects.deepEquals(this.financialYearStartDate, other.financialYearStartDate) &&
            java.util.Objects.deepEquals(this.ledgerLockDate, other.ledgerLockDate) &&
            java.util.Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            java.util.Objects.deepEquals(this.registrationNumber, other.registrationNumber) &&
            java.util.Objects.deepEquals(this.sourceUrls, other.sourceUrls) &&
            java.util.Objects.deepEquals(this.supplementalData, other.supplementalData) &&
            java.util.Objects.deepEquals(this.taxNumber, other.taxNumber) &&
            java.util.Objects.deepEquals(this.webLinks, other.webLinks);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountingPlatformRef,
            addresses,
            baseCurrency,
            companyLegalName,
            companyName,
            createdDate,
            financialYearStartDate,
            ledgerLockDate,
            phoneNumbers,
            registrationNumber,
            sourceUrls,
            supplementalData,
            taxNumber,
            webLinks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingCompanyInfo.class,
                "accountingPlatformRef", accountingPlatformRef,
                "addresses", addresses,
                "baseCurrency", baseCurrency,
                "companyLegalName", companyLegalName,
                "companyName", companyName,
                "createdDate", createdDate,
                "financialYearStartDate", financialYearStartDate,
                "ledgerLockDate", ledgerLockDate,
                "phoneNumbers", phoneNumbers,
                "registrationNumber", registrationNumber,
                "sourceUrls", sourceUrls,
                "supplementalData", supplementalData,
                "taxNumber", taxNumber,
                "webLinks", webLinks);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> accountingPlatformRef = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<AccountingAddress>> addresses = JsonNullable.undefined();
 
        private JsonNullable<? extends String> baseCurrency = JsonNullable.undefined();
 
        private JsonNullable<? extends String> companyLegalName = JsonNullable.undefined();
 
        private JsonNullable<? extends String> companyName = JsonNullable.undefined();
 
        private Optional<? extends String> createdDate = Optional.empty();
 
        private Optional<? extends String> financialYearStartDate = Optional.empty();
 
        private Optional<? extends String> ledgerLockDate = Optional.empty();
 
        private JsonNullable<? extends java.util.List<PhoneNumber>> phoneNumbers = JsonNullable.undefined();
 
        private JsonNullable<? extends String> registrationNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.Map<String, String>> sourceUrls = JsonNullable.undefined();
 
        private Optional<? extends SupplementalData> supplementalData = Optional.empty();
 
        private JsonNullable<? extends String> taxNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<WebLink>> webLinks = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Identifier or reference for the company in the accounting platform.
         */
        public Builder accountingPlatformRef(String accountingPlatformRef) {
            Utils.checkNotNull(accountingPlatformRef, "accountingPlatformRef");
            this.accountingPlatformRef = JsonNullable.of(accountingPlatformRef);
            return this;
        }

        /**
         * Identifier or reference for the company in the accounting platform.
         */
        public Builder accountingPlatformRef(JsonNullable<? extends String> accountingPlatformRef) {
            Utils.checkNotNull(accountingPlatformRef, "accountingPlatformRef");
            this.accountingPlatformRef = accountingPlatformRef;
            return this;
        }

        /**
         * An array of Addresses.
         */
        public Builder addresses(java.util.List<AccountingAddress> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = JsonNullable.of(addresses);
            return this;
        }

        /**
         * An array of Addresses.
         */
        public Builder addresses(JsonNullable<? extends java.util.List<AccountingAddress>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        /**
         * Currency set in the accounting platform of the linked company. Used by the currency rate.
         */
        public Builder baseCurrency(String baseCurrency) {
            Utils.checkNotNull(baseCurrency, "baseCurrency");
            this.baseCurrency = JsonNullable.of(baseCurrency);
            return this;
        }

        /**
         * Currency set in the accounting platform of the linked company. Used by the currency rate.
         */
        public Builder baseCurrency(JsonNullable<? extends String> baseCurrency) {
            Utils.checkNotNull(baseCurrency, "baseCurrency");
            this.baseCurrency = baseCurrency;
            return this;
        }

        /**
         * Registered legal name of the linked company.
         */
        public Builder companyLegalName(String companyLegalName) {
            Utils.checkNotNull(companyLegalName, "companyLegalName");
            this.companyLegalName = JsonNullable.of(companyLegalName);
            return this;
        }

        /**
         * Registered legal name of the linked company.
         */
        public Builder companyLegalName(JsonNullable<? extends String> companyLegalName) {
            Utils.checkNotNull(companyLegalName, "companyLegalName");
            this.companyLegalName = companyLegalName;
            return this;
        }

        /**
         * Name of the linked company.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = JsonNullable.of(companyName);
            return this;
        }

        /**
         * Name of the linked company.
         */
        public Builder companyName(JsonNullable<? extends String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder createdDate(String createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = Optional.ofNullable(createdDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder createdDate(Optional<? extends String> createdDate) {
            Utils.checkNotNull(createdDate, "createdDate");
            this.createdDate = createdDate;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder financialYearStartDate(String financialYearStartDate) {
            Utils.checkNotNull(financialYearStartDate, "financialYearStartDate");
            this.financialYearStartDate = Optional.ofNullable(financialYearStartDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder financialYearStartDate(Optional<? extends String> financialYearStartDate) {
            Utils.checkNotNull(financialYearStartDate, "financialYearStartDate");
            this.financialYearStartDate = financialYearStartDate;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder ledgerLockDate(String ledgerLockDate) {
            Utils.checkNotNull(ledgerLockDate, "ledgerLockDate");
            this.ledgerLockDate = Optional.ofNullable(ledgerLockDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder ledgerLockDate(Optional<? extends String> ledgerLockDate) {
            Utils.checkNotNull(ledgerLockDate, "ledgerLockDate");
            this.ledgerLockDate = ledgerLockDate;
            return this;
        }

        /**
         * An array of phone numbers.
         */
        public Builder phoneNumbers(java.util.List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = JsonNullable.of(phoneNumbers);
            return this;
        }

        /**
         * An array of phone numbers.
         */
        public Builder phoneNumbers(JsonNullable<? extends java.util.List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        /**
         * Registration number given to the linked company by the companies authority in the country of origin. In the UK this is Companies House.
         */
        public Builder registrationNumber(String registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = JsonNullable.of(registrationNumber);
            return this;
        }

        /**
         * Registration number given to the linked company by the companies authority in the country of origin. In the UK this is Companies House.
         */
        public Builder registrationNumber(JsonNullable<? extends String> registrationNumber) {
            Utils.checkNotNull(registrationNumber, "registrationNumber");
            this.registrationNumber = registrationNumber;
            return this;
        }

        /**
         * URL addresses for the accounting source.
         * 
         * For example, for Xero integrations two URLs are returned. These have many potential use cases, such as [deep linking](https://developer.xero.com/documentation/api-guides/deep-link-xero).
         */
        public Builder sourceUrls(java.util.Map<String, String> sourceUrls) {
            Utils.checkNotNull(sourceUrls, "sourceUrls");
            this.sourceUrls = JsonNullable.of(sourceUrls);
            return this;
        }

        /**
         * URL addresses for the accounting source.
         * 
         * For example, for Xero integrations two URLs are returned. These have many potential use cases, such as [deep linking](https://developer.xero.com/documentation/api-guides/deep-link-xero).
         */
        public Builder sourceUrls(JsonNullable<? extends java.util.Map<String, String>> sourceUrls) {
            Utils.checkNotNull(sourceUrls, "sourceUrls");
            this.sourceUrls = sourceUrls;
            return this;
        }

        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(SupplementalData supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = Optional.ofNullable(supplementalData);
            return this;
        }
        
        /**
         * Supplemental data is additional data you can include in our standard data types. 
         * 
         * It is referenced as a configured dynamic key value pair that is unique to the accounting platform. [Learn more](https://docs.codat.io/using-the-api/supplemental-data/overview) about supplemental data.
         */
        public Builder supplementalData(Optional<? extends SupplementalData> supplementalData) {
            Utils.checkNotNull(supplementalData, "supplementalData");
            this.supplementalData = supplementalData;
            return this;
        }

        /**
         * Company tax number.
         */
        public Builder taxNumber(String taxNumber) {
            Utils.checkNotNull(taxNumber, "taxNumber");
            this.taxNumber = JsonNullable.of(taxNumber);
            return this;
        }

        /**
         * Company tax number.
         */
        public Builder taxNumber(JsonNullable<? extends String> taxNumber) {
            Utils.checkNotNull(taxNumber, "taxNumber");
            this.taxNumber = taxNumber;
            return this;
        }

        /**
         * An array of weblinks.
         */
        public Builder webLinks(java.util.List<WebLink> webLinks) {
            Utils.checkNotNull(webLinks, "webLinks");
            this.webLinks = JsonNullable.of(webLinks);
            return this;
        }

        /**
         * An array of weblinks.
         */
        public Builder webLinks(JsonNullable<? extends java.util.List<WebLink>> webLinks) {
            Utils.checkNotNull(webLinks, "webLinks");
            this.webLinks = webLinks;
            return this;
        }        
        
        public AccountingCompanyInfo build() {
            return new AccountingCompanyInfo(
                accountingPlatformRef,
                addresses,
                baseCurrency,
                companyLegalName,
                companyName,
                createdDate,
                financialYearStartDate,
                ledgerLockDate,
                phoneNumbers,
                registrationNumber,
                sourceUrls,
                supplementalData,
                taxNumber,
                webLinks);
        }
    }
}

