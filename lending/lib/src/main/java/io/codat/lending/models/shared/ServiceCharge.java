/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.lending.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.lending.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class ServiceCharge {

    /**
     * Service charges for this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * The number of times the charge is charged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    private Optional<? extends Long> quantity;

    /**
     * Amount of the service charge that is tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    private Optional<? extends Double> taxAmount;

    /**
     * Percentage rate (from 0 to 100) of any tax applied to the service charge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxPercentage")
    private Optional<? extends Double> taxPercentage;

    /**
     * Taxes breakdown as applied to service charges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxes")
    private Optional<? extends java.util.List<TaxComponentAllocation>> taxes;

    /**
     * Total amount of the service charge, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends Double> totalAmount;

    /**
     * The type of the service charge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends ServiceChargeType> type;

    public ServiceCharge(
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("quantity") Optional<? extends Long> quantity,
            @JsonProperty("taxAmount") Optional<? extends Double> taxAmount,
            @JsonProperty("taxPercentage") Optional<? extends Double> taxPercentage,
            @JsonProperty("taxes") Optional<? extends java.util.List<TaxComponentAllocation>> taxes,
            @JsonProperty("totalAmount") Optional<? extends Double> totalAmount,
            @JsonProperty("type") Optional<? extends ServiceChargeType> type) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(taxPercentage, "taxPercentage");
        Utils.checkNotNull(taxes, "taxes");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(type, "type");
        this.description = description;
        this.quantity = quantity;
        this.taxAmount = taxAmount;
        this.taxPercentage = taxPercentage;
        this.taxes = taxes;
        this.totalAmount = totalAmount;
        this.type = type;
    }

    /**
     * Service charges for this order.
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * The number of times the charge is charged.
     */
    public Optional<? extends Long> quantity() {
        return quantity;
    }

    /**
     * Amount of the service charge that is tax.
     */
    public Optional<? extends Double> taxAmount() {
        return taxAmount;
    }

    /**
     * Percentage rate (from 0 to 100) of any tax applied to the service charge.
     */
    public Optional<? extends Double> taxPercentage() {
        return taxPercentage;
    }

    /**
     * Taxes breakdown as applied to service charges.
     */
    public Optional<? extends java.util.List<TaxComponentAllocation>> taxes() {
        return taxes;
    }

    /**
     * Total amount of the service charge, including tax.
     */
    public Optional<? extends Double> totalAmount() {
        return totalAmount;
    }

    /**
     * The type of the service charge.
     */
    public Optional<? extends ServiceChargeType> type() {
        return type;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Service charges for this order.
     */
    public ServiceCharge withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }
    
    /**
     * Service charges for this order.
     */
    public ServiceCharge withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The number of times the charge is charged.
     */
    public ServiceCharge withQuantity(long quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = Optional.ofNullable(quantity);
        return this;
    }
    
    /**
     * The number of times the charge is charged.
     */
    public ServiceCharge withQuantity(Optional<? extends Long> quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Amount of the service charge that is tax.
     */
    public ServiceCharge withTaxAmount(double taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = Optional.ofNullable(taxAmount);
        return this;
    }
    
    /**
     * Amount of the service charge that is tax.
     */
    public ServiceCharge withTaxAmount(Optional<? extends Double> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Percentage rate (from 0 to 100) of any tax applied to the service charge.
     */
    public ServiceCharge withTaxPercentage(double taxPercentage) {
        Utils.checkNotNull(taxPercentage, "taxPercentage");
        this.taxPercentage = Optional.ofNullable(taxPercentage);
        return this;
    }
    
    /**
     * Percentage rate (from 0 to 100) of any tax applied to the service charge.
     */
    public ServiceCharge withTaxPercentage(Optional<? extends Double> taxPercentage) {
        Utils.checkNotNull(taxPercentage, "taxPercentage");
        this.taxPercentage = taxPercentage;
        return this;
    }

    /**
     * Taxes breakdown as applied to service charges.
     */
    public ServiceCharge withTaxes(java.util.List<TaxComponentAllocation> taxes) {
        Utils.checkNotNull(taxes, "taxes");
        this.taxes = Optional.ofNullable(taxes);
        return this;
    }
    
    /**
     * Taxes breakdown as applied to service charges.
     */
    public ServiceCharge withTaxes(Optional<? extends java.util.List<TaxComponentAllocation>> taxes) {
        Utils.checkNotNull(taxes, "taxes");
        this.taxes = taxes;
        return this;
    }

    /**
     * Total amount of the service charge, including tax.
     */
    public ServiceCharge withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }
    
    /**
     * Total amount of the service charge, including tax.
     */
    public ServiceCharge withTotalAmount(Optional<? extends Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * The type of the service charge.
     */
    public ServiceCharge withType(ServiceChargeType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }
    
    /**
     * The type of the service charge.
     */
    public ServiceCharge withType(Optional<? extends ServiceChargeType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServiceCharge other = (ServiceCharge) o;
        return 
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.quantity, other.quantity) &&
            java.util.Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            java.util.Objects.deepEquals(this.taxPercentage, other.taxPercentage) &&
            java.util.Objects.deepEquals(this.taxes, other.taxes) &&
            java.util.Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            description,
            quantity,
            taxAmount,
            taxPercentage,
            taxes,
            totalAmount,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ServiceCharge.class,
                "description", description,
                "quantity", quantity,
                "taxAmount", taxAmount,
                "taxPercentage", taxPercentage,
                "taxes", taxes,
                "totalAmount", totalAmount,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends Long> quantity = Optional.empty();
 
        private Optional<? extends Double> taxAmount = Optional.empty();
 
        private Optional<? extends Double> taxPercentage = Optional.empty();
 
        private Optional<? extends java.util.List<TaxComponentAllocation>> taxes = Optional.empty();
 
        private Optional<? extends Double> totalAmount = Optional.empty();
 
        private Optional<? extends ServiceChargeType> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Service charges for this order.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }
        
        /**
         * Service charges for this order.
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The number of times the charge is charged.
         */
        public Builder quantity(long quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }
        
        /**
         * The number of times the charge is charged.
         */
        public Builder quantity(Optional<? extends Long> quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * Amount of the service charge that is tax.
         */
        public Builder taxAmount(double taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }
        
        /**
         * Amount of the service charge that is tax.
         */
        public Builder taxAmount(Optional<? extends Double> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Percentage rate (from 0 to 100) of any tax applied to the service charge.
         */
        public Builder taxPercentage(double taxPercentage) {
            Utils.checkNotNull(taxPercentage, "taxPercentage");
            this.taxPercentage = Optional.ofNullable(taxPercentage);
            return this;
        }
        
        /**
         * Percentage rate (from 0 to 100) of any tax applied to the service charge.
         */
        public Builder taxPercentage(Optional<? extends Double> taxPercentage) {
            Utils.checkNotNull(taxPercentage, "taxPercentage");
            this.taxPercentage = taxPercentage;
            return this;
        }

        /**
         * Taxes breakdown as applied to service charges.
         */
        public Builder taxes(java.util.List<TaxComponentAllocation> taxes) {
            Utils.checkNotNull(taxes, "taxes");
            this.taxes = Optional.ofNullable(taxes);
            return this;
        }
        
        /**
         * Taxes breakdown as applied to service charges.
         */
        public Builder taxes(Optional<? extends java.util.List<TaxComponentAllocation>> taxes) {
            Utils.checkNotNull(taxes, "taxes");
            this.taxes = taxes;
            return this;
        }

        /**
         * Total amount of the service charge, including tax.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }
        
        /**
         * Total amount of the service charge, including tax.
         */
        public Builder totalAmount(Optional<? extends Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * The type of the service charge.
         */
        public Builder type(ServiceChargeType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }
        
        /**
         * The type of the service charge.
         */
        public Builder type(Optional<? extends ServiceChargeType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }        
        
        public ServiceCharge build() {
            return new ServiceCharge(
                description,
                quantity,
                taxAmount,
                taxPercentage,
                taxes,
                totalAmount,
                type);
        }
    }
}

