/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync_for_payables.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync_for_payables.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BillLineItem {

    /**
     * Reference to the account to which the line item is linked.
     */
    @JsonProperty("accountRef")
    private BillAccountRef accountRef;

    /**
     * Friendly name of the goods or services received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<? extends String> description;

    /**
     * Number of units of goods or services received.
     */
    @JsonProperty("quantity")
    private double quantity;

    /**
     * Amount of tax applied to the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    private Optional<? extends Double> taxAmount;

    /**
     * Reference to the tax rate to which the line item is linked.
     */
    @JsonProperty("taxRateRef")
    private BillTaxRateRef taxRateRef;

    /**
     * Total amount of the line, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private JsonNullable<? extends Double> totalAmount;

    /**
     * Unit price of the goods or service.
     */
    @JsonProperty("unitAmount")
    private double unitAmount;

    public BillLineItem(
            @JsonProperty("accountRef") BillAccountRef accountRef,
            @JsonProperty("description") JsonNullable<? extends String> description,
            @JsonProperty("quantity") double quantity,
            @JsonProperty("taxAmount") Optional<? extends Double> taxAmount,
            @JsonProperty("taxRateRef") BillTaxRateRef taxRateRef,
            @JsonProperty("totalAmount") JsonNullable<? extends Double> totalAmount,
            @JsonProperty("unitAmount") double unitAmount) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(unitAmount, "unitAmount");
        this.accountRef = accountRef;
        this.description = description;
        this.quantity = quantity;
        this.taxAmount = taxAmount;
        this.taxRateRef = taxRateRef;
        this.totalAmount = totalAmount;
        this.unitAmount = unitAmount;
    }

    /**
     * Reference to the account to which the line item is linked.
     */
    public BillAccountRef accountRef() {
        return accountRef;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public JsonNullable<? extends String> description() {
        return description;
    }

    /**
     * Number of units of goods or services received.
     */
    public double quantity() {
        return quantity;
    }

    /**
     * Amount of tax applied to the line item.
     */
    public Optional<? extends Double> taxAmount() {
        return taxAmount;
    }

    /**
     * Reference to the tax rate to which the line item is linked.
     */
    public BillTaxRateRef taxRateRef() {
        return taxRateRef;
    }

    /**
     * Total amount of the line, including tax.
     */
    public JsonNullable<? extends Double> totalAmount() {
        return totalAmount;
    }

    /**
     * Unit price of the goods or service.
     */
    public double unitAmount() {
        return unitAmount;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Reference to the account to which the line item is linked.
     */
    public BillLineItem withAccountRef(BillAccountRef accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public BillLineItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public BillLineItem withDescription(JsonNullable<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Number of units of goods or services received.
     */
    public BillLineItem withQuantity(double quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Amount of tax applied to the line item.
     */
    public BillLineItem withTaxAmount(double taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = Optional.ofNullable(taxAmount);
        return this;
    }
    
    /**
     * Amount of tax applied to the line item.
     */
    public BillLineItem withTaxAmount(Optional<? extends Double> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Reference to the tax rate to which the line item is linked.
     */
    public BillLineItem withTaxRateRef(BillTaxRateRef taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = taxRateRef;
        return this;
    }

    /**
     * Total amount of the line, including tax.
     */
    public BillLineItem withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    /**
     * Total amount of the line, including tax.
     */
    public BillLineItem withTotalAmount(JsonNullable<? extends Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Unit price of the goods or service.
     */
    public BillLineItem withUnitAmount(double unitAmount) {
        Utils.checkNotNull(unitAmount, "unitAmount");
        this.unitAmount = unitAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillLineItem other = (BillLineItem) o;
        return 
            java.util.Objects.deepEquals(this.accountRef, other.accountRef) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.quantity, other.quantity) &&
            java.util.Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            java.util.Objects.deepEquals(this.taxRateRef, other.taxRateRef) &&
            java.util.Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            java.util.Objects.deepEquals(this.unitAmount, other.unitAmount);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountRef,
            description,
            quantity,
            taxAmount,
            taxRateRef,
            totalAmount,
            unitAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillLineItem.class,
                "accountRef", accountRef,
                "description", description,
                "quantity", quantity,
                "taxAmount", taxAmount,
                "taxRateRef", taxRateRef,
                "totalAmount", totalAmount,
                "unitAmount", unitAmount);
    }
    
    public final static class Builder {
 
        private BillAccountRef accountRef;
 
        private JsonNullable<? extends String> description = JsonNullable.undefined();
 
        private Double quantity;
 
        private Optional<? extends Double> taxAmount = Optional.empty();
 
        private BillTaxRateRef taxRateRef;
 
        private JsonNullable<? extends Double> totalAmount = JsonNullable.undefined();
 
        private Double unitAmount;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Reference to the account to which the line item is linked.
         */
        public Builder accountRef(BillAccountRef accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * Friendly name of the goods or services received.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Friendly name of the goods or services received.
         */
        public Builder description(JsonNullable<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Number of units of goods or services received.
         */
        public Builder quantity(double quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * Amount of tax applied to the line item.
         */
        public Builder taxAmount(double taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }
        
        /**
         * Amount of tax applied to the line item.
         */
        public Builder taxAmount(Optional<? extends Double> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Reference to the tax rate to which the line item is linked.
         */
        public Builder taxRateRef(BillTaxRateRef taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = taxRateRef;
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(JsonNullable<? extends Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Unit price of the goods or service.
         */
        public Builder unitAmount(double unitAmount) {
            Utils.checkNotNull(unitAmount, "unitAmount");
            this.unitAmount = unitAmount;
            return this;
        }
        
        public BillLineItem build() {
            return new BillLineItem(
                accountRef,
                description,
                quantity,
                taxAmount,
                taxRateRef,
                totalAmount,
                unitAmount);
        }
    }
}

