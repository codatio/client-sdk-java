/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.payables.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class Pagination {

    /**
     * A continuation token indicating there are more results to be fetched. Supply this value in the `continuationToken` query parameter in the next request to fetch the next set of results. Once no more results are available, the continuation token will not be present in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("continuationToken")
    private Optional<String> continuationToken;

    @JsonCreator
    public Pagination(
            @JsonProperty("continuationToken") Optional<String> continuationToken) {
        Utils.checkNotNull(continuationToken, "continuationToken");
        this.continuationToken = continuationToken;
    }
    
    public Pagination() {
        this(Optional.empty());
    }

    /**
     * A continuation token indicating there are more results to be fetched. Supply this value in the `continuationToken` query parameter in the next request to fetch the next set of results. Once no more results are available, the continuation token will not be present in the response.
     */
    @JsonIgnore
    public Optional<String> continuationToken() {
        return continuationToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A continuation token indicating there are more results to be fetched. Supply this value in the `continuationToken` query parameter in the next request to fetch the next set of results. Once no more results are available, the continuation token will not be present in the response.
     */
    public Pagination withContinuationToken(String continuationToken) {
        Utils.checkNotNull(continuationToken, "continuationToken");
        this.continuationToken = Optional.ofNullable(continuationToken);
        return this;
    }

    /**
     * A continuation token indicating there are more results to be fetched. Supply this value in the `continuationToken` query parameter in the next request to fetch the next set of results. Once no more results are available, the continuation token will not be present in the response.
     */
    public Pagination withContinuationToken(Optional<String> continuationToken) {
        Utils.checkNotNull(continuationToken, "continuationToken");
        this.continuationToken = continuationToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pagination other = (Pagination) o;
        return 
            Objects.deepEquals(this.continuationToken, other.continuationToken);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            continuationToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Pagination.class,
                "continuationToken", continuationToken);
    }
    
    public final static class Builder {
 
        private Optional<String> continuationToken = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A continuation token indicating there are more results to be fetched. Supply this value in the `continuationToken` query parameter in the next request to fetch the next set of results. Once no more results are available, the continuation token will not be present in the response.
         */
        public Builder continuationToken(String continuationToken) {
            Utils.checkNotNull(continuationToken, "continuationToken");
            this.continuationToken = Optional.ofNullable(continuationToken);
            return this;
        }

        /**
         * A continuation token indicating there are more results to be fetched. Supply this value in the `continuationToken` query parameter in the next request to fetch the next set of results. Once no more results are available, the continuation token will not be present in the response.
         */
        public Builder continuationToken(Optional<String> continuationToken) {
            Utils.checkNotNull(continuationToken, "continuationToken");
            this.continuationToken = continuationToken;
            return this;
        }
        
        public Pagination build() {
            return new Pagination(
                continuationToken);
        }
    }
}

