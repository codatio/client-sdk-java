/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payables.models.operations;

import io.codat.sync.payables.models.components.CompanyRequestBody;
import io.codat.sync.payables.utils.Options;
import java.lang.Exception;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallCreateCompany {
        CreateCompanyResponse create(
            Optional<? extends CompanyRequestBody> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteCompany {
        DeleteCompanyResponse delete(
            DeleteCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompany {
        GetCompanyResponse get(
            GetCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListCompanies {
        ListCompaniesResponse list(
            ListCompaniesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateCompany {
        UpdateCompanyResponse update(
            UpdateCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateConnection {
        CreateConnectionResponse create(
            CreateConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteConnection {
        DeleteConnectionResponse delete(
            DeleteConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetConnection {
        GetConnectionResponse get(
            GetConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListConnections {
        ListConnectionsResponse list(
            ListConnectionsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUnlinkConnection {
        UnlinkConnectionResponse unlink(
            UnlinkConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateBill {
        CreateBillResponse create(
            CreateBillRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDownloadBillAttachment {
        DownloadBillAttachmentResponse downloadAttachment(
            DownloadBillAttachmentRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetMappingOptionsBills {
        GetMappingOptionsBillsResponse getBillOptions(
            GetMappingOptionsBillsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListBills {
        ListBillsResponse list(
            ListBillsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListBillAttachments {
        ListBillAttachmentsResponse listAttachments(
            ListBillAttachmentsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUploadBillAttachment {
        UploadBillAttachmentResponse uploadAttachment(
            UploadBillAttachmentRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateBankAccount {
        CreateBankAccountResponse create(
            CreateBankAccountRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateBillPayment {
        CreateBillPaymentResponse create(
            CreateBillPaymentRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetMappingOptionsPayments {
        GetMappingOptionsPaymentsResponse getPaymentOptions(
            GetMappingOptionsPaymentsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompanyInformation {
        GetCompanyInformationResponse get(
            GetCompanyInformationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateSupplier {
        CreateSupplierResponse create(
            CreateSupplierRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListSuppliers {
        ListSuppliersResponse list(
            ListSuppliersRequest request,
            Optional<Options> options) throws Exception;
    }


}
