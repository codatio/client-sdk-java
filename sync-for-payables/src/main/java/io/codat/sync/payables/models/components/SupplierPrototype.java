/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.payables.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class SupplierPrototype {

    /**
     * An array of Addresses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private JsonNullable<? extends List<Address>> addresses;

    /**
     * Amount outstanding against the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<? extends BigDecimal> balance;

    /**
     * Name of the main contact for the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contactName")
    private JsonNullable<String> contactName;

    /**
     * Default currency the supplier's transactional data is recorded in.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultCurrency")
    private JsonNullable<String> defaultCurrency;

    /**
     * Email address that the supplier may be contacted on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailAddress")
    private JsonNullable<String> emailAddress;

    /**
     * Phone number that the supplier may be contacted on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<String> phone;

    /**
     * Status of the supplier.
     */
    @JsonProperty("status")
    private SupplierStatus status;

    /**
     * Name of the supplier as recorded in the accounting system, typically the company name.
     */
    @JsonProperty("supplierName")
    private String supplierName;

    @JsonCreator
    public SupplierPrototype(
            @JsonProperty("addresses") JsonNullable<? extends List<Address>> addresses,
            @JsonProperty("balance") JsonNullable<? extends BigDecimal> balance,
            @JsonProperty("contactName") JsonNullable<String> contactName,
            @JsonProperty("defaultCurrency") JsonNullable<String> defaultCurrency,
            @JsonProperty("emailAddress") JsonNullable<String> emailAddress,
            @JsonProperty("phone") JsonNullable<String> phone,
            @JsonProperty("status") SupplierStatus status,
            @JsonProperty("supplierName") String supplierName) {
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(contactName, "contactName");
        Utils.checkNotNull(defaultCurrency, "defaultCurrency");
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(supplierName, "supplierName");
        this.addresses = addresses;
        this.balance = balance;
        this.contactName = contactName;
        this.defaultCurrency = defaultCurrency;
        this.emailAddress = emailAddress;
        this.phone = phone;
        this.status = status;
        this.supplierName = supplierName;
    }
    
    public SupplierPrototype(
            SupplierStatus status,
            String supplierName) {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), status, supplierName);
    }

    /**
     * An array of Addresses.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<Address>> addresses() {
        return (JsonNullable<List<Address>>) addresses;
    }

    /**
     * Amount outstanding against the supplier.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> balance() {
        return (JsonNullable<BigDecimal>) balance;
    }

    /**
     * Name of the main contact for the supplier.
     */
    @JsonIgnore
    public JsonNullable<String> contactName() {
        return contactName;
    }

    /**
     * Default currency the supplier's transactional data is recorded in.
     */
    @JsonIgnore
    public JsonNullable<String> defaultCurrency() {
        return defaultCurrency;
    }

    /**
     * Email address that the supplier may be contacted on.
     */
    @JsonIgnore
    public JsonNullable<String> emailAddress() {
        return emailAddress;
    }

    /**
     * Phone number that the supplier may be contacted on.
     */
    @JsonIgnore
    public JsonNullable<String> phone() {
        return phone;
    }

    /**
     * Status of the supplier.
     */
    @JsonIgnore
    public SupplierStatus status() {
        return status;
    }

    /**
     * Name of the supplier as recorded in the accounting system, typically the company name.
     */
    @JsonIgnore
    public String supplierName() {
        return supplierName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An array of Addresses.
     */
    public SupplierPrototype withAddresses(List<Address> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = JsonNullable.of(addresses);
        return this;
    }

    /**
     * An array of Addresses.
     */
    public SupplierPrototype withAddresses(JsonNullable<? extends List<Address>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    /**
     * Amount outstanding against the supplier.
     */
    public SupplierPrototype withBalance(BigDecimal balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

        /**
         * Amount outstanding against the supplier.
         */
    public SupplierPrototype withBalance(double balance) {
        this.balance = JsonNullable.of(BigDecimal.valueOf(balance));
        return this;
    }

    /**
     * Amount outstanding against the supplier.
     */
    public SupplierPrototype withBalance(JsonNullable<? extends BigDecimal> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * Name of the main contact for the supplier.
     */
    public SupplierPrototype withContactName(String contactName) {
        Utils.checkNotNull(contactName, "contactName");
        this.contactName = JsonNullable.of(contactName);
        return this;
    }

    /**
     * Name of the main contact for the supplier.
     */
    public SupplierPrototype withContactName(JsonNullable<String> contactName) {
        Utils.checkNotNull(contactName, "contactName");
        this.contactName = contactName;
        return this;
    }

    /**
     * Default currency the supplier's transactional data is recorded in.
     */
    public SupplierPrototype withDefaultCurrency(String defaultCurrency) {
        Utils.checkNotNull(defaultCurrency, "defaultCurrency");
        this.defaultCurrency = JsonNullable.of(defaultCurrency);
        return this;
    }

    /**
     * Default currency the supplier's transactional data is recorded in.
     */
    public SupplierPrototype withDefaultCurrency(JsonNullable<String> defaultCurrency) {
        Utils.checkNotNull(defaultCurrency, "defaultCurrency");
        this.defaultCurrency = defaultCurrency;
        return this;
    }

    /**
     * Email address that the supplier may be contacted on.
     */
    public SupplierPrototype withEmailAddress(String emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = JsonNullable.of(emailAddress);
        return this;
    }

    /**
     * Email address that the supplier may be contacted on.
     */
    public SupplierPrototype withEmailAddress(JsonNullable<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Phone number that the supplier may be contacted on.
     */
    public SupplierPrototype withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    /**
     * Phone number that the supplier may be contacted on.
     */
    public SupplierPrototype withPhone(JsonNullable<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    /**
     * Status of the supplier.
     */
    public SupplierPrototype withStatus(SupplierStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Name of the supplier as recorded in the accounting system, typically the company name.
     */
    public SupplierPrototype withSupplierName(String supplierName) {
        Utils.checkNotNull(supplierName, "supplierName");
        this.supplierName = supplierName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupplierPrototype other = (SupplierPrototype) o;
        return 
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.balance, other.balance) &&
            Objects.deepEquals(this.contactName, other.contactName) &&
            Objects.deepEquals(this.defaultCurrency, other.defaultCurrency) &&
            Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.supplierName, other.supplierName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addresses,
            balance,
            contactName,
            defaultCurrency,
            emailAddress,
            phone,
            status,
            supplierName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SupplierPrototype.class,
                "addresses", addresses,
                "balance", balance,
                "contactName", contactName,
                "defaultCurrency", defaultCurrency,
                "emailAddress", emailAddress,
                "phone", phone,
                "status", status,
                "supplierName", supplierName);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends List<Address>> addresses = JsonNullable.undefined();
 
        private JsonNullable<? extends BigDecimal> balance = JsonNullable.undefined();
 
        private JsonNullable<String> contactName = JsonNullable.undefined();
 
        private JsonNullable<String> defaultCurrency = JsonNullable.undefined();
 
        private JsonNullable<String> emailAddress = JsonNullable.undefined();
 
        private JsonNullable<String> phone = JsonNullable.undefined();
 
        private SupplierStatus status;
 
        private String supplierName;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array of Addresses.
         */
        public Builder addresses(List<Address> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = JsonNullable.of(addresses);
            return this;
        }

        /**
         * An array of Addresses.
         */
        public Builder addresses(JsonNullable<? extends List<Address>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        /**
         * Amount outstanding against the supplier.
         */
        public Builder balance(BigDecimal balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * Amount outstanding against the supplier.
         */
        public Builder balance(double balance) {
            this.balance = JsonNullable.of(BigDecimal.valueOf(balance));
            return this;
        }

        /**
         * Amount outstanding against the supplier.
         */
        public Builder balance(JsonNullable<? extends BigDecimal> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * Name of the main contact for the supplier.
         */
        public Builder contactName(String contactName) {
            Utils.checkNotNull(contactName, "contactName");
            this.contactName = JsonNullable.of(contactName);
            return this;
        }

        /**
         * Name of the main contact for the supplier.
         */
        public Builder contactName(JsonNullable<String> contactName) {
            Utils.checkNotNull(contactName, "contactName");
            this.contactName = contactName;
            return this;
        }

        /**
         * Default currency the supplier's transactional data is recorded in.
         */
        public Builder defaultCurrency(String defaultCurrency) {
            Utils.checkNotNull(defaultCurrency, "defaultCurrency");
            this.defaultCurrency = JsonNullable.of(defaultCurrency);
            return this;
        }

        /**
         * Default currency the supplier's transactional data is recorded in.
         */
        public Builder defaultCurrency(JsonNullable<String> defaultCurrency) {
            Utils.checkNotNull(defaultCurrency, "defaultCurrency");
            this.defaultCurrency = defaultCurrency;
            return this;
        }

        /**
         * Email address that the supplier may be contacted on.
         */
        public Builder emailAddress(String emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = JsonNullable.of(emailAddress);
            return this;
        }

        /**
         * Email address that the supplier may be contacted on.
         */
        public Builder emailAddress(JsonNullable<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Phone number that the supplier may be contacted on.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        /**
         * Phone number that the supplier may be contacted on.
         */
        public Builder phone(JsonNullable<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        /**
         * Status of the supplier.
         */
        public Builder status(SupplierStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Name of the supplier as recorded in the accounting system, typically the company name.
         */
        public Builder supplierName(String supplierName) {
            Utils.checkNotNull(supplierName, "supplierName");
            this.supplierName = supplierName;
            return this;
        }
        
        public SupplierPrototype build() {
            return new SupplierPrototype(
                addresses,
                balance,
                contactName,
                defaultCurrency,
                emailAddress,
                phone,
                status,
                supplierName);
        }
    }
}

