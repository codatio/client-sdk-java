/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.payables.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * SupplierRef - Reference to the supplier the record relates to.
 */

public class SupplierRef {

    /**
     * The supplier's unique ID
     */
    @JsonProperty("id")
    private String id;

    /**
     * The supplier's name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierName")
    private JsonNullable<? extends String> supplierName;

    public SupplierRef(
            @JsonProperty("id") String id,
            @JsonProperty("supplierName") JsonNullable<? extends String> supplierName) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(supplierName, "supplierName");
        this.id = id;
        this.supplierName = supplierName;
    }

    /**
     * The supplier's unique ID
     */
    public String id() {
        return id;
    }

    /**
     * The supplier's name
     */
    public JsonNullable<? extends String> supplierName() {
        return supplierName;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The supplier's unique ID
     */
    public SupplierRef withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The supplier's name
     */
    public SupplierRef withSupplierName(String supplierName) {
        Utils.checkNotNull(supplierName, "supplierName");
        this.supplierName = JsonNullable.of(supplierName);
        return this;
    }

    /**
     * The supplier's name
     */
    public SupplierRef withSupplierName(JsonNullable<? extends String> supplierName) {
        Utils.checkNotNull(supplierName, "supplierName");
        this.supplierName = supplierName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupplierRef other = (SupplierRef) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.supplierName, other.supplierName);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            supplierName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SupplierRef.class,
                "id", id,
                "supplierName", supplierName);
    }
    
    public final static class Builder {
 
        private String id;
 
        private JsonNullable<? extends String> supplierName = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The supplier's unique ID
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The supplier's name
         */
        public Builder supplierName(String supplierName) {
            Utils.checkNotNull(supplierName, "supplierName");
            this.supplierName = JsonNullable.of(supplierName);
            return this;
        }

        /**
         * The supplier's name
         */
        public Builder supplierName(JsonNullable<? extends String> supplierName) {
            Utils.checkNotNull(supplierName, "supplierName");
            this.supplierName = supplierName;
            return this;
        }
        
        public SupplierRef build() {
            return new SupplierRef(
                id,
                supplierName);
        }
    }
}

