/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.payables.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BillLineItem {

    /**
     * Reference to the account to which the line item is linked.
     */
    @JsonProperty("accountRef")
    private BillAccountRef accountRef;

    /**
     * Friendly name of the goods or services received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Number of units of goods or services received.
     */
    @JsonProperty("quantity")
    private BigDecimal quantity;

    /**
     * Amount of tax applied to the line item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    private Optional<? extends BigDecimal> taxAmount;

    /**
     * Reference to the tax rate to which the line item is linked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRateRef")
    private Optional<? extends BillTaxRateRef> taxRateRef;

    /**
     * Total amount of the line, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private JsonNullable<? extends BigDecimal> totalAmount;

    /**
     * Unit price of the goods or service.
     */
    @JsonProperty("unitAmount")
    private BigDecimal unitAmount;

    @JsonCreator
    public BillLineItem(
            @JsonProperty("accountRef") BillAccountRef accountRef,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("quantity") BigDecimal quantity,
            @JsonProperty("taxAmount") Optional<? extends BigDecimal> taxAmount,
            @JsonProperty("taxRateRef") Optional<? extends BillTaxRateRef> taxRateRef,
            @JsonProperty("totalAmount") JsonNullable<? extends BigDecimal> totalAmount,
            @JsonProperty("unitAmount") BigDecimal unitAmount) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(quantity, "quantity");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(unitAmount, "unitAmount");
        this.accountRef = accountRef;
        this.description = description;
        this.quantity = quantity;
        this.taxAmount = taxAmount;
        this.taxRateRef = taxRateRef;
        this.totalAmount = totalAmount;
        this.unitAmount = unitAmount;
    }
    
    public BillLineItem(
            BillAccountRef accountRef,
            BigDecimal quantity,
            BigDecimal unitAmount) {
        this(accountRef, JsonNullable.undefined(), quantity, Optional.empty(), Optional.empty(), JsonNullable.undefined(), unitAmount);
    }

    /**
     * Reference to the account to which the line item is linked.
     */
    @JsonIgnore
    public BillAccountRef accountRef() {
        return accountRef;
    }

    /**
     * Friendly name of the goods or services received.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Number of units of goods or services received.
     */
    @JsonIgnore
    public BigDecimal quantity() {
        return quantity;
    }

    /**
     * Amount of tax applied to the line item.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> taxAmount() {
        return (Optional<BigDecimal>) taxAmount;
    }

    /**
     * Reference to the tax rate to which the line item is linked.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BillTaxRateRef> taxRateRef() {
        return (Optional<BillTaxRateRef>) taxRateRef;
    }

    /**
     * Total amount of the line, including tax.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> totalAmount() {
        return (JsonNullable<BigDecimal>) totalAmount;
    }

    /**
     * Unit price of the goods or service.
     */
    @JsonIgnore
    public BigDecimal unitAmount() {
        return unitAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Reference to the account to which the line item is linked.
     */
    public BillLineItem withAccountRef(BillAccountRef accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public BillLineItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Friendly name of the goods or services received.
     */
    public BillLineItem withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

        /**
         * Number of units of goods or services received.
         */
    public BillLineItem withQuantity(double quantity) {
        this.quantity = BigDecimal.valueOf(quantity);
        return this;
    }

    /**
     * Number of units of goods or services received.
     */
    public BillLineItem withQuantity(BigDecimal quantity) {
        Utils.checkNotNull(quantity, "quantity");
        this.quantity = quantity;
        return this;
    }

    /**
     * Amount of tax applied to the line item.
     */
    public BillLineItem withTaxAmount(BigDecimal taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = Optional.ofNullable(taxAmount);
        return this;
    }

        /**
         * Amount of tax applied to the line item.
         */
    public BillLineItem withTaxAmount(double taxAmount) {
        this.taxAmount = Optional.of(BigDecimal.valueOf(taxAmount));
        return this;
    }

    /**
     * Amount of tax applied to the line item.
     */
    public BillLineItem withTaxAmount(Optional<? extends BigDecimal> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    /**
     * Reference to the tax rate to which the line item is linked.
     */
    public BillLineItem withTaxRateRef(BillTaxRateRef taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = Optional.ofNullable(taxRateRef);
        return this;
    }

    /**
     * Reference to the tax rate to which the line item is linked.
     */
    public BillLineItem withTaxRateRef(Optional<? extends BillTaxRateRef> taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = taxRateRef;
        return this;
    }

    /**
     * Total amount of the line, including tax.
     */
    public BillLineItem withTotalAmount(BigDecimal totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

        /**
         * Total amount of the line, including tax.
         */
    public BillLineItem withTotalAmount(double totalAmount) {
        this.totalAmount = JsonNullable.of(BigDecimal.valueOf(totalAmount));
        return this;
    }

    /**
     * Total amount of the line, including tax.
     */
    public BillLineItem withTotalAmount(JsonNullable<? extends BigDecimal> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

        /**
         * Unit price of the goods or service.
         */
    public BillLineItem withUnitAmount(double unitAmount) {
        this.unitAmount = BigDecimal.valueOf(unitAmount);
        return this;
    }

    /**
     * Unit price of the goods or service.
     */
    public BillLineItem withUnitAmount(BigDecimal unitAmount) {
        Utils.checkNotNull(unitAmount, "unitAmount");
        this.unitAmount = unitAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BillLineItem other = (BillLineItem) o;
        return 
            Objects.deepEquals(this.accountRef, other.accountRef) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.quantity, other.quantity) &&
            Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            Objects.deepEquals(this.taxRateRef, other.taxRateRef) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.unitAmount, other.unitAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountRef,
            description,
            quantity,
            taxAmount,
            taxRateRef,
            totalAmount,
            unitAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BillLineItem.class,
                "accountRef", accountRef,
                "description", description,
                "quantity", quantity,
                "taxAmount", taxAmount,
                "taxRateRef", taxRateRef,
                "totalAmount", totalAmount,
                "unitAmount", unitAmount);
    }
    
    public final static class Builder {
 
        private BillAccountRef accountRef;
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private BigDecimal quantity;
 
        private Optional<? extends BigDecimal> taxAmount = Optional.empty();
 
        private Optional<? extends BillTaxRateRef> taxRateRef = Optional.empty();
 
        private JsonNullable<? extends BigDecimal> totalAmount = JsonNullable.undefined();
 
        private BigDecimal unitAmount;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Reference to the account to which the line item is linked.
         */
        public Builder accountRef(BillAccountRef accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * Friendly name of the goods or services received.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Friendly name of the goods or services received.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Number of units of goods or services received.
         */
        public Builder quantity(double quantity) {
            this.quantity = BigDecimal.valueOf(quantity);
            return this;
        }

        /**
         * Number of units of goods or services received.
         */
        public Builder quantity(BigDecimal quantity) {
            Utils.checkNotNull(quantity, "quantity");
            this.quantity = quantity;
            return this;
        }

        /**
         * Amount of tax applied to the line item.
         */
        public Builder taxAmount(BigDecimal taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        /**
         * Amount of tax applied to the line item.
         */
        public Builder taxAmount(double taxAmount) {
            this.taxAmount = Optional.of(BigDecimal.valueOf(taxAmount));
            return this;
        }

        /**
         * Amount of tax applied to the line item.
         */
        public Builder taxAmount(Optional<? extends BigDecimal> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        /**
         * Reference to the tax rate to which the line item is linked.
         */
        public Builder taxRateRef(BillTaxRateRef taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = Optional.ofNullable(taxRateRef);
            return this;
        }

        /**
         * Reference to the tax rate to which the line item is linked.
         */
        public Builder taxRateRef(Optional<? extends BillTaxRateRef> taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = taxRateRef;
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(BigDecimal totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(double totalAmount) {
            this.totalAmount = JsonNullable.of(BigDecimal.valueOf(totalAmount));
            return this;
        }

        /**
         * Total amount of the line, including tax.
         */
        public Builder totalAmount(JsonNullable<? extends BigDecimal> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Unit price of the goods or service.
         */
        public Builder unitAmount(double unitAmount) {
            this.unitAmount = BigDecimal.valueOf(unitAmount);
            return this;
        }

        /**
         * Unit price of the goods or service.
         */
        public Builder unitAmount(BigDecimal unitAmount) {
            Utils.checkNotNull(unitAmount, "unitAmount");
            this.unitAmount = unitAmount;
            return this;
        }
        
        public BillLineItem build() {
            return new BillLineItem(
                accountRef,
                description,
                quantity,
                taxAmount,
                taxRateRef,
                totalAmount,
                unitAmount);
        }
    }
}

