/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.payables.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class BankAccountMappingOption {

    /**
     * Account number for the bank account.
     * 
     * Xero integrations
     * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountNumber")
    private JsonNullable<? extends String> accountNumber;

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountType")
    private Optional<? extends AccountType> accountType;

    /**
     * The bank account's base currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends String> currency;

    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Name of the bank account in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    /**
     * Code used to identify each nominal account for a business.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nominalCode")
    private JsonNullable<? extends String> nominalCode;

    /**
     * Sort code for the bank account.
     * 
     * Xero integrations
     * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortCode")
    private JsonNullable<? extends String> sortCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<? extends String> sourceModifiedDate;

    /**
     * The current status of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends BankAccountStatus> status;

    public BankAccountMappingOption(
            @JsonProperty("accountNumber") JsonNullable<? extends String> accountNumber,
            @JsonProperty("accountType") Optional<? extends AccountType> accountType,
            @JsonProperty("currency") JsonNullable<? extends String> currency,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("nominalCode") JsonNullable<? extends String> nominalCode,
            @JsonProperty("sortCode") JsonNullable<? extends String> sortCode,
            @JsonProperty("sourceModifiedDate") Optional<? extends String> sourceModifiedDate,
            @JsonProperty("status") Optional<? extends BankAccountStatus> status) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(accountType, "accountType");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(nominalCode, "nominalCode");
        Utils.checkNotNull(sortCode, "sortCode");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(status, "status");
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.currency = currency;
        this.id = id;
        this.name = name;
        this.nominalCode = nominalCode;
        this.sortCode = sortCode;
        this.sourceModifiedDate = sourceModifiedDate;
        this.status = status;
    }

    /**
     * Account number for the bank account.
     * 
     * Xero integrations
     * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
     */
    public JsonNullable<? extends String> accountNumber() {
        return accountNumber;
    }

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    public Optional<? extends AccountType> accountType() {
        return accountType;
    }

    /**
     * The bank account's base currency.
     */
    public JsonNullable<? extends String> currency() {
        return currency;
    }

    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Name of the bank account in the accounting platform.
     */
    public JsonNullable<? extends String> name() {
        return name;
    }

    /**
     * Code used to identify each nominal account for a business.
     */
    public JsonNullable<? extends String> nominalCode() {
        return nominalCode;
    }

    /**
     * Sort code for the bank account.
     * 
     * Xero integrations
     * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
     */
    public JsonNullable<? extends String> sortCode() {
        return sortCode;
    }

    public Optional<? extends String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * The current status of the bank account.
     */
    public Optional<? extends BankAccountStatus> status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Account number for the bank account.
     * 
     * Xero integrations
     * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
     */
    public BankAccountMappingOption withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = JsonNullable.of(accountNumber);
        return this;
    }

    /**
     * Account number for the bank account.
     * 
     * Xero integrations
     * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
     */
    public BankAccountMappingOption withAccountNumber(JsonNullable<? extends String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    public BankAccountMappingOption withAccountType(AccountType accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = Optional.ofNullable(accountType);
        return this;
    }

    /**
     * The type of transactions and balances on the account.  
     * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
     * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
     */
    public BankAccountMappingOption withAccountType(Optional<? extends AccountType> accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }

    /**
     * The bank account's base currency.
     */
    public BankAccountMappingOption withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * The bank account's base currency.
     */
    public BankAccountMappingOption withCurrency(JsonNullable<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    public BankAccountMappingOption withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Identifier for the account, unique for the company in the accounting platform.
     */
    public BankAccountMappingOption withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the bank account in the accounting platform.
     */
    public BankAccountMappingOption withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Name of the bank account in the accounting platform.
     */
    public BankAccountMappingOption withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Code used to identify each nominal account for a business.
     */
    public BankAccountMappingOption withNominalCode(String nominalCode) {
        Utils.checkNotNull(nominalCode, "nominalCode");
        this.nominalCode = JsonNullable.of(nominalCode);
        return this;
    }

    /**
     * Code used to identify each nominal account for a business.
     */
    public BankAccountMappingOption withNominalCode(JsonNullable<? extends String> nominalCode) {
        Utils.checkNotNull(nominalCode, "nominalCode");
        this.nominalCode = nominalCode;
        return this;
    }

    /**
     * Sort code for the bank account.
     * 
     * Xero integrations
     * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
     */
    public BankAccountMappingOption withSortCode(String sortCode) {
        Utils.checkNotNull(sortCode, "sortCode");
        this.sortCode = JsonNullable.of(sortCode);
        return this;
    }

    /**
     * Sort code for the bank account.
     * 
     * Xero integrations
     * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
     */
    public BankAccountMappingOption withSortCode(JsonNullable<? extends String> sortCode) {
        Utils.checkNotNull(sortCode, "sortCode");
        this.sortCode = sortCode;
        return this;
    }

    public BankAccountMappingOption withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }

    public BankAccountMappingOption withSourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * The current status of the bank account.
     */
    public BankAccountMappingOption withStatus(BankAccountStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The current status of the bank account.
     */
    public BankAccountMappingOption withStatus(Optional<? extends BankAccountStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankAccountMappingOption other = (BankAccountMappingOption) o;
        return 
            java.util.Objects.deepEquals(this.accountNumber, other.accountNumber) &&
            java.util.Objects.deepEquals(this.accountType, other.accountType) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.nominalCode, other.nominalCode) &&
            java.util.Objects.deepEquals(this.sortCode, other.sortCode) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountNumber,
            accountType,
            currency,
            id,
            name,
            nominalCode,
            sortCode,
            sourceModifiedDate,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankAccountMappingOption.class,
                "accountNumber", accountNumber,
                "accountType", accountType,
                "currency", currency,
                "id", id,
                "name", name,
                "nominalCode", nominalCode,
                "sortCode", sortCode,
                "sourceModifiedDate", sourceModifiedDate,
                "status", status);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> accountNumber = JsonNullable.undefined();
 
        private Optional<? extends AccountType> accountType = Optional.empty();
 
        private JsonNullable<? extends String> currency = JsonNullable.undefined();
 
        private Optional<? extends String> id = Optional.empty();
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends String> nominalCode = JsonNullable.undefined();
 
        private JsonNullable<? extends String> sortCode = JsonNullable.undefined();
 
        private Optional<? extends String> sourceModifiedDate = Optional.empty();
 
        private Optional<? extends BankAccountStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Account number for the bank account.
         * 
         * Xero integrations
         * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = JsonNullable.of(accountNumber);
            return this;
        }

        /**
         * Account number for the bank account.
         * 
         * Xero integrations
         * Only a UK account number shows for bank accounts with GBP currency and a combined total of sort code and account number that equals 14 digits, For non-GBP accounts, the full bank account number is populated.
         */
        public Builder accountNumber(JsonNullable<? extends String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * The type of transactions and balances on the account.  
         * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
         * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
         */
        public Builder accountType(AccountType accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        /**
         * The type of transactions and balances on the account.  
         * For Credit accounts, positive balances are liabilities, and positive transactions **reduce** liabilities.  
         * For Debit accounts, positive balances are assets, and positive transactions **increase** assets.
         */
        public Builder accountType(Optional<? extends AccountType> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }

        /**
         * The bank account's base currency.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * The bank account's base currency.
         */
        public Builder currency(JsonNullable<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Identifier for the account, unique for the company in the accounting platform.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Identifier for the account, unique for the company in the accounting platform.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the bank account in the accounting platform.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Name of the bank account in the accounting platform.
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Code used to identify each nominal account for a business.
         */
        public Builder nominalCode(String nominalCode) {
            Utils.checkNotNull(nominalCode, "nominalCode");
            this.nominalCode = JsonNullable.of(nominalCode);
            return this;
        }

        /**
         * Code used to identify each nominal account for a business.
         */
        public Builder nominalCode(JsonNullable<? extends String> nominalCode) {
            Utils.checkNotNull(nominalCode, "nominalCode");
            this.nominalCode = nominalCode;
            return this;
        }

        /**
         * Sort code for the bank account.
         * 
         * Xero integrations
         * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
         */
        public Builder sortCode(String sortCode) {
            Utils.checkNotNull(sortCode, "sortCode");
            this.sortCode = JsonNullable.of(sortCode);
            return this;
        }

        /**
         * Sort code for the bank account.
         * 
         * Xero integrations
         * The sort code is only displayed when the currency = GBP and the sort code and account number sum to 14 digits. For non-GBP accounts, this field is not populated.
         */
        public Builder sortCode(JsonNullable<? extends String> sortCode) {
            Utils.checkNotNull(sortCode, "sortCode");
            this.sortCode = sortCode;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * The current status of the bank account.
         */
        public Builder status(BankAccountStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The current status of the bank account.
         */
        public Builder status(Optional<? extends BankAccountStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public BankAccountMappingOption build() {
            return new BankAccountMappingOption(
                accountNumber,
                accountType,
                currency,
                id,
                name,
                nominalCode,
                sortCode,
                sourceModifiedDate,
                status);
        }
    }
}

