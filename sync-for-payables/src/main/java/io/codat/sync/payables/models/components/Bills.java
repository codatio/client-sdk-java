/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.payables.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Bills {

    /**
     * Amount outstanding on the bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amountDue")
    private JsonNullable<? extends Double> amountDue;

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<? extends String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dueDate")
    private Optional<? extends String> dueDate;

    /**
     * Identifier for the bill, unique for the company in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issueDate")
    private Optional<? extends String> issueDate;

    /**
     * Array of Bill line items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineItems")
    private JsonNullable<? extends java.util.List<BillLineItem>> lineItems;

    /**
     * User-friendly reference for the bill.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private JsonNullable<? extends String> reference;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private JsonNullable<? extends One> sourceModifiedDate;

    /**
     * Current state of the bill. If creating a bill the status must be `Open`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends BillStatus> status;

    /**
     * Reference to the supplier the record relates to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierRef")
    private Optional<? extends SupplierRef> supplierRef;

    /**
     * Amount of the bill, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalAmount")
    private Optional<? extends Double> totalAmount;

    public Bills(
            @JsonProperty("amountDue") JsonNullable<? extends Double> amountDue,
            @JsonProperty("currency") Optional<? extends String> currency,
            @JsonProperty("dueDate") Optional<? extends String> dueDate,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("issueDate") Optional<? extends String> issueDate,
            @JsonProperty("lineItems") JsonNullable<? extends java.util.List<BillLineItem>> lineItems,
            @JsonProperty("reference") JsonNullable<? extends String> reference,
            @JsonProperty("sourceModifiedDate") JsonNullable<? extends One> sourceModifiedDate,
            @JsonProperty("status") Optional<? extends BillStatus> status,
            @JsonProperty("supplierRef") Optional<? extends SupplierRef> supplierRef,
            @JsonProperty("totalAmount") Optional<? extends Double> totalAmount) {
        Utils.checkNotNull(amountDue, "amountDue");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(dueDate, "dueDate");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(issueDate, "issueDate");
        Utils.checkNotNull(lineItems, "lineItems");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(supplierRef, "supplierRef");
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.amountDue = amountDue;
        this.currency = currency;
        this.dueDate = dueDate;
        this.id = id;
        this.issueDate = issueDate;
        this.lineItems = lineItems;
        this.reference = reference;
        this.sourceModifiedDate = sourceModifiedDate;
        this.status = status;
        this.supplierRef = supplierRef;
        this.totalAmount = totalAmount;
    }

    /**
     * Amount outstanding on the bill.
     */
    public JsonNullable<? extends Double> amountDue() {
        return amountDue;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public Optional<? extends String> currency() {
        return currency;
    }

    public Optional<? extends String> dueDate() {
        return dueDate;
    }

    /**
     * Identifier for the bill, unique for the company in the accounting platform.
     */
    public Optional<? extends String> id() {
        return id;
    }

    public Optional<? extends String> issueDate() {
        return issueDate;
    }

    /**
     * Array of Bill line items.
     */
    public JsonNullable<? extends java.util.List<BillLineItem>> lineItems() {
        return lineItems;
    }

    /**
     * User-friendly reference for the bill.
     */
    public JsonNullable<? extends String> reference() {
        return reference;
    }

    public JsonNullable<? extends One> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    /**
     * Current state of the bill. If creating a bill the status must be `Open`.
     */
    public Optional<? extends BillStatus> status() {
        return status;
    }

    /**
     * Reference to the supplier the record relates to.
     */
    public Optional<? extends SupplierRef> supplierRef() {
        return supplierRef;
    }

    /**
     * Amount of the bill, including tax.
     */
    public Optional<? extends Double> totalAmount() {
        return totalAmount;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Amount outstanding on the bill.
     */
    public Bills withAmountDue(double amountDue) {
        Utils.checkNotNull(amountDue, "amountDue");
        this.amountDue = JsonNullable.of(amountDue);
        return this;
    }

    /**
     * Amount outstanding on the bill.
     */
    public Bills withAmountDue(JsonNullable<? extends Double> amountDue) {
        Utils.checkNotNull(amountDue, "amountDue");
        this.amountDue = amountDue;
        return this;
    }

    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public Bills withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }
    
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    public Bills withCurrency(Optional<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public Bills withDueDate(String dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = Optional.ofNullable(dueDate);
        return this;
    }
    
    public Bills withDueDate(Optional<? extends String> dueDate) {
        Utils.checkNotNull(dueDate, "dueDate");
        this.dueDate = dueDate;
        return this;
    }

    /**
     * Identifier for the bill, unique for the company in the accounting platform.
     */
    public Bills withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }
    
    /**
     * Identifier for the bill, unique for the company in the accounting platform.
     */
    public Bills withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Bills withIssueDate(String issueDate) {
        Utils.checkNotNull(issueDate, "issueDate");
        this.issueDate = Optional.ofNullable(issueDate);
        return this;
    }
    
    public Bills withIssueDate(Optional<? extends String> issueDate) {
        Utils.checkNotNull(issueDate, "issueDate");
        this.issueDate = issueDate;
        return this;
    }

    /**
     * Array of Bill line items.
     */
    public Bills withLineItems(java.util.List<BillLineItem> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = JsonNullable.of(lineItems);
        return this;
    }

    /**
     * Array of Bill line items.
     */
    public Bills withLineItems(JsonNullable<? extends java.util.List<BillLineItem>> lineItems) {
        Utils.checkNotNull(lineItems, "lineItems");
        this.lineItems = lineItems;
        return this;
    }

    /**
     * User-friendly reference for the bill.
     */
    public Bills withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = JsonNullable.of(reference);
        return this;
    }

    /**
     * User-friendly reference for the bill.
     */
    public Bills withReference(JsonNullable<? extends String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public Bills withSourceModifiedDate(One sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = JsonNullable.of(sourceModifiedDate);
        return this;
    }

    public Bills withSourceModifiedDate(JsonNullable<? extends One> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }

    /**
     * Current state of the bill. If creating a bill the status must be `Open`.
     */
    public Bills withStatus(BillStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }
    
    /**
     * Current state of the bill. If creating a bill the status must be `Open`.
     */
    public Bills withStatus(Optional<? extends BillStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Reference to the supplier the record relates to.
     */
    public Bills withSupplierRef(SupplierRef supplierRef) {
        Utils.checkNotNull(supplierRef, "supplierRef");
        this.supplierRef = Optional.ofNullable(supplierRef);
        return this;
    }
    
    /**
     * Reference to the supplier the record relates to.
     */
    public Bills withSupplierRef(Optional<? extends SupplierRef> supplierRef) {
        Utils.checkNotNull(supplierRef, "supplierRef");
        this.supplierRef = supplierRef;
        return this;
    }

    /**
     * Amount of the bill, including tax.
     */
    public Bills withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }
    
    /**
     * Amount of the bill, including tax.
     */
    public Bills withTotalAmount(Optional<? extends Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Bills other = (Bills) o;
        return 
            java.util.Objects.deepEquals(this.amountDue, other.amountDue) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.dueDate, other.dueDate) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.issueDate, other.issueDate) &&
            java.util.Objects.deepEquals(this.lineItems, other.lineItems) &&
            java.util.Objects.deepEquals(this.reference, other.reference) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.supplierRef, other.supplierRef) &&
            java.util.Objects.deepEquals(this.totalAmount, other.totalAmount);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            amountDue,
            currency,
            dueDate,
            id,
            issueDate,
            lineItems,
            reference,
            sourceModifiedDate,
            status,
            supplierRef,
            totalAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Bills.class,
                "amountDue", amountDue,
                "currency", currency,
                "dueDate", dueDate,
                "id", id,
                "issueDate", issueDate,
                "lineItems", lineItems,
                "reference", reference,
                "sourceModifiedDate", sourceModifiedDate,
                "status", status,
                "supplierRef", supplierRef,
                "totalAmount", totalAmount);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Double> amountDue = JsonNullable.undefined();
 
        private Optional<? extends String> currency = Optional.empty();
 
        private Optional<? extends String> dueDate = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> issueDate = Optional.empty();
 
        private JsonNullable<? extends java.util.List<BillLineItem>> lineItems = JsonNullable.undefined();
 
        private JsonNullable<? extends String> reference = JsonNullable.undefined();
 
        private JsonNullable<? extends One> sourceModifiedDate = JsonNullable.undefined();
 
        private Optional<? extends BillStatus> status = Optional.empty();
 
        private Optional<? extends SupplierRef> supplierRef = Optional.empty();
 
        private Optional<? extends Double> totalAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Amount outstanding on the bill.
         */
        public Builder amountDue(double amountDue) {
            Utils.checkNotNull(amountDue, "amountDue");
            this.amountDue = JsonNullable.of(amountDue);
            return this;
        }

        /**
         * Amount outstanding on the bill.
         */
        public Builder amountDue(JsonNullable<? extends Double> amountDue) {
            Utils.checkNotNull(amountDue, "amountDue");
            this.amountDue = amountDue;
            return this;
        }

        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }
        
        /**
         * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
         * 
         * ## Unknown currencies
         * 
         * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
         * 
         * There are only a very small number of edge cases where this currency code is returned by the Codat system.
         */
        public Builder currency(Optional<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder dueDate(String dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }
        
        public Builder dueDate(Optional<? extends String> dueDate) {
            Utils.checkNotNull(dueDate, "dueDate");
            this.dueDate = dueDate;
            return this;
        }

        /**
         * Identifier for the bill, unique for the company in the accounting platform.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }
        
        /**
         * Identifier for the bill, unique for the company in the accounting platform.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder issueDate(String issueDate) {
            Utils.checkNotNull(issueDate, "issueDate");
            this.issueDate = Optional.ofNullable(issueDate);
            return this;
        }
        
        public Builder issueDate(Optional<? extends String> issueDate) {
            Utils.checkNotNull(issueDate, "issueDate");
            this.issueDate = issueDate;
            return this;
        }

        /**
         * Array of Bill line items.
         */
        public Builder lineItems(java.util.List<BillLineItem> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = JsonNullable.of(lineItems);
            return this;
        }

        /**
         * Array of Bill line items.
         */
        public Builder lineItems(JsonNullable<? extends java.util.List<BillLineItem>> lineItems) {
            Utils.checkNotNull(lineItems, "lineItems");
            this.lineItems = lineItems;
            return this;
        }

        /**
         * User-friendly reference for the bill.
         */
        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = JsonNullable.of(reference);
            return this;
        }

        /**
         * User-friendly reference for the bill.
         */
        public Builder reference(JsonNullable<? extends String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }

        public Builder sourceModifiedDate(One sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = JsonNullable.of(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(JsonNullable<? extends One> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }

        /**
         * Current state of the bill. If creating a bill the status must be `Open`.
         */
        public Builder status(BillStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }
        
        /**
         * Current state of the bill. If creating a bill the status must be `Open`.
         */
        public Builder status(Optional<? extends BillStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Reference to the supplier the record relates to.
         */
        public Builder supplierRef(SupplierRef supplierRef) {
            Utils.checkNotNull(supplierRef, "supplierRef");
            this.supplierRef = Optional.ofNullable(supplierRef);
            return this;
        }
        
        /**
         * Reference to the supplier the record relates to.
         */
        public Builder supplierRef(Optional<? extends SupplierRef> supplierRef) {
            Utils.checkNotNull(supplierRef, "supplierRef");
            this.supplierRef = supplierRef;
            return this;
        }

        /**
         * Amount of the bill, including tax.
         */
        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }
        
        /**
         * Amount of the bill, including tax.
         */
        public Builder totalAmount(Optional<? extends Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }
        
        public Bills build() {
            return new Bills(
                amountDue,
                currency,
                dueDate,
                id,
                issueDate,
                lineItems,
                reference,
                sourceModifiedDate,
                status,
                supplierRef,
                totalAmount);
        }
    }
}

