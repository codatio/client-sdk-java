/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.payables.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class Bills {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pagination")
    private Optional<? extends Pagination> pagination;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("results")
    private Optional<? extends List<Bill>> results;

    @JsonCreator
    public Bills(
            @JsonProperty("pagination") Optional<? extends Pagination> pagination,
            @JsonProperty("results") Optional<? extends List<Bill>> results) {
        Utils.checkNotNull(pagination, "pagination");
        Utils.checkNotNull(results, "results");
        this.pagination = pagination;
        this.results = results;
    }
    
    public Bills() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Pagination> pagination() {
        return (Optional<Pagination>) pagination;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Bill>> results() {
        return (Optional<List<Bill>>) results;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Bills withPagination(Pagination pagination) {
        Utils.checkNotNull(pagination, "pagination");
        this.pagination = Optional.ofNullable(pagination);
        return this;
    }

    public Bills withPagination(Optional<? extends Pagination> pagination) {
        Utils.checkNotNull(pagination, "pagination");
        this.pagination = pagination;
        return this;
    }

    public Bills withResults(List<Bill> results) {
        Utils.checkNotNull(results, "results");
        this.results = Optional.ofNullable(results);
        return this;
    }

    public Bills withResults(Optional<? extends List<Bill>> results) {
        Utils.checkNotNull(results, "results");
        this.results = results;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Bills other = (Bills) o;
        return 
            Objects.deepEquals(this.pagination, other.pagination) &&
            Objects.deepEquals(this.results, other.results);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            pagination,
            results);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Bills.class,
                "pagination", pagination,
                "results", results);
    }
    
    public final static class Builder {
 
        private Optional<? extends Pagination> pagination = Optional.empty();
 
        private Optional<? extends List<Bill>> results = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder pagination(Pagination pagination) {
            Utils.checkNotNull(pagination, "pagination");
            this.pagination = Optional.ofNullable(pagination);
            return this;
        }

        public Builder pagination(Optional<? extends Pagination> pagination) {
            Utils.checkNotNull(pagination, "pagination");
            this.pagination = pagination;
            return this;
        }

        public Builder results(List<Bill> results) {
            Utils.checkNotNull(results, "results");
            this.results = Optional.ofNullable(results);
            return this;
        }

        public Builder results(Optional<? extends List<Bill>> results) {
            Utils.checkNotNull(results, "results");
            this.results = results;
            return this;
        }
        
        public Bills build() {
            return new Bills(
                pagination,
                results);
        }
    }
}

