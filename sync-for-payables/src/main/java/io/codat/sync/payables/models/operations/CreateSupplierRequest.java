/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payables.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.codat.sync.payables.models.components.SupplierPrototype;
import io.codat.sync.payables.utils.SpeakeasyMetadata;
import io.codat.sync.payables.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class CreateSupplierRequest {

    /**
     * A unique identifier to ensure idempotent behaviour for subsequent requests.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Idempotency-Key")
    private Optional<String> idempotencyKey;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * Unique identifier for a connection.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectionId")
    private String connectionId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends SupplierPrototype> supplierPrototype;

    @JsonCreator
    public CreateSupplierRequest(
            Optional<String> idempotencyKey,
            String companyId,
            String connectionId,
            Optional<? extends SupplierPrototype> supplierPrototype) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(supplierPrototype, "supplierPrototype");
        this.idempotencyKey = idempotencyKey;
        this.companyId = companyId;
        this.connectionId = connectionId;
        this.supplierPrototype = supplierPrototype;
    }
    
    public CreateSupplierRequest(
            String companyId,
            String connectionId) {
        this(Optional.empty(), companyId, connectionId, Optional.empty());
    }

    /**
     * A unique identifier to ensure idempotent behaviour for subsequent requests.
     */
    @JsonIgnore
    public Optional<String> idempotencyKey() {
        return idempotencyKey;
    }

    /**
     * Unique identifier for a company.
     */
    @JsonIgnore
    public String companyId() {
        return companyId;
    }

    /**
     * Unique identifier for a connection.
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SupplierPrototype> supplierPrototype() {
        return (Optional<SupplierPrototype>) supplierPrototype;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier to ensure idempotent behaviour for subsequent requests.
     */
    public CreateSupplierRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    /**
     * A unique identifier to ensure idempotent behaviour for subsequent requests.
     */
    public CreateSupplierRequest withIdempotencyKey(Optional<String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public CreateSupplierRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Unique identifier for a connection.
     */
    public CreateSupplierRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    public CreateSupplierRequest withSupplierPrototype(SupplierPrototype supplierPrototype) {
        Utils.checkNotNull(supplierPrototype, "supplierPrototype");
        this.supplierPrototype = Optional.ofNullable(supplierPrototype);
        return this;
    }

    public CreateSupplierRequest withSupplierPrototype(Optional<? extends SupplierPrototype> supplierPrototype) {
        Utils.checkNotNull(supplierPrototype, "supplierPrototype");
        this.supplierPrototype = supplierPrototype;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSupplierRequest other = (CreateSupplierRequest) o;
        return 
            Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.supplierPrototype, other.supplierPrototype);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            idempotencyKey,
            companyId,
            connectionId,
            supplierPrototype);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSupplierRequest.class,
                "idempotencyKey", idempotencyKey,
                "companyId", companyId,
                "connectionId", connectionId,
                "supplierPrototype", supplierPrototype);
    }
    
    public final static class Builder {
 
        private Optional<String> idempotencyKey = Optional.empty();
 
        private String companyId;
 
        private String connectionId;
 
        private Optional<? extends SupplierPrototype> supplierPrototype = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier to ensure idempotent behaviour for subsequent requests.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique identifier to ensure idempotent behaviour for subsequent requests.
         */
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Unique identifier for a connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        public Builder supplierPrototype(SupplierPrototype supplierPrototype) {
            Utils.checkNotNull(supplierPrototype, "supplierPrototype");
            this.supplierPrototype = Optional.ofNullable(supplierPrototype);
            return this;
        }

        public Builder supplierPrototype(Optional<? extends SupplierPrototype> supplierPrototype) {
            Utils.checkNotNull(supplierPrototype, "supplierPrototype");
            this.supplierPrototype = supplierPrototype;
            return this;
        }
        
        public CreateSupplierRequest build() {
            return new CreateSupplierRequest(
                idempotencyKey,
                companyId,
                connectionId,
                supplierPrototype);
        }
    }
}

