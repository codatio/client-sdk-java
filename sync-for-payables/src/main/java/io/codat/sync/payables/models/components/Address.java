/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.payables.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Address {

    /**
     * City of the customer address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private JsonNullable<String> city;

    /**
     * Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private JsonNullable<String> country;

    /**
     * Line 1 of the customer address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line1")
    private JsonNullable<String> line1;

    /**
     * Line 2 of the customer address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line2")
    private JsonNullable<String> line2;

    /**
     * Postal code or zip code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    private JsonNullable<String> postalCode;

    /**
     * Region of the customer address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    private JsonNullable<String> region;

    /**
     * The type of the address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AddressType> type;

    @JsonCreator
    public Address(
            @JsonProperty("city") JsonNullable<String> city,
            @JsonProperty("country") JsonNullable<String> country,
            @JsonProperty("line1") JsonNullable<String> line1,
            @JsonProperty("line2") JsonNullable<String> line2,
            @JsonProperty("postalCode") JsonNullable<String> postalCode,
            @JsonProperty("region") JsonNullable<String> region,
            @JsonProperty("type") Optional<? extends AddressType> type) {
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(line1, "line1");
        Utils.checkNotNull(line2, "line2");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(region, "region");
        Utils.checkNotNull(type, "type");
        this.city = city;
        this.country = country;
        this.line1 = line1;
        this.line2 = line2;
        this.postalCode = postalCode;
        this.region = region;
        this.type = type;
    }
    
    public Address() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * City of the customer address.
     */
    @JsonIgnore
    public JsonNullable<String> city() {
        return city;
    }

    /**
     * Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code.
     */
    @JsonIgnore
    public JsonNullable<String> country() {
        return country;
    }

    /**
     * Line 1 of the customer address.
     */
    @JsonIgnore
    public JsonNullable<String> line1() {
        return line1;
    }

    /**
     * Line 2 of the customer address.
     */
    @JsonIgnore
    public JsonNullable<String> line2() {
        return line2;
    }

    /**
     * Postal code or zip code.
     */
    @JsonIgnore
    public JsonNullable<String> postalCode() {
        return postalCode;
    }

    /**
     * Region of the customer address.
     */
    @JsonIgnore
    public JsonNullable<String> region() {
        return region;
    }

    /**
     * The type of the address
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AddressType> type() {
        return (Optional<AddressType>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * City of the customer address.
     */
    public Address withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = JsonNullable.of(city);
        return this;
    }

    /**
     * City of the customer address.
     */
    public Address withCity(JsonNullable<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code.
     */
    public Address withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = JsonNullable.of(country);
        return this;
    }

    /**
     * Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code.
     */
    public Address withCountry(JsonNullable<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * Line 1 of the customer address.
     */
    public Address withLine1(String line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = JsonNullable.of(line1);
        return this;
    }

    /**
     * Line 1 of the customer address.
     */
    public Address withLine1(JsonNullable<String> line1) {
        Utils.checkNotNull(line1, "line1");
        this.line1 = line1;
        return this;
    }

    /**
     * Line 2 of the customer address.
     */
    public Address withLine2(String line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = JsonNullable.of(line2);
        return this;
    }

    /**
     * Line 2 of the customer address.
     */
    public Address withLine2(JsonNullable<String> line2) {
        Utils.checkNotNull(line2, "line2");
        this.line2 = line2;
        return this;
    }

    /**
     * Postal code or zip code.
     */
    public Address withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = JsonNullable.of(postalCode);
        return this;
    }

    /**
     * Postal code or zip code.
     */
    public Address withPostalCode(JsonNullable<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Region of the customer address.
     */
    public Address withRegion(String region) {
        Utils.checkNotNull(region, "region");
        this.region = JsonNullable.of(region);
        return this;
    }

    /**
     * Region of the customer address.
     */
    public Address withRegion(JsonNullable<String> region) {
        Utils.checkNotNull(region, "region");
        this.region = region;
        return this;
    }

    /**
     * The type of the address
     */
    public Address withType(AddressType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of the address
     */
    public Address withType(Optional<? extends AddressType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Address other = (Address) o;
        return 
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.line1, other.line1) &&
            Objects.deepEquals(this.line2, other.line2) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.region, other.region) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            city,
            country,
            line1,
            line2,
            postalCode,
            region,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Address.class,
                "city", city,
                "country", country,
                "line1", line1,
                "line2", line2,
                "postalCode", postalCode,
                "region", region,
                "type", type);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> city = JsonNullable.undefined();
 
        private JsonNullable<String> country = JsonNullable.undefined();
 
        private JsonNullable<String> line1 = JsonNullable.undefined();
 
        private JsonNullable<String> line2 = JsonNullable.undefined();
 
        private JsonNullable<String> postalCode = JsonNullable.undefined();
 
        private JsonNullable<String> region = JsonNullable.undefined();
 
        private Optional<? extends AddressType> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * City of the customer address.
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = JsonNullable.of(city);
            return this;
        }

        /**
         * City of the customer address.
         */
        public Builder city(JsonNullable<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = JsonNullable.of(country);
            return this;
        }

        /**
         * Country of the customer's address. For NetSuite, use the 2-digit [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes) country code.
         */
        public Builder country(JsonNullable<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * Line 1 of the customer address.
         */
        public Builder line1(String line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = JsonNullable.of(line1);
            return this;
        }

        /**
         * Line 1 of the customer address.
         */
        public Builder line1(JsonNullable<String> line1) {
            Utils.checkNotNull(line1, "line1");
            this.line1 = line1;
            return this;
        }

        /**
         * Line 2 of the customer address.
         */
        public Builder line2(String line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = JsonNullable.of(line2);
            return this;
        }

        /**
         * Line 2 of the customer address.
         */
        public Builder line2(JsonNullable<String> line2) {
            Utils.checkNotNull(line2, "line2");
            this.line2 = line2;
            return this;
        }

        /**
         * Postal code or zip code.
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = JsonNullable.of(postalCode);
            return this;
        }

        /**
         * Postal code or zip code.
         */
        public Builder postalCode(JsonNullable<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        /**
         * Region of the customer address.
         */
        public Builder region(String region) {
            Utils.checkNotNull(region, "region");
            this.region = JsonNullable.of(region);
            return this;
        }

        /**
         * Region of the customer address.
         */
        public Builder region(JsonNullable<String> region) {
            Utils.checkNotNull(region, "region");
            this.region = region;
            return this;
        }

        /**
         * The type of the address
         */
        public Builder type(AddressType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of the address
         */
        public Builder type(Optional<? extends AddressType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Address build() {
            return new Address(
                city,
                country,
                line1,
                line2,
                postalCode,
                region,
                type);
        }
    }
}

