/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.payables.models.components;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.payables.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Attachment -   The Codat API supports pulling and pushing of file attachments for invoices, bills, direct costs, and direct incomes.
 * 
 *   &gt; **Retrieving attachments**
 *   &gt; 
 *   &gt; If a company is authorized, you can query the Codat API to read, download, and upload attachments without requiring a fresh sync of data.
 * 
 *   Unlike other data types, Codat doesn't support [sync settings](https://docs.codat.io/knowledge-base/advanced-sync-settings) for attachments.
 * 
 *   Note that different integrations have different requirements for file size and extension of attachments.
 * 
 *   | Integration       | File size | File extension                                                                                                                                               |
 *   |-------------------|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------|
 *   | Xero              | 4 MB      | 7Z, BMP, CSV, DOC, DOCX, EML, GIF, JPEG, JPG, KEYNOTE, MSG, NUMBERS, ODF,   ODS, ODT, PAGES, PDF, PNG, PPT, PPTX, RAR, RTF, TIF, TIFF, TXT, XLS, XLSX,   ZIP |
 *   | QuickBooks Online | 100 MB    | AI, CSV, DOC, DOCX, EPS, GIF, JPEG, JPG, ODS, PAGES, PDF, PNG, RTF, TIF,   TXT, XLS, XLSX, XML                                                               |
 *   | NetSuite          | 100 MB    | BMP, CSV, XLS, XLSX, JSON, PDF, PJPG, PJPEG, PNG, TXT, SVG, TIF, TIFF,   DOC, DOCX, ZIP                                                                      |
 *   | Dynamics 365 Business Central          | 350 MB    | Dynamics do not explicitly outline which file types are supported but they do state &lt;a className="external" href="https://learn.microsoft.com/en-gb/dynamics365/business-central/ui-how-add-link-to-record#to-attach-a-file-to-a-purchase-invoice" target="_blank"&gt;here&lt;/a&gt; that "You can attach any type of file, such as text, image, or video files".                                                                   |
 */

public class Attachment {

    /**
     * File type of the attachment. This is represented by appending the file type to the [IETF standard file naming requirements](https://tools.ietf.org/html/rfc6838). For example, for a jpeg file the output is **image/jpeg**.
     * 
     * Supported file types vary per platform. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentType")
    private JsonNullable<? extends String> contentType;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateCreated")
    private Optional<? extends String> dateCreated;

    /**
     * File size in bytes. For example, if this reads **46153**, then the file size is 46kb.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileSize")
    private JsonNullable<? extends Integer> fileSize;

    /**
     * Identifier for the attachment, unique for the company in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * If `true`, then the attachment is included with the associated invoice, bill or direct costs when it is printed, emailed, or sent to a customer, if the underlying accounting platform allows this.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeWhenSent")
    private Optional<? extends Boolean> includeWhenSent;

    /**
     * Name of the attachment file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceModifiedDate")
    private Optional<? extends String> sourceModifiedDate;

    public Attachment(
            @JsonProperty("contentType") JsonNullable<? extends String> contentType,
            @JsonProperty("dateCreated") Optional<? extends String> dateCreated,
            @JsonProperty("fileSize") JsonNullable<? extends Integer> fileSize,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("includeWhenSent") Optional<? extends Boolean> includeWhenSent,
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("sourceModifiedDate") Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(contentType, "contentType");
        Utils.checkNotNull(dateCreated, "dateCreated");
        Utils.checkNotNull(fileSize, "fileSize");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(includeWhenSent, "includeWhenSent");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.contentType = contentType;
        this.dateCreated = dateCreated;
        this.fileSize = fileSize;
        this.id = id;
        this.includeWhenSent = includeWhenSent;
        this.name = name;
        this.sourceModifiedDate = sourceModifiedDate;
    }

    /**
     * File type of the attachment. This is represented by appending the file type to the [IETF standard file naming requirements](https://tools.ietf.org/html/rfc6838). For example, for a jpeg file the output is **image/jpeg**.
     * 
     * Supported file types vary per platform. 
     */
    public JsonNullable<? extends String> contentType() {
        return contentType;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> dateCreated() {
        return dateCreated;
    }

    /**
     * File size in bytes. For example, if this reads **46153**, then the file size is 46kb.
     */
    public JsonNullable<? extends Integer> fileSize() {
        return fileSize;
    }

    /**
     * Identifier for the attachment, unique for the company in the accounting platform.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * If `true`, then the attachment is included with the associated invoice, bill or direct costs when it is printed, emailed, or sent to a customer, if the underlying accounting platform allows this.
     */
    public Optional<? extends Boolean> includeWhenSent() {
        return includeWhenSent;
    }

    /**
     * Name of the attachment file.
     */
    public JsonNullable<? extends String> name() {
        return name;
    }

    public Optional<? extends String> sourceModifiedDate() {
        return sourceModifiedDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * File type of the attachment. This is represented by appending the file type to the [IETF standard file naming requirements](https://tools.ietf.org/html/rfc6838). For example, for a jpeg file the output is **image/jpeg**.
     * 
     * Supported file types vary per platform. 
     */
    public Attachment withContentType(String contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = JsonNullable.of(contentType);
        return this;
    }

    /**
     * File type of the attachment. This is represented by appending the file type to the [IETF standard file naming requirements](https://tools.ietf.org/html/rfc6838). For example, for a jpeg file the output is **image/jpeg**.
     * 
     * Supported file types vary per platform. 
     */
    public Attachment withContentType(JsonNullable<? extends String> contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Attachment withDateCreated(String dateCreated) {
        Utils.checkNotNull(dateCreated, "dateCreated");
        this.dateCreated = Optional.ofNullable(dateCreated);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Attachment withDateCreated(Optional<? extends String> dateCreated) {
        Utils.checkNotNull(dateCreated, "dateCreated");
        this.dateCreated = dateCreated;
        return this;
    }

    /**
     * File size in bytes. For example, if this reads **46153**, then the file size is 46kb.
     */
    public Attachment withFileSize(int fileSize) {
        Utils.checkNotNull(fileSize, "fileSize");
        this.fileSize = JsonNullable.of(fileSize);
        return this;
    }

    /**
     * File size in bytes. For example, if this reads **46153**, then the file size is 46kb.
     */
    public Attachment withFileSize(JsonNullable<? extends Integer> fileSize) {
        Utils.checkNotNull(fileSize, "fileSize");
        this.fileSize = fileSize;
        return this;
    }

    /**
     * Identifier for the attachment, unique for the company in the accounting platform.
     */
    public Attachment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Identifier for the attachment, unique for the company in the accounting platform.
     */
    public Attachment withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * If `true`, then the attachment is included with the associated invoice, bill or direct costs when it is printed, emailed, or sent to a customer, if the underlying accounting platform allows this.
     */
    public Attachment withIncludeWhenSent(boolean includeWhenSent) {
        Utils.checkNotNull(includeWhenSent, "includeWhenSent");
        this.includeWhenSent = Optional.ofNullable(includeWhenSent);
        return this;
    }

    /**
     * If `true`, then the attachment is included with the associated invoice, bill or direct costs when it is printed, emailed, or sent to a customer, if the underlying accounting platform allows this.
     */
    public Attachment withIncludeWhenSent(Optional<? extends Boolean> includeWhenSent) {
        Utils.checkNotNull(includeWhenSent, "includeWhenSent");
        this.includeWhenSent = includeWhenSent;
        return this;
    }

    /**
     * Name of the attachment file.
     */
    public Attachment withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Name of the attachment file.
     */
    public Attachment withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Attachment withSourceModifiedDate(String sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
        return this;
    }

    public Attachment withSourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
        Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
        this.sourceModifiedDate = sourceModifiedDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Attachment other = (Attachment) o;
        return 
            java.util.Objects.deepEquals(this.contentType, other.contentType) &&
            java.util.Objects.deepEquals(this.dateCreated, other.dateCreated) &&
            java.util.Objects.deepEquals(this.fileSize, other.fileSize) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.includeWhenSent, other.includeWhenSent) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.sourceModifiedDate, other.sourceModifiedDate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            contentType,
            dateCreated,
            fileSize,
            id,
            includeWhenSent,
            name,
            sourceModifiedDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Attachment.class,
                "contentType", contentType,
                "dateCreated", dateCreated,
                "fileSize", fileSize,
                "id", id,
                "includeWhenSent", includeWhenSent,
                "name", name,
                "sourceModifiedDate", sourceModifiedDate);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> contentType = JsonNullable.undefined();
 
        private Optional<? extends String> dateCreated = Optional.empty();
 
        private JsonNullable<? extends Integer> fileSize = JsonNullable.undefined();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Boolean> includeWhenSent = Optional.empty();
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private Optional<? extends String> sourceModifiedDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * File type of the attachment. This is represented by appending the file type to the [IETF standard file naming requirements](https://tools.ietf.org/html/rfc6838). For example, for a jpeg file the output is **image/jpeg**.
         * 
         * Supported file types vary per platform. 
         */
        public Builder contentType(String contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = JsonNullable.of(contentType);
            return this;
        }

        /**
         * File type of the attachment. This is represented by appending the file type to the [IETF standard file naming requirements](https://tools.ietf.org/html/rfc6838). For example, for a jpeg file the output is **image/jpeg**.
         * 
         * Supported file types vary per platform. 
         */
        public Builder contentType(JsonNullable<? extends String> contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder dateCreated(String dateCreated) {
            Utils.checkNotNull(dateCreated, "dateCreated");
            this.dateCreated = Optional.ofNullable(dateCreated);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder dateCreated(Optional<? extends String> dateCreated) {
            Utils.checkNotNull(dateCreated, "dateCreated");
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * File size in bytes. For example, if this reads **46153**, then the file size is 46kb.
         */
        public Builder fileSize(int fileSize) {
            Utils.checkNotNull(fileSize, "fileSize");
            this.fileSize = JsonNullable.of(fileSize);
            return this;
        }

        /**
         * File size in bytes. For example, if this reads **46153**, then the file size is 46kb.
         */
        public Builder fileSize(JsonNullable<? extends Integer> fileSize) {
            Utils.checkNotNull(fileSize, "fileSize");
            this.fileSize = fileSize;
            return this;
        }

        /**
         * Identifier for the attachment, unique for the company in the accounting platform.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Identifier for the attachment, unique for the company in the accounting platform.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * If `true`, then the attachment is included with the associated invoice, bill or direct costs when it is printed, emailed, or sent to a customer, if the underlying accounting platform allows this.
         */
        public Builder includeWhenSent(boolean includeWhenSent) {
            Utils.checkNotNull(includeWhenSent, "includeWhenSent");
            this.includeWhenSent = Optional.ofNullable(includeWhenSent);
            return this;
        }

        /**
         * If `true`, then the attachment is included with the associated invoice, bill or direct costs when it is printed, emailed, or sent to a customer, if the underlying accounting platform allows this.
         */
        public Builder includeWhenSent(Optional<? extends Boolean> includeWhenSent) {
            Utils.checkNotNull(includeWhenSent, "includeWhenSent");
            this.includeWhenSent = includeWhenSent;
            return this;
        }

        /**
         * Name of the attachment file.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Name of the attachment file.
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sourceModifiedDate(String sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = Optional.ofNullable(sourceModifiedDate);
            return this;
        }

        public Builder sourceModifiedDate(Optional<? extends String> sourceModifiedDate) {
            Utils.checkNotNull(sourceModifiedDate, "sourceModifiedDate");
            this.sourceModifiedDate = sourceModifiedDate;
            return this;
        }
        
        public Attachment build() {
            return new Attachment(
                contentType,
                dateCreated,
                fileSize,
                id,
                includeWhenSent,
                name,
                sourceModifiedDate);
        }
    }
}

