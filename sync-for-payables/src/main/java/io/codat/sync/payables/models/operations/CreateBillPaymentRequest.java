/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.payables.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.payables.utils.SpeakeasyMetadata;
import io.codat.sync.payables.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateBillPaymentRequest {

    /**
     * A unique identifier to ensure idempotent behaviour for subsequent requests.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Idempotency-Key")
    private Optional<? extends String> idempotencyKey;

    /**
     * Unique identifier for a bill.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=billId")
    private String billId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends io.codat.sync.payables.models.components.BillPaymentPrototype> billPaymentPrototype;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * Unique identifier for a connection.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectionId")
    private String connectionId;

    public CreateBillPaymentRequest(
            Optional<? extends String> idempotencyKey,
            String billId,
            Optional<? extends io.codat.sync.payables.models.components.BillPaymentPrototype> billPaymentPrototype,
            String companyId,
            String connectionId) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        Utils.checkNotNull(billId, "billId");
        Utils.checkNotNull(billPaymentPrototype, "billPaymentPrototype");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(connectionId, "connectionId");
        this.idempotencyKey = idempotencyKey;
        this.billId = billId;
        this.billPaymentPrototype = billPaymentPrototype;
        this.companyId = companyId;
        this.connectionId = connectionId;
    }

    /**
     * A unique identifier to ensure idempotent behaviour for subsequent requests.
     */
    public Optional<? extends String> idempotencyKey() {
        return idempotencyKey;
    }

    /**
     * Unique identifier for a bill.
     */
    public String billId() {
        return billId;
    }

    public Optional<? extends io.codat.sync.payables.models.components.BillPaymentPrototype> billPaymentPrototype() {
        return billPaymentPrototype;
    }

    /**
     * Unique identifier for a company.
     */
    public String companyId() {
        return companyId;
    }

    /**
     * Unique identifier for a connection.
     */
    public String connectionId() {
        return connectionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier to ensure idempotent behaviour for subsequent requests.
     */
    public CreateBillPaymentRequest withIdempotencyKey(String idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = Optional.ofNullable(idempotencyKey);
        return this;
    }

    /**
     * A unique identifier to ensure idempotent behaviour for subsequent requests.
     */
    public CreateBillPaymentRequest withIdempotencyKey(Optional<? extends String> idempotencyKey) {
        Utils.checkNotNull(idempotencyKey, "idempotencyKey");
        this.idempotencyKey = idempotencyKey;
        return this;
    }

    /**
     * Unique identifier for a bill.
     */
    public CreateBillPaymentRequest withBillId(String billId) {
        Utils.checkNotNull(billId, "billId");
        this.billId = billId;
        return this;
    }

    public CreateBillPaymentRequest withBillPaymentPrototype(io.codat.sync.payables.models.components.BillPaymentPrototype billPaymentPrototype) {
        Utils.checkNotNull(billPaymentPrototype, "billPaymentPrototype");
        this.billPaymentPrototype = Optional.ofNullable(billPaymentPrototype);
        return this;
    }

    public CreateBillPaymentRequest withBillPaymentPrototype(Optional<? extends io.codat.sync.payables.models.components.BillPaymentPrototype> billPaymentPrototype) {
        Utils.checkNotNull(billPaymentPrototype, "billPaymentPrototype");
        this.billPaymentPrototype = billPaymentPrototype;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public CreateBillPaymentRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Unique identifier for a connection.
     */
    public CreateBillPaymentRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateBillPaymentRequest other = (CreateBillPaymentRequest) o;
        return 
            java.util.Objects.deepEquals(this.idempotencyKey, other.idempotencyKey) &&
            java.util.Objects.deepEquals(this.billId, other.billId) &&
            java.util.Objects.deepEquals(this.billPaymentPrototype, other.billPaymentPrototype) &&
            java.util.Objects.deepEquals(this.companyId, other.companyId) &&
            java.util.Objects.deepEquals(this.connectionId, other.connectionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            idempotencyKey,
            billId,
            billPaymentPrototype,
            companyId,
            connectionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateBillPaymentRequest.class,
                "idempotencyKey", idempotencyKey,
                "billId", billId,
                "billPaymentPrototype", billPaymentPrototype,
                "companyId", companyId,
                "connectionId", connectionId);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> idempotencyKey = Optional.empty();
 
        private String billId;
 
        private Optional<? extends io.codat.sync.payables.models.components.BillPaymentPrototype> billPaymentPrototype = Optional.empty();
 
        private String companyId;
 
        private String connectionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier to ensure idempotent behaviour for subsequent requests.
         */
        public Builder idempotencyKey(String idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * A unique identifier to ensure idempotent behaviour for subsequent requests.
         */
        public Builder idempotencyKey(Optional<? extends String> idempotencyKey) {
            Utils.checkNotNull(idempotencyKey, "idempotencyKey");
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        /**
         * Unique identifier for a bill.
         */
        public Builder billId(String billId) {
            Utils.checkNotNull(billId, "billId");
            this.billId = billId;
            return this;
        }

        public Builder billPaymentPrototype(io.codat.sync.payables.models.components.BillPaymentPrototype billPaymentPrototype) {
            Utils.checkNotNull(billPaymentPrototype, "billPaymentPrototype");
            this.billPaymentPrototype = Optional.ofNullable(billPaymentPrototype);
            return this;
        }

        public Builder billPaymentPrototype(Optional<? extends io.codat.sync.payables.models.components.BillPaymentPrototype> billPaymentPrototype) {
            Utils.checkNotNull(billPaymentPrototype, "billPaymentPrototype");
            this.billPaymentPrototype = billPaymentPrototype;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Unique identifier for a connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }
        
        public CreateBillPaymentRequest build() {
            return new CreateBillPaymentRequest(
                idempotencyKey,
                billId,
                billPaymentPrototype,
                companyId,
                connectionId);
        }
    }
}

