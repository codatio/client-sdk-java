/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountInfo {

    /**
     * In Codat's data model, dates are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date fields are formatted as strings; for example:
     * ```
     * 2020-10-08
     * ```
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountOpenDate")
    private JsonNullable<String> accountOpenDate;

    /**
     * Balance of funds available for use. This includes pending activity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availableBalance")
    private JsonNullable<? extends BigDecimal> availableBalance;

    /**
     * Description of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private JsonNullable<String> description;

    /**
     * Name given to the account by the user. Used in UIs to assist in account selection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickname")
    private JsonNullable<String> nickname;

    @JsonCreator
    public AccountInfo(
            @JsonProperty("accountOpenDate") JsonNullable<String> accountOpenDate,
            @JsonProperty("availableBalance") JsonNullable<? extends BigDecimal> availableBalance,
            @JsonProperty("description") JsonNullable<String> description,
            @JsonProperty("nickname") JsonNullable<String> nickname) {
        Utils.checkNotNull(accountOpenDate, "accountOpenDate");
        Utils.checkNotNull(availableBalance, "availableBalance");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(nickname, "nickname");
        this.accountOpenDate = accountOpenDate;
        this.availableBalance = availableBalance;
        this.description = description;
        this.nickname = nickname;
    }
    
    public AccountInfo() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * In Codat's data model, dates are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date fields are formatted as strings; for example:
     * ```
     * 2020-10-08
     * ```
     */
    @JsonIgnore
    public JsonNullable<String> accountOpenDate() {
        return accountOpenDate;
    }

    /**
     * Balance of funds available for use. This includes pending activity.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> availableBalance() {
        return (JsonNullable<BigDecimal>) availableBalance;
    }

    /**
     * Description of the account.
     */
    @JsonIgnore
    public JsonNullable<String> description() {
        return description;
    }

    /**
     * Name given to the account by the user. Used in UIs to assist in account selection.
     */
    @JsonIgnore
    public JsonNullable<String> nickname() {
        return nickname;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * In Codat's data model, dates are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date fields are formatted as strings; for example:
     * ```
     * 2020-10-08
     * ```
     */
    public AccountInfo withAccountOpenDate(String accountOpenDate) {
        Utils.checkNotNull(accountOpenDate, "accountOpenDate");
        this.accountOpenDate = JsonNullable.of(accountOpenDate);
        return this;
    }

    /**
     * In Codat's data model, dates are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date fields are formatted as strings; for example:
     * ```
     * 2020-10-08
     * ```
     */
    public AccountInfo withAccountOpenDate(JsonNullable<String> accountOpenDate) {
        Utils.checkNotNull(accountOpenDate, "accountOpenDate");
        this.accountOpenDate = accountOpenDate;
        return this;
    }

    /**
     * Balance of funds available for use. This includes pending activity.
     */
    public AccountInfo withAvailableBalance(BigDecimal availableBalance) {
        Utils.checkNotNull(availableBalance, "availableBalance");
        this.availableBalance = JsonNullable.of(availableBalance);
        return this;
    }

        /**
         * Balance of funds available for use. This includes pending activity.
         */
    public AccountInfo withAvailableBalance(double availableBalance) {
        this.availableBalance = JsonNullable.of(BigDecimal.valueOf(availableBalance));
        return this;
    }

    /**
     * Balance of funds available for use. This includes pending activity.
     */
    public AccountInfo withAvailableBalance(JsonNullable<? extends BigDecimal> availableBalance) {
        Utils.checkNotNull(availableBalance, "availableBalance");
        this.availableBalance = availableBalance;
        return this;
    }

    /**
     * Description of the account.
     */
    public AccountInfo withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = JsonNullable.of(description);
        return this;
    }

    /**
     * Description of the account.
     */
    public AccountInfo withDescription(JsonNullable<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Name given to the account by the user. Used in UIs to assist in account selection.
     */
    public AccountInfo withNickname(String nickname) {
        Utils.checkNotNull(nickname, "nickname");
        this.nickname = JsonNullable.of(nickname);
        return this;
    }

    /**
     * Name given to the account by the user. Used in UIs to assist in account selection.
     */
    public AccountInfo withNickname(JsonNullable<String> nickname) {
        Utils.checkNotNull(nickname, "nickname");
        this.nickname = nickname;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountInfo other = (AccountInfo) o;
        return 
            Objects.deepEquals(this.accountOpenDate, other.accountOpenDate) &&
            Objects.deepEquals(this.availableBalance, other.availableBalance) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.nickname, other.nickname);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountOpenDate,
            availableBalance,
            description,
            nickname);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountInfo.class,
                "accountOpenDate", accountOpenDate,
                "availableBalance", availableBalance,
                "description", description,
                "nickname", nickname);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> accountOpenDate = JsonNullable.undefined();
 
        private JsonNullable<? extends BigDecimal> availableBalance = JsonNullable.undefined();
 
        private JsonNullable<String> description = JsonNullable.undefined();
 
        private JsonNullable<String> nickname = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In Codat's data model, dates are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date fields are formatted as strings; for example:
         * ```
         * 2020-10-08
         * ```
         */
        public Builder accountOpenDate(String accountOpenDate) {
            Utils.checkNotNull(accountOpenDate, "accountOpenDate");
            this.accountOpenDate = JsonNullable.of(accountOpenDate);
            return this;
        }

        /**
         * In Codat's data model, dates are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date fields are formatted as strings; for example:
         * ```
         * 2020-10-08
         * ```
         */
        public Builder accountOpenDate(JsonNullable<String> accountOpenDate) {
            Utils.checkNotNull(accountOpenDate, "accountOpenDate");
            this.accountOpenDate = accountOpenDate;
            return this;
        }

        /**
         * Balance of funds available for use. This includes pending activity.
         */
        public Builder availableBalance(BigDecimal availableBalance) {
            Utils.checkNotNull(availableBalance, "availableBalance");
            this.availableBalance = JsonNullable.of(availableBalance);
            return this;
        }

        /**
         * Balance of funds available for use. This includes pending activity.
         */
        public Builder availableBalance(double availableBalance) {
            this.availableBalance = JsonNullable.of(BigDecimal.valueOf(availableBalance));
            return this;
        }

        /**
         * Balance of funds available for use. This includes pending activity.
         */
        public Builder availableBalance(JsonNullable<? extends BigDecimal> availableBalance) {
            Utils.checkNotNull(availableBalance, "availableBalance");
            this.availableBalance = availableBalance;
            return this;
        }

        /**
         * Description of the account.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = JsonNullable.of(description);
            return this;
        }

        /**
         * Description of the account.
         */
        public Builder description(JsonNullable<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Name given to the account by the user. Used in UIs to assist in account selection.
         */
        public Builder nickname(String nickname) {
            Utils.checkNotNull(nickname, "nickname");
            this.nickname = JsonNullable.of(nickname);
            return this;
        }

        /**
         * Name given to the account by the user. Used in UIs to assist in account selection.
         */
        public Builder nickname(JsonNullable<String> nickname) {
            Utils.checkNotNull(nickname, "nickname");
            this.nickname = nickname;
            return this;
        }
        
        public AccountInfo build() {
            return new AccountInfo(
                accountOpenDate,
                availableBalance,
                description,
                nickname);
        }
    }
}

