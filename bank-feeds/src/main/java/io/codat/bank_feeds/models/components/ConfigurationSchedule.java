/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ConfigurationSchedule {

    /**
     * The available sync frequencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequencyOptions")
    private Optional<? extends List<String>> frequencyOptions;

    /**
     * The sync frequency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedFrequency")
    private Optional<String> selectedFrequency;

    /**
     * The datetime in UTC you want to start syncing from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private Optional<String> startDate;

    /**
     * The hour in which the sync is initiated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncHourUtc")
    private Optional<Long> syncHourUtc;

    /**
     * The [IANA](https://www.iana.org/time-zones) time zone ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeZoneIanaId")
    private Optional<String> timeZoneIanaId;

    @JsonCreator
    public ConfigurationSchedule(
            @JsonProperty("frequencyOptions") Optional<? extends List<String>> frequencyOptions,
            @JsonProperty("selectedFrequency") Optional<String> selectedFrequency,
            @JsonProperty("startDate") Optional<String> startDate,
            @JsonProperty("syncHourUtc") Optional<Long> syncHourUtc,
            @JsonProperty("timeZoneIanaId") Optional<String> timeZoneIanaId) {
        Utils.checkNotNull(frequencyOptions, "frequencyOptions");
        Utils.checkNotNull(selectedFrequency, "selectedFrequency");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(syncHourUtc, "syncHourUtc");
        Utils.checkNotNull(timeZoneIanaId, "timeZoneIanaId");
        this.frequencyOptions = frequencyOptions;
        this.selectedFrequency = selectedFrequency;
        this.startDate = startDate;
        this.syncHourUtc = syncHourUtc;
        this.timeZoneIanaId = timeZoneIanaId;
    }
    
    public ConfigurationSchedule() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The available sync frequencies.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> frequencyOptions() {
        return (Optional<List<String>>) frequencyOptions;
    }

    /**
     * The sync frequency.
     */
    @JsonIgnore
    public Optional<String> selectedFrequency() {
        return selectedFrequency;
    }

    /**
     * The datetime in UTC you want to start syncing from.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * The hour in which the sync is initiated.
     */
    @JsonIgnore
    public Optional<Long> syncHourUtc() {
        return syncHourUtc;
    }

    /**
     * The [IANA](https://www.iana.org/time-zones) time zone ID.
     */
    @JsonIgnore
    public Optional<String> timeZoneIanaId() {
        return timeZoneIanaId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The available sync frequencies.
     */
    public ConfigurationSchedule withFrequencyOptions(List<String> frequencyOptions) {
        Utils.checkNotNull(frequencyOptions, "frequencyOptions");
        this.frequencyOptions = Optional.ofNullable(frequencyOptions);
        return this;
    }

    /**
     * The available sync frequencies.
     */
    public ConfigurationSchedule withFrequencyOptions(Optional<? extends List<String>> frequencyOptions) {
        Utils.checkNotNull(frequencyOptions, "frequencyOptions");
        this.frequencyOptions = frequencyOptions;
        return this;
    }

    /**
     * The sync frequency.
     */
    public ConfigurationSchedule withSelectedFrequency(String selectedFrequency) {
        Utils.checkNotNull(selectedFrequency, "selectedFrequency");
        this.selectedFrequency = Optional.ofNullable(selectedFrequency);
        return this;
    }

    /**
     * The sync frequency.
     */
    public ConfigurationSchedule withSelectedFrequency(Optional<String> selectedFrequency) {
        Utils.checkNotNull(selectedFrequency, "selectedFrequency");
        this.selectedFrequency = selectedFrequency;
        return this;
    }

    /**
     * The datetime in UTC you want to start syncing from.
     */
    public ConfigurationSchedule withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The datetime in UTC you want to start syncing from.
     */
    public ConfigurationSchedule withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The hour in which the sync is initiated.
     */
    public ConfigurationSchedule withSyncHourUtc(long syncHourUtc) {
        Utils.checkNotNull(syncHourUtc, "syncHourUtc");
        this.syncHourUtc = Optional.ofNullable(syncHourUtc);
        return this;
    }

    /**
     * The hour in which the sync is initiated.
     */
    public ConfigurationSchedule withSyncHourUtc(Optional<Long> syncHourUtc) {
        Utils.checkNotNull(syncHourUtc, "syncHourUtc");
        this.syncHourUtc = syncHourUtc;
        return this;
    }

    /**
     * The [IANA](https://www.iana.org/time-zones) time zone ID.
     */
    public ConfigurationSchedule withTimeZoneIanaId(String timeZoneIanaId) {
        Utils.checkNotNull(timeZoneIanaId, "timeZoneIanaId");
        this.timeZoneIanaId = Optional.ofNullable(timeZoneIanaId);
        return this;
    }

    /**
     * The [IANA](https://www.iana.org/time-zones) time zone ID.
     */
    public ConfigurationSchedule withTimeZoneIanaId(Optional<String> timeZoneIanaId) {
        Utils.checkNotNull(timeZoneIanaId, "timeZoneIanaId");
        this.timeZoneIanaId = timeZoneIanaId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConfigurationSchedule other = (ConfigurationSchedule) o;
        return 
            Objects.deepEquals(this.frequencyOptions, other.frequencyOptions) &&
            Objects.deepEquals(this.selectedFrequency, other.selectedFrequency) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.syncHourUtc, other.syncHourUtc) &&
            Objects.deepEquals(this.timeZoneIanaId, other.timeZoneIanaId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            frequencyOptions,
            selectedFrequency,
            startDate,
            syncHourUtc,
            timeZoneIanaId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConfigurationSchedule.class,
                "frequencyOptions", frequencyOptions,
                "selectedFrequency", selectedFrequency,
                "startDate", startDate,
                "syncHourUtc", syncHourUtc,
                "timeZoneIanaId", timeZoneIanaId);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> frequencyOptions = Optional.empty();
 
        private Optional<String> selectedFrequency = Optional.empty();
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<Long> syncHourUtc = Optional.empty();
 
        private Optional<String> timeZoneIanaId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The available sync frequencies.
         */
        public Builder frequencyOptions(List<String> frequencyOptions) {
            Utils.checkNotNull(frequencyOptions, "frequencyOptions");
            this.frequencyOptions = Optional.ofNullable(frequencyOptions);
            return this;
        }

        /**
         * The available sync frequencies.
         */
        public Builder frequencyOptions(Optional<? extends List<String>> frequencyOptions) {
            Utils.checkNotNull(frequencyOptions, "frequencyOptions");
            this.frequencyOptions = frequencyOptions;
            return this;
        }

        /**
         * The sync frequency.
         */
        public Builder selectedFrequency(String selectedFrequency) {
            Utils.checkNotNull(selectedFrequency, "selectedFrequency");
            this.selectedFrequency = Optional.ofNullable(selectedFrequency);
            return this;
        }

        /**
         * The sync frequency.
         */
        public Builder selectedFrequency(Optional<String> selectedFrequency) {
            Utils.checkNotNull(selectedFrequency, "selectedFrequency");
            this.selectedFrequency = selectedFrequency;
            return this;
        }

        /**
         * The datetime in UTC you want to start syncing from.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The datetime in UTC you want to start syncing from.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The hour in which the sync is initiated.
         */
        public Builder syncHourUtc(long syncHourUtc) {
            Utils.checkNotNull(syncHourUtc, "syncHourUtc");
            this.syncHourUtc = Optional.ofNullable(syncHourUtc);
            return this;
        }

        /**
         * The hour in which the sync is initiated.
         */
        public Builder syncHourUtc(Optional<Long> syncHourUtc) {
            Utils.checkNotNull(syncHourUtc, "syncHourUtc");
            this.syncHourUtc = syncHourUtc;
            return this;
        }

        /**
         * The [IANA](https://www.iana.org/time-zones) time zone ID.
         */
        public Builder timeZoneIanaId(String timeZoneIanaId) {
            Utils.checkNotNull(timeZoneIanaId, "timeZoneIanaId");
            this.timeZoneIanaId = Optional.ofNullable(timeZoneIanaId);
            return this;
        }

        /**
         * The [IANA](https://www.iana.org/time-zones) time zone ID.
         */
        public Builder timeZoneIanaId(Optional<String> timeZoneIanaId) {
            Utils.checkNotNull(timeZoneIanaId, "timeZoneIanaId");
            this.timeZoneIanaId = timeZoneIanaId;
            return this;
        }
        
        public ConfigurationSchedule build() {
            return new ConfigurationSchedule(
                frequencyOptions,
                selectedFrequency,
                startDate,
                syncHourUtc,
                timeZoneIanaId);
        }
    }
}

