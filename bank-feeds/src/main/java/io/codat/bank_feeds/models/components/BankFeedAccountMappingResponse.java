/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * BankFeedAccountMappingResponse - The result from POSTing a Bank Account mapping.
 */

public class BankFeedAccountMappingResponse {

    /**
     * Error returned during the post request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Error")
    private JsonNullable<String> error;

    /**
     * Status of the POST request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    private JsonNullable<String> status;

    /**
     * Unique ID for the source account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccountId")
    private Optional<String> sourceAccountId;

    /**
     * Unique ID for the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetAccountId")
    private JsonNullable<String> targetAccountId;

    @JsonCreator
    public BankFeedAccountMappingResponse(
            @JsonProperty("Error") JsonNullable<String> error,
            @JsonProperty("Status") JsonNullable<String> status,
            @JsonProperty("sourceAccountId") Optional<String> sourceAccountId,
            @JsonProperty("targetAccountId") JsonNullable<String> targetAccountId) {
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.error = error;
        this.status = status;
        this.sourceAccountId = sourceAccountId;
        this.targetAccountId = targetAccountId;
    }
    
    public BankFeedAccountMappingResponse() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Error returned during the post request
     */
    @JsonIgnore
    public JsonNullable<String> error() {
        return error;
    }

    /**
     * Status of the POST request.
     */
    @JsonIgnore
    public JsonNullable<String> status() {
        return status;
    }

    /**
     * Unique ID for the source account.
     */
    @JsonIgnore
    public Optional<String> sourceAccountId() {
        return sourceAccountId;
    }

    /**
     * Unique ID for the target account.
     */
    @JsonIgnore
    public JsonNullable<String> targetAccountId() {
        return targetAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Error returned during the post request
     */
    public BankFeedAccountMappingResponse withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = JsonNullable.of(error);
        return this;
    }

    /**
     * Error returned during the post request
     */
    public BankFeedAccountMappingResponse withError(JsonNullable<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * Status of the POST request.
     */
    public BankFeedAccountMappingResponse withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Status of the POST request.
     */
    public BankFeedAccountMappingResponse withStatus(JsonNullable<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Unique ID for the source account.
     */
    public BankFeedAccountMappingResponse withSourceAccountId(String sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = Optional.ofNullable(sourceAccountId);
        return this;
    }

    /**
     * Unique ID for the source account.
     */
    public BankFeedAccountMappingResponse withSourceAccountId(Optional<String> sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = sourceAccountId;
        return this;
    }

    /**
     * Unique ID for the target account.
     */
    public BankFeedAccountMappingResponse withTargetAccountId(String targetAccountId) {
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.targetAccountId = JsonNullable.of(targetAccountId);
        return this;
    }

    /**
     * Unique ID for the target account.
     */
    public BankFeedAccountMappingResponse withTargetAccountId(JsonNullable<String> targetAccountId) {
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.targetAccountId = targetAccountId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BankFeedAccountMappingResponse other = (BankFeedAccountMappingResponse) o;
        return 
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.sourceAccountId, other.sourceAccountId) &&
            Objects.deepEquals(this.targetAccountId, other.targetAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            error,
            status,
            sourceAccountId,
            targetAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BankFeedAccountMappingResponse.class,
                "error", error,
                "status", status,
                "sourceAccountId", sourceAccountId,
                "targetAccountId", targetAccountId);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> error = JsonNullable.undefined();
 
        private JsonNullable<String> status = JsonNullable.undefined();
 
        private Optional<String> sourceAccountId = Optional.empty();
 
        private JsonNullable<String> targetAccountId = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Error returned during the post request
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = JsonNullable.of(error);
            return this;
        }

        /**
         * Error returned during the post request
         */
        public Builder error(JsonNullable<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * Status of the POST request.
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Status of the POST request.
         */
        public Builder status(JsonNullable<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Unique ID for the source account.
         */
        public Builder sourceAccountId(String sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = Optional.ofNullable(sourceAccountId);
            return this;
        }

        /**
         * Unique ID for the source account.
         */
        public Builder sourceAccountId(Optional<String> sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = sourceAccountId;
            return this;
        }

        /**
         * Unique ID for the target account.
         */
        public Builder targetAccountId(String targetAccountId) {
            Utils.checkNotNull(targetAccountId, "targetAccountId");
            this.targetAccountId = JsonNullable.of(targetAccountId);
            return this;
        }

        /**
         * Unique ID for the target account.
         */
        public Builder targetAccountId(JsonNullable<String> targetAccountId) {
            Utils.checkNotNull(targetAccountId, "targetAccountId");
            this.targetAccountId = targetAccountId;
            return this;
        }
        
        public BankFeedAccountMappingResponse build() {
            return new BankFeedAccountMappingResponse(
                error,
                status,
                sourceAccountId,
                targetAccountId);
        }
    }
}

