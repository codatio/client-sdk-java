/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class SyncConfiguration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncAsBankFeeds")
    private Optional<? extends SyncAsBankFeeds> syncAsBankFeeds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncAsExpenses")
    private Optional<? extends SyncAsExpenses> syncAsExpenses;

    public SyncConfiguration(
            @JsonProperty("syncAsBankFeeds") Optional<? extends SyncAsBankFeeds> syncAsBankFeeds,
            @JsonProperty("syncAsExpenses") Optional<? extends SyncAsExpenses> syncAsExpenses) {
        Utils.checkNotNull(syncAsBankFeeds, "syncAsBankFeeds");
        Utils.checkNotNull(syncAsExpenses, "syncAsExpenses");
        this.syncAsBankFeeds = syncAsBankFeeds;
        this.syncAsExpenses = syncAsExpenses;
    }

    public Optional<? extends SyncAsBankFeeds> syncAsBankFeeds() {
        return syncAsBankFeeds;
    }

    public Optional<? extends SyncAsExpenses> syncAsExpenses() {
        return syncAsExpenses;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public SyncConfiguration withSyncAsBankFeeds(SyncAsBankFeeds syncAsBankFeeds) {
        Utils.checkNotNull(syncAsBankFeeds, "syncAsBankFeeds");
        this.syncAsBankFeeds = Optional.ofNullable(syncAsBankFeeds);
        return this;
    }
    
    public SyncConfiguration withSyncAsBankFeeds(Optional<? extends SyncAsBankFeeds> syncAsBankFeeds) {
        Utils.checkNotNull(syncAsBankFeeds, "syncAsBankFeeds");
        this.syncAsBankFeeds = syncAsBankFeeds;
        return this;
    }

    public SyncConfiguration withSyncAsExpenses(SyncAsExpenses syncAsExpenses) {
        Utils.checkNotNull(syncAsExpenses, "syncAsExpenses");
        this.syncAsExpenses = Optional.ofNullable(syncAsExpenses);
        return this;
    }
    
    public SyncConfiguration withSyncAsExpenses(Optional<? extends SyncAsExpenses> syncAsExpenses) {
        Utils.checkNotNull(syncAsExpenses, "syncAsExpenses");
        this.syncAsExpenses = syncAsExpenses;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SyncConfiguration other = (SyncConfiguration) o;
        return 
            java.util.Objects.deepEquals(this.syncAsBankFeeds, other.syncAsBankFeeds) &&
            java.util.Objects.deepEquals(this.syncAsExpenses, other.syncAsExpenses);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            syncAsBankFeeds,
            syncAsExpenses);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SyncConfiguration.class,
                "syncAsBankFeeds", syncAsBankFeeds,
                "syncAsExpenses", syncAsExpenses);
    }
    
    public final static class Builder {
 
        private Optional<? extends SyncAsBankFeeds> syncAsBankFeeds = Optional.empty();
 
        private Optional<? extends SyncAsExpenses> syncAsExpenses = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder syncAsBankFeeds(SyncAsBankFeeds syncAsBankFeeds) {
            Utils.checkNotNull(syncAsBankFeeds, "syncAsBankFeeds");
            this.syncAsBankFeeds = Optional.ofNullable(syncAsBankFeeds);
            return this;
        }
        
        public Builder syncAsBankFeeds(Optional<? extends SyncAsBankFeeds> syncAsBankFeeds) {
            Utils.checkNotNull(syncAsBankFeeds, "syncAsBankFeeds");
            this.syncAsBankFeeds = syncAsBankFeeds;
            return this;
        }

        public Builder syncAsExpenses(SyncAsExpenses syncAsExpenses) {
            Utils.checkNotNull(syncAsExpenses, "syncAsExpenses");
            this.syncAsExpenses = Optional.ofNullable(syncAsExpenses);
            return this;
        }
        
        public Builder syncAsExpenses(Optional<? extends SyncAsExpenses> syncAsExpenses) {
            Utils.checkNotNull(syncAsExpenses, "syncAsExpenses");
            this.syncAsExpenses = syncAsExpenses;
            return this;
        }
        
        public SyncConfiguration build() {
            return new SyncConfiguration(
                syncAsBankFeeds,
                syncAsExpenses);
        }
    }
}

