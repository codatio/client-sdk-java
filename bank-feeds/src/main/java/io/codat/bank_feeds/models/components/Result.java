/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class Result {

    /**
     * The error description for the attempted creation of the source account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<String> error;

    /**
     * The error status code for the attempted creation of the source account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusCode")
    private Optional<String> statusCode;

    @JsonCreator
    public Result(
            @JsonProperty("error") Optional<String> error,
            @JsonProperty("statusCode") Optional<String> statusCode) {
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(statusCode, "statusCode");
        this.error = error;
        this.statusCode = statusCode;
    }
    
    public Result() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The error description for the attempted creation of the source account.
     */
    @JsonIgnore
    public Optional<String> error() {
        return error;
    }

    /**
     * The error status code for the attempted creation of the source account.
     */
    @JsonIgnore
    public Optional<String> statusCode() {
        return statusCode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The error description for the attempted creation of the source account.
     */
    public Result withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    /**
     * The error description for the attempted creation of the source account.
     */
    public Result withError(Optional<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * The error status code for the attempted creation of the source account.
     */
    public Result withStatusCode(String statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = Optional.ofNullable(statusCode);
        return this;
    }

    /**
     * The error status code for the attempted creation of the source account.
     */
    public Result withStatusCode(Optional<String> statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Result other = (Result) o;
        return 
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.statusCode, other.statusCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            error,
            statusCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Result.class,
                "error", error,
                "statusCode", statusCode);
    }
    
    public final static class Builder {
 
        private Optional<String> error = Optional.empty();
 
        private Optional<String> statusCode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The error description for the attempted creation of the source account.
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * The error description for the attempted creation of the source account.
         */
        public Builder error(Optional<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * The error status code for the attempted creation of the source account.
         */
        public Builder statusCode(String statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = Optional.ofNullable(statusCode);
            return this;
        }

        /**
         * The error status code for the attempted creation of the source account.
         */
        public Builder statusCode(Optional<String> statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }
        
        public Result build() {
            return new Result(
                error,
                statusCode);
        }
    }
}

