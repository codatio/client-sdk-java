/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class SyncAsBankFeeds {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccountOptions")
    private Optional<? extends List<BankAccountOption>> bankAccountOptions;

    /**
     * True if bank feeds sync is enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableSync")
    private Optional<Boolean> enableSync;

    /**
     * The bank account ID being synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedBankAccountId")
    private Optional<String> selectedBankAccountId;

    @JsonCreator
    public SyncAsBankFeeds(
            @JsonProperty("bankAccountOptions") Optional<? extends List<BankAccountOption>> bankAccountOptions,
            @JsonProperty("enableSync") Optional<Boolean> enableSync,
            @JsonProperty("selectedBankAccountId") Optional<String> selectedBankAccountId) {
        Utils.checkNotNull(bankAccountOptions, "bankAccountOptions");
        Utils.checkNotNull(enableSync, "enableSync");
        Utils.checkNotNull(selectedBankAccountId, "selectedBankAccountId");
        this.bankAccountOptions = bankAccountOptions;
        this.enableSync = enableSync;
        this.selectedBankAccountId = selectedBankAccountId;
    }
    
    public SyncAsBankFeeds() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<BankAccountOption>> bankAccountOptions() {
        return (Optional<List<BankAccountOption>>) bankAccountOptions;
    }

    /**
     * True if bank feeds sync is enabled.
     */
    @JsonIgnore
    public Optional<Boolean> enableSync() {
        return enableSync;
    }

    /**
     * The bank account ID being synced.
     */
    @JsonIgnore
    public Optional<String> selectedBankAccountId() {
        return selectedBankAccountId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SyncAsBankFeeds withBankAccountOptions(List<BankAccountOption> bankAccountOptions) {
        Utils.checkNotNull(bankAccountOptions, "bankAccountOptions");
        this.bankAccountOptions = Optional.ofNullable(bankAccountOptions);
        return this;
    }

    public SyncAsBankFeeds withBankAccountOptions(Optional<? extends List<BankAccountOption>> bankAccountOptions) {
        Utils.checkNotNull(bankAccountOptions, "bankAccountOptions");
        this.bankAccountOptions = bankAccountOptions;
        return this;
    }

    /**
     * True if bank feeds sync is enabled.
     */
    public SyncAsBankFeeds withEnableSync(boolean enableSync) {
        Utils.checkNotNull(enableSync, "enableSync");
        this.enableSync = Optional.ofNullable(enableSync);
        return this;
    }

    /**
     * True if bank feeds sync is enabled.
     */
    public SyncAsBankFeeds withEnableSync(Optional<Boolean> enableSync) {
        Utils.checkNotNull(enableSync, "enableSync");
        this.enableSync = enableSync;
        return this;
    }

    /**
     * The bank account ID being synced.
     */
    public SyncAsBankFeeds withSelectedBankAccountId(String selectedBankAccountId) {
        Utils.checkNotNull(selectedBankAccountId, "selectedBankAccountId");
        this.selectedBankAccountId = Optional.ofNullable(selectedBankAccountId);
        return this;
    }

    /**
     * The bank account ID being synced.
     */
    public SyncAsBankFeeds withSelectedBankAccountId(Optional<String> selectedBankAccountId) {
        Utils.checkNotNull(selectedBankAccountId, "selectedBankAccountId");
        this.selectedBankAccountId = selectedBankAccountId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SyncAsBankFeeds other = (SyncAsBankFeeds) o;
        return 
            Objects.deepEquals(this.bankAccountOptions, other.bankAccountOptions) &&
            Objects.deepEquals(this.enableSync, other.enableSync) &&
            Objects.deepEquals(this.selectedBankAccountId, other.selectedBankAccountId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bankAccountOptions,
            enableSync,
            selectedBankAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SyncAsBankFeeds.class,
                "bankAccountOptions", bankAccountOptions,
                "enableSync", enableSync,
                "selectedBankAccountId", selectedBankAccountId);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<BankAccountOption>> bankAccountOptions = Optional.empty();
 
        private Optional<Boolean> enableSync = Optional.empty();
 
        private Optional<String> selectedBankAccountId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bankAccountOptions(List<BankAccountOption> bankAccountOptions) {
            Utils.checkNotNull(bankAccountOptions, "bankAccountOptions");
            this.bankAccountOptions = Optional.ofNullable(bankAccountOptions);
            return this;
        }

        public Builder bankAccountOptions(Optional<? extends List<BankAccountOption>> bankAccountOptions) {
            Utils.checkNotNull(bankAccountOptions, "bankAccountOptions");
            this.bankAccountOptions = bankAccountOptions;
            return this;
        }

        /**
         * True if bank feeds sync is enabled.
         */
        public Builder enableSync(boolean enableSync) {
            Utils.checkNotNull(enableSync, "enableSync");
            this.enableSync = Optional.ofNullable(enableSync);
            return this;
        }

        /**
         * True if bank feeds sync is enabled.
         */
        public Builder enableSync(Optional<Boolean> enableSync) {
            Utils.checkNotNull(enableSync, "enableSync");
            this.enableSync = enableSync;
            return this;
        }

        /**
         * The bank account ID being synced.
         */
        public Builder selectedBankAccountId(String selectedBankAccountId) {
            Utils.checkNotNull(selectedBankAccountId, "selectedBankAccountId");
            this.selectedBankAccountId = Optional.ofNullable(selectedBankAccountId);
            return this;
        }

        /**
         * The bank account ID being synced.
         */
        public Builder selectedBankAccountId(Optional<String> selectedBankAccountId) {
            Utils.checkNotNull(selectedBankAccountId, "selectedBankAccountId");
            this.selectedBankAccountId = selectedBankAccountId;
            return this;
        }
        
        public SyncAsBankFeeds build() {
            return new SyncAsBankFeeds(
                bankAccountOptions,
                enableSync,
                selectedBankAccountId);
        }
    }
}

