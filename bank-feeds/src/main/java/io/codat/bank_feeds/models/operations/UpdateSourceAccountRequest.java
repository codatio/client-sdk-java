/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.codat.bank_feeds.models.components.SourceAccount;
import io.codat.bank_feeds.utils.SpeakeasyMetadata;
import io.codat.bank_feeds.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class UpdateSourceAccountRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends SourceAccount> sourceAccount;

    /**
     * Unique identifier for an account.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=accountId")
    private String accountId;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * Unique identifier for a connection.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectionId")
    private String connectionId;

    @JsonCreator
    public UpdateSourceAccountRequest(
            Optional<? extends SourceAccount> sourceAccount,
            String accountId,
            String companyId,
            String connectionId) {
        Utils.checkNotNull(sourceAccount, "sourceAccount");
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(connectionId, "connectionId");
        this.sourceAccount = sourceAccount;
        this.accountId = accountId;
        this.companyId = companyId;
        this.connectionId = connectionId;
    }
    
    public UpdateSourceAccountRequest(
            String accountId,
            String companyId,
            String connectionId) {
        this(Optional.empty(), accountId, companyId, connectionId);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SourceAccount> sourceAccount() {
        return (Optional<SourceAccount>) sourceAccount;
    }

    /**
     * Unique identifier for an account.
     */
    @JsonIgnore
    public String accountId() {
        return accountId;
    }

    /**
     * Unique identifier for a company.
     */
    @JsonIgnore
    public String companyId() {
        return companyId;
    }

    /**
     * Unique identifier for a connection.
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateSourceAccountRequest withSourceAccount(SourceAccount sourceAccount) {
        Utils.checkNotNull(sourceAccount, "sourceAccount");
        this.sourceAccount = Optional.ofNullable(sourceAccount);
        return this;
    }

    public UpdateSourceAccountRequest withSourceAccount(Optional<? extends SourceAccount> sourceAccount) {
        Utils.checkNotNull(sourceAccount, "sourceAccount");
        this.sourceAccount = sourceAccount;
        return this;
    }

    /**
     * Unique identifier for an account.
     */
    public UpdateSourceAccountRequest withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public UpdateSourceAccountRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Unique identifier for a connection.
     */
    public UpdateSourceAccountRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateSourceAccountRequest other = (UpdateSourceAccountRequest) o;
        return 
            Objects.deepEquals(this.sourceAccount, other.sourceAccount) &&
            Objects.deepEquals(this.accountId, other.accountId) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.connectionId, other.connectionId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            sourceAccount,
            accountId,
            companyId,
            connectionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateSourceAccountRequest.class,
                "sourceAccount", sourceAccount,
                "accountId", accountId,
                "companyId", companyId,
                "connectionId", connectionId);
    }
    
    public final static class Builder {
 
        private Optional<? extends SourceAccount> sourceAccount = Optional.empty();
 
        private String accountId;
 
        private String companyId;
 
        private String connectionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder sourceAccount(SourceAccount sourceAccount) {
            Utils.checkNotNull(sourceAccount, "sourceAccount");
            this.sourceAccount = Optional.ofNullable(sourceAccount);
            return this;
        }

        public Builder sourceAccount(Optional<? extends SourceAccount> sourceAccount) {
            Utils.checkNotNull(sourceAccount, "sourceAccount");
            this.sourceAccount = sourceAccount;
            return this;
        }

        /**
         * Unique identifier for an account.
         */
        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Unique identifier for a connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }
        
        public UpdateSourceAccountRequest build() {
            return new UpdateSourceAccountRequest(
                sourceAccount,
                accountId,
                companyId,
                connectionId);
        }
    }
}

