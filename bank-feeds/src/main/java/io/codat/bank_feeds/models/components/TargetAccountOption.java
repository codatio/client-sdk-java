/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TargetAccountOption {

    /**
     * The account number of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountNumber")
    private JsonNullable<? extends String> accountNumber;

    /**
     * The balance of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<? extends Double> balance;

    /**
     * Id of the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Name of the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    /**
     * The sort code of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortCode")
    private JsonNullable<? extends String> sortCode;

    public TargetAccountOption(
            @JsonProperty("accountNumber") JsonNullable<? extends String> accountNumber,
            @JsonProperty("balance") JsonNullable<? extends Double> balance,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("sortCode") JsonNullable<? extends String> sortCode) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sortCode, "sortCode");
        this.accountNumber = accountNumber;
        this.balance = balance;
        this.id = id;
        this.name = name;
        this.sortCode = sortCode;
    }

    /**
     * The account number of the account.
     */
    public JsonNullable<? extends String> accountNumber() {
        return accountNumber;
    }

    /**
     * The balance of the account.
     */
    public JsonNullable<? extends Double> balance() {
        return balance;
    }

    /**
     * Id of the target account.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Name of the target account.
     */
    public JsonNullable<? extends String> name() {
        return name;
    }

    /**
     * The sort code of the account.
     */
    public JsonNullable<? extends String> sortCode() {
        return sortCode;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The account number of the account.
     */
    public TargetAccountOption withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = JsonNullable.of(accountNumber);
        return this;
    }

    /**
     * The account number of the account.
     */
    public TargetAccountOption withAccountNumber(JsonNullable<? extends String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The balance of the account.
     */
    public TargetAccountOption withBalance(double balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

    /**
     * The balance of the account.
     */
    public TargetAccountOption withBalance(JsonNullable<? extends Double> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * Id of the target account.
     */
    public TargetAccountOption withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }
    
    /**
     * Id of the target account.
     */
    public TargetAccountOption withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the target account.
     */
    public TargetAccountOption withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Name of the target account.
     */
    public TargetAccountOption withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The sort code of the account.
     */
    public TargetAccountOption withSortCode(String sortCode) {
        Utils.checkNotNull(sortCode, "sortCode");
        this.sortCode = JsonNullable.of(sortCode);
        return this;
    }

    /**
     * The sort code of the account.
     */
    public TargetAccountOption withSortCode(JsonNullable<? extends String> sortCode) {
        Utils.checkNotNull(sortCode, "sortCode");
        this.sortCode = sortCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TargetAccountOption other = (TargetAccountOption) o;
        return 
            java.util.Objects.deepEquals(this.accountNumber, other.accountNumber) &&
            java.util.Objects.deepEquals(this.balance, other.balance) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.sortCode, other.sortCode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountNumber,
            balance,
            id,
            name,
            sortCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TargetAccountOption.class,
                "accountNumber", accountNumber,
                "balance", balance,
                "id", id,
                "name", name,
                "sortCode", sortCode);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> accountNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends Double> balance = JsonNullable.undefined();
 
        private Optional<? extends String> id = Optional.empty();
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends String> sortCode = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The account number of the account.
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = JsonNullable.of(accountNumber);
            return this;
        }

        /**
         * The account number of the account.
         */
        public Builder accountNumber(JsonNullable<? extends String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * The balance of the account.
         */
        public Builder balance(double balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * The balance of the account.
         */
        public Builder balance(JsonNullable<? extends Double> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * Id of the target account.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }
        
        /**
         * Id of the target account.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the target account.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Name of the target account.
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The sort code of the account.
         */
        public Builder sortCode(String sortCode) {
            Utils.checkNotNull(sortCode, "sortCode");
            this.sortCode = JsonNullable.of(sortCode);
            return this;
        }

        /**
         * The sort code of the account.
         */
        public Builder sortCode(JsonNullable<? extends String> sortCode) {
            Utils.checkNotNull(sortCode, "sortCode");
            this.sortCode = sortCode;
            return this;
        }
        
        public TargetAccountOption build() {
            return new TargetAccountOption(
                accountNumber,
                balance,
                id,
                name,
                sortCode);
        }
    }
}

