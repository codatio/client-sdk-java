/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TargetAccountOption {

    /**
     * The account number of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountNumber")
    private JsonNullable<String> accountNumber;

    /**
     * The balance of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private JsonNullable<? extends BigDecimal> balance;

    /**
     * Id of the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Name of the target account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<String> name;

    /**
     * The sort code of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortCode")
    private JsonNullable<String> sortCode;

    @JsonCreator
    public TargetAccountOption(
            @JsonProperty("accountNumber") JsonNullable<String> accountNumber,
            @JsonProperty("balance") JsonNullable<? extends BigDecimal> balance,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") JsonNullable<String> name,
            @JsonProperty("sortCode") JsonNullable<String> sortCode) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sortCode, "sortCode");
        this.accountNumber = accountNumber;
        this.balance = balance;
        this.id = id;
        this.name = name;
        this.sortCode = sortCode;
    }
    
    public TargetAccountOption() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The account number of the account.
     */
    @JsonIgnore
    public JsonNullable<String> accountNumber() {
        return accountNumber;
    }

    /**
     * The balance of the account.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<BigDecimal> balance() {
        return (JsonNullable<BigDecimal>) balance;
    }

    /**
     * Id of the target account.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Name of the target account.
     */
    @JsonIgnore
    public JsonNullable<String> name() {
        return name;
    }

    /**
     * The sort code of the account.
     */
    @JsonIgnore
    public JsonNullable<String> sortCode() {
        return sortCode;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The account number of the account.
     */
    public TargetAccountOption withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = JsonNullable.of(accountNumber);
        return this;
    }

    /**
     * The account number of the account.
     */
    public TargetAccountOption withAccountNumber(JsonNullable<String> accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    /**
     * The balance of the account.
     */
    public TargetAccountOption withBalance(BigDecimal balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = JsonNullable.of(balance);
        return this;
    }

        /**
         * The balance of the account.
         */
    public TargetAccountOption withBalance(double balance) {
        this.balance = JsonNullable.of(BigDecimal.valueOf(balance));
        return this;
    }

    /**
     * The balance of the account.
     */
    public TargetAccountOption withBalance(JsonNullable<? extends BigDecimal> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    /**
     * Id of the target account.
     */
    public TargetAccountOption withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Id of the target account.
     */
    public TargetAccountOption withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the target account.
     */
    public TargetAccountOption withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Name of the target account.
     */
    public TargetAccountOption withName(JsonNullable<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The sort code of the account.
     */
    public TargetAccountOption withSortCode(String sortCode) {
        Utils.checkNotNull(sortCode, "sortCode");
        this.sortCode = JsonNullable.of(sortCode);
        return this;
    }

    /**
     * The sort code of the account.
     */
    public TargetAccountOption withSortCode(JsonNullable<String> sortCode) {
        Utils.checkNotNull(sortCode, "sortCode");
        this.sortCode = sortCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TargetAccountOption other = (TargetAccountOption) o;
        return 
            Objects.deepEquals(this.accountNumber, other.accountNumber) &&
            Objects.deepEquals(this.balance, other.balance) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.sortCode, other.sortCode);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountNumber,
            balance,
            id,
            name,
            sortCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TargetAccountOption.class,
                "accountNumber", accountNumber,
                "balance", balance,
                "id", id,
                "name", name,
                "sortCode", sortCode);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> accountNumber = JsonNullable.undefined();
 
        private JsonNullable<? extends BigDecimal> balance = JsonNullable.undefined();
 
        private Optional<String> id = Optional.empty();
 
        private JsonNullable<String> name = JsonNullable.undefined();
 
        private JsonNullable<String> sortCode = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The account number of the account.
         */
        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = JsonNullable.of(accountNumber);
            return this;
        }

        /**
         * The account number of the account.
         */
        public Builder accountNumber(JsonNullable<String> accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }

        /**
         * The balance of the account.
         */
        public Builder balance(BigDecimal balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = JsonNullable.of(balance);
            return this;
        }

        /**
         * The balance of the account.
         */
        public Builder balance(double balance) {
            this.balance = JsonNullable.of(BigDecimal.valueOf(balance));
            return this;
        }

        /**
         * The balance of the account.
         */
        public Builder balance(JsonNullable<? extends BigDecimal> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        /**
         * Id of the target account.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Id of the target account.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the target account.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Name of the target account.
         */
        public Builder name(JsonNullable<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The sort code of the account.
         */
        public Builder sortCode(String sortCode) {
            Utils.checkNotNull(sortCode, "sortCode");
            this.sortCode = JsonNullable.of(sortCode);
            return this;
        }

        /**
         * The sort code of the account.
         */
        public Builder sortCode(JsonNullable<String> sortCode) {
            Utils.checkNotNull(sortCode, "sortCode");
            this.sortCode = sortCode;
            return this;
        }
        
        public TargetAccountOption build() {
            return new TargetAccountOption(
                accountNumber,
                balance,
                id,
                name,
                sortCode);
        }
    }
}

