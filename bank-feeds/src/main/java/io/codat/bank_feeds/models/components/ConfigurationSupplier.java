/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class ConfigurationSupplier {

    /**
     * Unique identifier for the supplier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selectedSupplierId")
    private Optional<? extends String> selectedSupplierId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("supplierOptions")
    private Optional<? extends java.util.List<ConfigurationContactRef>> supplierOptions;

    public ConfigurationSupplier(
            @JsonProperty("selectedSupplierId") Optional<? extends String> selectedSupplierId,
            @JsonProperty("supplierOptions") Optional<? extends java.util.List<ConfigurationContactRef>> supplierOptions) {
        Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
        Utils.checkNotNull(supplierOptions, "supplierOptions");
        this.selectedSupplierId = selectedSupplierId;
        this.supplierOptions = supplierOptions;
    }

    /**
     * Unique identifier for the supplier.
     */
    public Optional<? extends String> selectedSupplierId() {
        return selectedSupplierId;
    }

    public Optional<? extends java.util.List<ConfigurationContactRef>> supplierOptions() {
        return supplierOptions;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for the supplier.
     */
    public ConfigurationSupplier withSelectedSupplierId(String selectedSupplierId) {
        Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
        this.selectedSupplierId = Optional.ofNullable(selectedSupplierId);
        return this;
    }
    
    /**
     * Unique identifier for the supplier.
     */
    public ConfigurationSupplier withSelectedSupplierId(Optional<? extends String> selectedSupplierId) {
        Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
        this.selectedSupplierId = selectedSupplierId;
        return this;
    }

    public ConfigurationSupplier withSupplierOptions(java.util.List<ConfigurationContactRef> supplierOptions) {
        Utils.checkNotNull(supplierOptions, "supplierOptions");
        this.supplierOptions = Optional.ofNullable(supplierOptions);
        return this;
    }
    
    public ConfigurationSupplier withSupplierOptions(Optional<? extends java.util.List<ConfigurationContactRef>> supplierOptions) {
        Utils.checkNotNull(supplierOptions, "supplierOptions");
        this.supplierOptions = supplierOptions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ConfigurationSupplier other = (ConfigurationSupplier) o;
        return 
            java.util.Objects.deepEquals(this.selectedSupplierId, other.selectedSupplierId) &&
            java.util.Objects.deepEquals(this.supplierOptions, other.supplierOptions);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            selectedSupplierId,
            supplierOptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ConfigurationSupplier.class,
                "selectedSupplierId", selectedSupplierId,
                "supplierOptions", supplierOptions);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> selectedSupplierId = Optional.empty();
 
        private Optional<? extends java.util.List<ConfigurationContactRef>> supplierOptions = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the supplier.
         */
        public Builder selectedSupplierId(String selectedSupplierId) {
            Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
            this.selectedSupplierId = Optional.ofNullable(selectedSupplierId);
            return this;
        }
        
        /**
         * Unique identifier for the supplier.
         */
        public Builder selectedSupplierId(Optional<? extends String> selectedSupplierId) {
            Utils.checkNotNull(selectedSupplierId, "selectedSupplierId");
            this.selectedSupplierId = selectedSupplierId;
            return this;
        }

        public Builder supplierOptions(java.util.List<ConfigurationContactRef> supplierOptions) {
            Utils.checkNotNull(supplierOptions, "supplierOptions");
            this.supplierOptions = Optional.ofNullable(supplierOptions);
            return this;
        }
        
        public Builder supplierOptions(Optional<? extends java.util.List<ConfigurationContactRef>> supplierOptions) {
            Utils.checkNotNull(supplierOptions, "supplierOptions");
            this.supplierOptions = supplierOptions;
            return this;
        }
        
        public ConfigurationSupplier build() {
            return new ConfigurationSupplier(
                selectedSupplierId,
                supplierOptions);
        }
    }
}

