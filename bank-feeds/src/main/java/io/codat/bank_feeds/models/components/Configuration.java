/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;


public class Configuration {

    /**
     * The company name defined in the accounting platform.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountingSoftwareCompanyName")
    private Optional<? extends String> accountingSoftwareCompanyName;

    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyId")
    private Optional<? extends String> companyId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuration")
    private Optional<? extends SyncConfiguration> configuration;

    /**
     * True if the company has been configured.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configured")
    private Optional<? extends Boolean> configured;

    /**
     * Enabled or disable bank feeds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private Optional<? extends Boolean> enabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    private Optional<? extends ConfigurationSchedule> schedule;

    public Configuration(
            @JsonProperty("accountingSoftwareCompanyName") Optional<? extends String> accountingSoftwareCompanyName,
            @JsonProperty("companyId") Optional<? extends String> companyId,
            @JsonProperty("configuration") Optional<? extends SyncConfiguration> configuration,
            @JsonProperty("configured") Optional<? extends Boolean> configured,
            @JsonProperty("enabled") Optional<? extends Boolean> enabled,
            @JsonProperty("schedule") Optional<? extends ConfigurationSchedule> schedule) {
        Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(configuration, "configuration");
        Utils.checkNotNull(configured, "configured");
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(schedule, "schedule");
        this.accountingSoftwareCompanyName = accountingSoftwareCompanyName;
        this.companyId = companyId;
        this.configuration = configuration;
        this.configured = configured;
        this.enabled = enabled;
        this.schedule = schedule;
    }

    /**
     * The company name defined in the accounting platform.
     */
    public Optional<? extends String> accountingSoftwareCompanyName() {
        return accountingSoftwareCompanyName;
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    public Optional<? extends String> companyId() {
        return companyId;
    }

    public Optional<? extends SyncConfiguration> configuration() {
        return configuration;
    }

    /**
     * True if the company has been configured.
     */
    public Optional<? extends Boolean> configured() {
        return configured;
    }

    /**
     * Enabled or disable bank feeds.
     */
    public Optional<? extends Boolean> enabled() {
        return enabled;
    }

    public Optional<? extends ConfigurationSchedule> schedule() {
        return schedule;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The company name defined in the accounting platform.
     */
    public Configuration withAccountingSoftwareCompanyName(String accountingSoftwareCompanyName) {
        Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
        this.accountingSoftwareCompanyName = Optional.ofNullable(accountingSoftwareCompanyName);
        return this;
    }
    
    /**
     * The company name defined in the accounting platform.
     */
    public Configuration withAccountingSoftwareCompanyName(Optional<? extends String> accountingSoftwareCompanyName) {
        Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
        this.accountingSoftwareCompanyName = accountingSoftwareCompanyName;
        return this;
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    public Configuration withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }
    
    /**
     * Unique identifier for your SMB in Codat.
     */
    public Configuration withCompanyId(Optional<? extends String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    public Configuration withConfiguration(SyncConfiguration configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = Optional.ofNullable(configuration);
        return this;
    }
    
    public Configuration withConfiguration(Optional<? extends SyncConfiguration> configuration) {
        Utils.checkNotNull(configuration, "configuration");
        this.configuration = configuration;
        return this;
    }

    /**
     * True if the company has been configured.
     */
    public Configuration withConfigured(boolean configured) {
        Utils.checkNotNull(configured, "configured");
        this.configured = Optional.ofNullable(configured);
        return this;
    }
    
    /**
     * True if the company has been configured.
     */
    public Configuration withConfigured(Optional<? extends Boolean> configured) {
        Utils.checkNotNull(configured, "configured");
        this.configured = configured;
        return this;
    }

    /**
     * Enabled or disable bank feeds.
     */
    public Configuration withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = Optional.ofNullable(enabled);
        return this;
    }
    
    /**
     * Enabled or disable bank feeds.
     */
    public Configuration withEnabled(Optional<? extends Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    public Configuration withSchedule(ConfigurationSchedule schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = Optional.ofNullable(schedule);
        return this;
    }
    
    public Configuration withSchedule(Optional<? extends ConfigurationSchedule> schedule) {
        Utils.checkNotNull(schedule, "schedule");
        this.schedule = schedule;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Configuration other = (Configuration) o;
        return 
            java.util.Objects.deepEquals(this.accountingSoftwareCompanyName, other.accountingSoftwareCompanyName) &&
            java.util.Objects.deepEquals(this.companyId, other.companyId) &&
            java.util.Objects.deepEquals(this.configuration, other.configuration) &&
            java.util.Objects.deepEquals(this.configured, other.configured) &&
            java.util.Objects.deepEquals(this.enabled, other.enabled) &&
            java.util.Objects.deepEquals(this.schedule, other.schedule);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountingSoftwareCompanyName,
            companyId,
            configuration,
            configured,
            enabled,
            schedule);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Configuration.class,
                "accountingSoftwareCompanyName", accountingSoftwareCompanyName,
                "companyId", companyId,
                "configuration", configuration,
                "configured", configured,
                "enabled", enabled,
                "schedule", schedule);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> accountingSoftwareCompanyName = Optional.empty();
 
        private Optional<? extends String> companyId = Optional.empty();
 
        private Optional<? extends SyncConfiguration> configuration = Optional.empty();
 
        private Optional<? extends Boolean> configured = Optional.empty();
 
        private Optional<? extends Boolean> enabled = Optional.empty();
 
        private Optional<? extends ConfigurationSchedule> schedule = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The company name defined in the accounting platform.
         */
        public Builder accountingSoftwareCompanyName(String accountingSoftwareCompanyName) {
            Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
            this.accountingSoftwareCompanyName = Optional.ofNullable(accountingSoftwareCompanyName);
            return this;
        }
        
        /**
         * The company name defined in the accounting platform.
         */
        public Builder accountingSoftwareCompanyName(Optional<? extends String> accountingSoftwareCompanyName) {
            Utils.checkNotNull(accountingSoftwareCompanyName, "accountingSoftwareCompanyName");
            this.accountingSoftwareCompanyName = accountingSoftwareCompanyName;
            return this;
        }

        /**
         * Unique identifier for your SMB in Codat.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }
        
        /**
         * Unique identifier for your SMB in Codat.
         */
        public Builder companyId(Optional<? extends String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        public Builder configuration(SyncConfiguration configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }
        
        public Builder configuration(Optional<? extends SyncConfiguration> configuration) {
            Utils.checkNotNull(configuration, "configuration");
            this.configuration = configuration;
            return this;
        }

        /**
         * True if the company has been configured.
         */
        public Builder configured(boolean configured) {
            Utils.checkNotNull(configured, "configured");
            this.configured = Optional.ofNullable(configured);
            return this;
        }
        
        /**
         * True if the company has been configured.
         */
        public Builder configured(Optional<? extends Boolean> configured) {
            Utils.checkNotNull(configured, "configured");
            this.configured = configured;
            return this;
        }

        /**
         * Enabled or disable bank feeds.
         */
        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }
        
        /**
         * Enabled or disable bank feeds.
         */
        public Builder enabled(Optional<? extends Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        public Builder schedule(ConfigurationSchedule schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = Optional.ofNullable(schedule);
            return this;
        }
        
        public Builder schedule(Optional<? extends ConfigurationSchedule> schedule) {
            Utils.checkNotNull(schedule, "schedule");
            this.schedule = schedule;
            return this;
        }
        
        public Configuration build() {
            return new Configuration(
                accountingSoftwareCompanyName,
                companyId,
                configuration,
                configured,
                enabled,
                schedule);
        }
    }
}

