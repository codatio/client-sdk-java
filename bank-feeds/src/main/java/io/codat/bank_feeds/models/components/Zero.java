/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Zero - A bank feed connection between a source account and a target account.
 */

public class Zero {

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedStartDate")
    private Optional<? extends String> feedStartDate;

    /**
     * Unique ID for the source account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccountId")
    private Optional<? extends String> sourceAccountId;

    /**
     * Unique ID for the target account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetAccountId")
    private JsonNullable<? extends String> targetAccountId;

    public Zero(
            @JsonProperty("feedStartDate") Optional<? extends String> feedStartDate,
            @JsonProperty("sourceAccountId") Optional<? extends String> sourceAccountId,
            @JsonProperty("targetAccountId") JsonNullable<? extends String> targetAccountId) {
        Utils.checkNotNull(feedStartDate, "feedStartDate");
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.feedStartDate = feedStartDate;
        this.sourceAccountId = sourceAccountId;
        this.targetAccountId = targetAccountId;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Optional<? extends String> feedStartDate() {
        return feedStartDate;
    }

    /**
     * Unique ID for the source account
     */
    public Optional<? extends String> sourceAccountId() {
        return sourceAccountId;
    }

    /**
     * Unique ID for the target account
     */
    public JsonNullable<? extends String> targetAccountId() {
        return targetAccountId;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Zero withFeedStartDate(String feedStartDate) {
        Utils.checkNotNull(feedStartDate, "feedStartDate");
        this.feedStartDate = Optional.ofNullable(feedStartDate);
        return this;
    }
    
    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public Zero withFeedStartDate(Optional<? extends String> feedStartDate) {
        Utils.checkNotNull(feedStartDate, "feedStartDate");
        this.feedStartDate = feedStartDate;
        return this;
    }

    /**
     * Unique ID for the source account
     */
    public Zero withSourceAccountId(String sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = Optional.ofNullable(sourceAccountId);
        return this;
    }
    
    /**
     * Unique ID for the source account
     */
    public Zero withSourceAccountId(Optional<? extends String> sourceAccountId) {
        Utils.checkNotNull(sourceAccountId, "sourceAccountId");
        this.sourceAccountId = sourceAccountId;
        return this;
    }

    /**
     * Unique ID for the target account
     */
    public Zero withTargetAccountId(String targetAccountId) {
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.targetAccountId = JsonNullable.of(targetAccountId);
        return this;
    }

    /**
     * Unique ID for the target account
     */
    public Zero withTargetAccountId(JsonNullable<? extends String> targetAccountId) {
        Utils.checkNotNull(targetAccountId, "targetAccountId");
        this.targetAccountId = targetAccountId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Zero other = (Zero) o;
        return 
            java.util.Objects.deepEquals(this.feedStartDate, other.feedStartDate) &&
            java.util.Objects.deepEquals(this.sourceAccountId, other.sourceAccountId) &&
            java.util.Objects.deepEquals(this.targetAccountId, other.targetAccountId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            feedStartDate,
            sourceAccountId,
            targetAccountId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Zero.class,
                "feedStartDate", feedStartDate,
                "sourceAccountId", sourceAccountId,
                "targetAccountId", targetAccountId);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> feedStartDate = Optional.empty();
 
        private Optional<? extends String> sourceAccountId = Optional.empty();
 
        private JsonNullable<? extends String> targetAccountId = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder feedStartDate(String feedStartDate) {
            Utils.checkNotNull(feedStartDate, "feedStartDate");
            this.feedStartDate = Optional.ofNullable(feedStartDate);
            return this;
        }
        
        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder feedStartDate(Optional<? extends String> feedStartDate) {
            Utils.checkNotNull(feedStartDate, "feedStartDate");
            this.feedStartDate = feedStartDate;
            return this;
        }

        /**
         * Unique ID for the source account
         */
        public Builder sourceAccountId(String sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = Optional.ofNullable(sourceAccountId);
            return this;
        }
        
        /**
         * Unique ID for the source account
         */
        public Builder sourceAccountId(Optional<? extends String> sourceAccountId) {
            Utils.checkNotNull(sourceAccountId, "sourceAccountId");
            this.sourceAccountId = sourceAccountId;
            return this;
        }

        /**
         * Unique ID for the target account
         */
        public Builder targetAccountId(String targetAccountId) {
            Utils.checkNotNull(targetAccountId, "targetAccountId");
            this.targetAccountId = JsonNullable.of(targetAccountId);
            return this;
        }

        /**
         * Unique ID for the target account
         */
        public Builder targetAccountId(JsonNullable<? extends String> targetAccountId) {
            Utils.checkNotNull(targetAccountId, "targetAccountId");
            this.targetAccountId = targetAccountId;
            return this;
        }
        
        public Zero build() {
            return new Zero(
                feedStartDate,
                sourceAccountId,
                targetAccountId);
        }
    }
}

