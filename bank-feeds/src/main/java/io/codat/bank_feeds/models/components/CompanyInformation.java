/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.bank_feeds.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.bank_feeds.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CompanyInformation - Information about the company from the underlying accounting software.
 */

public class CompanyInformation {

    /**
     * Currency set in the accounting software of the linked company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseCurrency")
    private Optional<String> baseCurrency;

    /**
     * Name of the linked company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyName")
    private Optional<String> companyName;

    /**
     * Boolean showing if the organisation has multicurrency enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multicurrencyEnabled")
    private JsonNullable<Boolean> multicurrencyEnabled;

    /**
     * Accounting software subscription type such as Trial, Demo, Standard
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("planType")
    private JsonNullable<String> planType;

    @JsonCreator
    public CompanyInformation(
            @JsonProperty("baseCurrency") Optional<String> baseCurrency,
            @JsonProperty("companyName") Optional<String> companyName,
            @JsonProperty("multicurrencyEnabled") JsonNullable<Boolean> multicurrencyEnabled,
            @JsonProperty("planType") JsonNullable<String> planType) {
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(multicurrencyEnabled, "multicurrencyEnabled");
        Utils.checkNotNull(planType, "planType");
        this.baseCurrency = baseCurrency;
        this.companyName = companyName;
        this.multicurrencyEnabled = multicurrencyEnabled;
        this.planType = planType;
    }
    
    public CompanyInformation() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Currency set in the accounting software of the linked company.
     */
    @JsonIgnore
    public Optional<String> baseCurrency() {
        return baseCurrency;
    }

    /**
     * Name of the linked company.
     */
    @JsonIgnore
    public Optional<String> companyName() {
        return companyName;
    }

    /**
     * Boolean showing if the organisation has multicurrency enabled
     */
    @JsonIgnore
    public JsonNullable<Boolean> multicurrencyEnabled() {
        return multicurrencyEnabled;
    }

    /**
     * Accounting software subscription type such as Trial, Demo, Standard
     */
    @JsonIgnore
    public JsonNullable<String> planType() {
        return planType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Currency set in the accounting software of the linked company.
     */
    public CompanyInformation withBaseCurrency(String baseCurrency) {
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        this.baseCurrency = Optional.ofNullable(baseCurrency);
        return this;
    }

    /**
     * Currency set in the accounting software of the linked company.
     */
    public CompanyInformation withBaseCurrency(Optional<String> baseCurrency) {
        Utils.checkNotNull(baseCurrency, "baseCurrency");
        this.baseCurrency = baseCurrency;
        return this;
    }

    /**
     * Name of the linked company.
     */
    public CompanyInformation withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = Optional.ofNullable(companyName);
        return this;
    }

    /**
     * Name of the linked company.
     */
    public CompanyInformation withCompanyName(Optional<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * Boolean showing if the organisation has multicurrency enabled
     */
    public CompanyInformation withMulticurrencyEnabled(boolean multicurrencyEnabled) {
        Utils.checkNotNull(multicurrencyEnabled, "multicurrencyEnabled");
        this.multicurrencyEnabled = JsonNullable.of(multicurrencyEnabled);
        return this;
    }

    /**
     * Boolean showing if the organisation has multicurrency enabled
     */
    public CompanyInformation withMulticurrencyEnabled(JsonNullable<Boolean> multicurrencyEnabled) {
        Utils.checkNotNull(multicurrencyEnabled, "multicurrencyEnabled");
        this.multicurrencyEnabled = multicurrencyEnabled;
        return this;
    }

    /**
     * Accounting software subscription type such as Trial, Demo, Standard
     */
    public CompanyInformation withPlanType(String planType) {
        Utils.checkNotNull(planType, "planType");
        this.planType = JsonNullable.of(planType);
        return this;
    }

    /**
     * Accounting software subscription type such as Trial, Demo, Standard
     */
    public CompanyInformation withPlanType(JsonNullable<String> planType) {
        Utils.checkNotNull(planType, "planType");
        this.planType = planType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyInformation other = (CompanyInformation) o;
        return 
            Objects.deepEquals(this.baseCurrency, other.baseCurrency) &&
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.multicurrencyEnabled, other.multicurrencyEnabled) &&
            Objects.deepEquals(this.planType, other.planType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            baseCurrency,
            companyName,
            multicurrencyEnabled,
            planType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyInformation.class,
                "baseCurrency", baseCurrency,
                "companyName", companyName,
                "multicurrencyEnabled", multicurrencyEnabled,
                "planType", planType);
    }
    
    public final static class Builder {
 
        private Optional<String> baseCurrency = Optional.empty();
 
        private Optional<String> companyName = Optional.empty();
 
        private JsonNullable<Boolean> multicurrencyEnabled = JsonNullable.undefined();
 
        private JsonNullable<String> planType = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Currency set in the accounting software of the linked company.
         */
        public Builder baseCurrency(String baseCurrency) {
            Utils.checkNotNull(baseCurrency, "baseCurrency");
            this.baseCurrency = Optional.ofNullable(baseCurrency);
            return this;
        }

        /**
         * Currency set in the accounting software of the linked company.
         */
        public Builder baseCurrency(Optional<String> baseCurrency) {
            Utils.checkNotNull(baseCurrency, "baseCurrency");
            this.baseCurrency = baseCurrency;
            return this;
        }

        /**
         * Name of the linked company.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        /**
         * Name of the linked company.
         */
        public Builder companyName(Optional<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * Boolean showing if the organisation has multicurrency enabled
         */
        public Builder multicurrencyEnabled(boolean multicurrencyEnabled) {
            Utils.checkNotNull(multicurrencyEnabled, "multicurrencyEnabled");
            this.multicurrencyEnabled = JsonNullable.of(multicurrencyEnabled);
            return this;
        }

        /**
         * Boolean showing if the organisation has multicurrency enabled
         */
        public Builder multicurrencyEnabled(JsonNullable<Boolean> multicurrencyEnabled) {
            Utils.checkNotNull(multicurrencyEnabled, "multicurrencyEnabled");
            this.multicurrencyEnabled = multicurrencyEnabled;
            return this;
        }

        /**
         * Accounting software subscription type such as Trial, Demo, Standard
         */
        public Builder planType(String planType) {
            Utils.checkNotNull(planType, "planType");
            this.planType = JsonNullable.of(planType);
            return this;
        }

        /**
         * Accounting software subscription type such as Trial, Demo, Standard
         */
        public Builder planType(JsonNullable<String> planType) {
            Utils.checkNotNull(planType, "planType");
            this.planType = planType;
            return this;
        }
        
        public CompanyInformation build() {
            return new CompanyInformation(
                baseCurrency,
                companyName,
                multicurrencyEnabled,
                planType);
        }
    }
}

