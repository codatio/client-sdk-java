/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.models.components.DataStatus;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * GetDataStatusDataStatuses - OK
 */

public class GetDataStatusDataStatuses {

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountTransactions")
    private Optional<? extends DataStatus> accountTransactions;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balanceSheet")
    private Optional<? extends DataStatus> balanceSheet;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccounts")
    private Optional<? extends DataStatus> bankAccounts;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankTransactions")
    private Optional<? extends DataStatus> bankTransactions;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banking-accountBalances")
    private Optional<? extends DataStatus> bankingAccountBalances;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banking-accounts")
    private Optional<? extends DataStatus> bankingAccounts;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banking-transactionCategories")
    private Optional<? extends DataStatus> bankingTransactionCategories;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banking-transactions")
    private Optional<? extends DataStatus> bankingTransactions;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billCreditNotes")
    private Optional<? extends DataStatus> billCreditNotes;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billPayments")
    private Optional<? extends DataStatus> billPayments;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bills")
    private Optional<? extends DataStatus> bills;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cashFlowStatement")
    private Optional<? extends DataStatus> cashFlowStatement;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chartOfAccounts")
    private Optional<? extends DataStatus> chartOfAccounts;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-companyInfo")
    private Optional<? extends DataStatus> commerceCompanyInfo;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-customers")
    private Optional<? extends DataStatus> commerceCustomers;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-disputes")
    private Optional<? extends DataStatus> commerceDisputes;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-locations")
    private Optional<? extends DataStatus> commerceLocations;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-orders")
    private Optional<? extends DataStatus> commerceOrders;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-paymentMethods")
    private Optional<? extends DataStatus> commercePaymentMethods;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-payments")
    private Optional<? extends DataStatus> commercePayments;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-productCategories")
    private Optional<? extends DataStatus> commerceProductCategories;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-products")
    private Optional<? extends DataStatus> commerceProducts;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-taxComponents")
    private Optional<? extends DataStatus> commerceTaxComponents;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commerce-transactions")
    private Optional<? extends DataStatus> commerceTransactions;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<? extends DataStatus> company;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditNotes")
    private Optional<? extends DataStatus> creditNotes;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customers")
    private Optional<? extends DataStatus> customers;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directCosts")
    private Optional<? extends DataStatus> directCosts;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("directIncomes")
    private Optional<? extends DataStatus> directIncomes;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoices")
    private Optional<? extends DataStatus> invoices;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemReceipts")
    private Optional<? extends DataStatus> itemReceipts;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    private Optional<? extends DataStatus> items;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("journalEntries")
    private Optional<? extends DataStatus> journalEntries;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("journals")
    private Optional<? extends DataStatus> journals;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMethods")
    private Optional<? extends DataStatus> paymentMethods;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payments")
    private Optional<? extends DataStatus> payments;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profitAndLoss")
    private Optional<? extends DataStatus> profitAndLoss;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purchaseOrders")
    private Optional<? extends DataStatus> purchaseOrders;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salesOrders")
    private Optional<? extends DataStatus> salesOrders;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suppliers")
    private Optional<? extends DataStatus> suppliers;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRates")
    private Optional<? extends DataStatus> taxRates;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingCategories")
    private Optional<? extends DataStatus> trackingCategories;

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfers")
    private Optional<? extends DataStatus> transfers;

    @JsonCreator
    public GetDataStatusDataStatuses(
            @JsonProperty("accountTransactions") Optional<? extends DataStatus> accountTransactions,
            @JsonProperty("balanceSheet") Optional<? extends DataStatus> balanceSheet,
            @JsonProperty("bankAccounts") Optional<? extends DataStatus> bankAccounts,
            @JsonProperty("bankTransactions") Optional<? extends DataStatus> bankTransactions,
            @JsonProperty("banking-accountBalances") Optional<? extends DataStatus> bankingAccountBalances,
            @JsonProperty("banking-accounts") Optional<? extends DataStatus> bankingAccounts,
            @JsonProperty("banking-transactionCategories") Optional<? extends DataStatus> bankingTransactionCategories,
            @JsonProperty("banking-transactions") Optional<? extends DataStatus> bankingTransactions,
            @JsonProperty("billCreditNotes") Optional<? extends DataStatus> billCreditNotes,
            @JsonProperty("billPayments") Optional<? extends DataStatus> billPayments,
            @JsonProperty("bills") Optional<? extends DataStatus> bills,
            @JsonProperty("cashFlowStatement") Optional<? extends DataStatus> cashFlowStatement,
            @JsonProperty("chartOfAccounts") Optional<? extends DataStatus> chartOfAccounts,
            @JsonProperty("commerce-companyInfo") Optional<? extends DataStatus> commerceCompanyInfo,
            @JsonProperty("commerce-customers") Optional<? extends DataStatus> commerceCustomers,
            @JsonProperty("commerce-disputes") Optional<? extends DataStatus> commerceDisputes,
            @JsonProperty("commerce-locations") Optional<? extends DataStatus> commerceLocations,
            @JsonProperty("commerce-orders") Optional<? extends DataStatus> commerceOrders,
            @JsonProperty("commerce-paymentMethods") Optional<? extends DataStatus> commercePaymentMethods,
            @JsonProperty("commerce-payments") Optional<? extends DataStatus> commercePayments,
            @JsonProperty("commerce-productCategories") Optional<? extends DataStatus> commerceProductCategories,
            @JsonProperty("commerce-products") Optional<? extends DataStatus> commerceProducts,
            @JsonProperty("commerce-taxComponents") Optional<? extends DataStatus> commerceTaxComponents,
            @JsonProperty("commerce-transactions") Optional<? extends DataStatus> commerceTransactions,
            @JsonProperty("company") Optional<? extends DataStatus> company,
            @JsonProperty("creditNotes") Optional<? extends DataStatus> creditNotes,
            @JsonProperty("customers") Optional<? extends DataStatus> customers,
            @JsonProperty("directCosts") Optional<? extends DataStatus> directCosts,
            @JsonProperty("directIncomes") Optional<? extends DataStatus> directIncomes,
            @JsonProperty("invoices") Optional<? extends DataStatus> invoices,
            @JsonProperty("itemReceipts") Optional<? extends DataStatus> itemReceipts,
            @JsonProperty("items") Optional<? extends DataStatus> items,
            @JsonProperty("journalEntries") Optional<? extends DataStatus> journalEntries,
            @JsonProperty("journals") Optional<? extends DataStatus> journals,
            @JsonProperty("paymentMethods") Optional<? extends DataStatus> paymentMethods,
            @JsonProperty("payments") Optional<? extends DataStatus> payments,
            @JsonProperty("profitAndLoss") Optional<? extends DataStatus> profitAndLoss,
            @JsonProperty("purchaseOrders") Optional<? extends DataStatus> purchaseOrders,
            @JsonProperty("salesOrders") Optional<? extends DataStatus> salesOrders,
            @JsonProperty("suppliers") Optional<? extends DataStatus> suppliers,
            @JsonProperty("taxRates") Optional<? extends DataStatus> taxRates,
            @JsonProperty("trackingCategories") Optional<? extends DataStatus> trackingCategories,
            @JsonProperty("transfers") Optional<? extends DataStatus> transfers) {
        Utils.checkNotNull(accountTransactions, "accountTransactions");
        Utils.checkNotNull(balanceSheet, "balanceSheet");
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        Utils.checkNotNull(bankTransactions, "bankTransactions");
        Utils.checkNotNull(bankingAccountBalances, "bankingAccountBalances");
        Utils.checkNotNull(bankingAccounts, "bankingAccounts");
        Utils.checkNotNull(bankingTransactionCategories, "bankingTransactionCategories");
        Utils.checkNotNull(bankingTransactions, "bankingTransactions");
        Utils.checkNotNull(billCreditNotes, "billCreditNotes");
        Utils.checkNotNull(billPayments, "billPayments");
        Utils.checkNotNull(bills, "bills");
        Utils.checkNotNull(cashFlowStatement, "cashFlowStatement");
        Utils.checkNotNull(chartOfAccounts, "chartOfAccounts");
        Utils.checkNotNull(commerceCompanyInfo, "commerceCompanyInfo");
        Utils.checkNotNull(commerceCustomers, "commerceCustomers");
        Utils.checkNotNull(commerceDisputes, "commerceDisputes");
        Utils.checkNotNull(commerceLocations, "commerceLocations");
        Utils.checkNotNull(commerceOrders, "commerceOrders");
        Utils.checkNotNull(commercePaymentMethods, "commercePaymentMethods");
        Utils.checkNotNull(commercePayments, "commercePayments");
        Utils.checkNotNull(commerceProductCategories, "commerceProductCategories");
        Utils.checkNotNull(commerceProducts, "commerceProducts");
        Utils.checkNotNull(commerceTaxComponents, "commerceTaxComponents");
        Utils.checkNotNull(commerceTransactions, "commerceTransactions");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(creditNotes, "creditNotes");
        Utils.checkNotNull(customers, "customers");
        Utils.checkNotNull(directCosts, "directCosts");
        Utils.checkNotNull(directIncomes, "directIncomes");
        Utils.checkNotNull(invoices, "invoices");
        Utils.checkNotNull(itemReceipts, "itemReceipts");
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(journalEntries, "journalEntries");
        Utils.checkNotNull(journals, "journals");
        Utils.checkNotNull(paymentMethods, "paymentMethods");
        Utils.checkNotNull(payments, "payments");
        Utils.checkNotNull(profitAndLoss, "profitAndLoss");
        Utils.checkNotNull(purchaseOrders, "purchaseOrders");
        Utils.checkNotNull(salesOrders, "salesOrders");
        Utils.checkNotNull(suppliers, "suppliers");
        Utils.checkNotNull(taxRates, "taxRates");
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        Utils.checkNotNull(transfers, "transfers");
        this.accountTransactions = accountTransactions;
        this.balanceSheet = balanceSheet;
        this.bankAccounts = bankAccounts;
        this.bankTransactions = bankTransactions;
        this.bankingAccountBalances = bankingAccountBalances;
        this.bankingAccounts = bankingAccounts;
        this.bankingTransactionCategories = bankingTransactionCategories;
        this.bankingTransactions = bankingTransactions;
        this.billCreditNotes = billCreditNotes;
        this.billPayments = billPayments;
        this.bills = bills;
        this.cashFlowStatement = cashFlowStatement;
        this.chartOfAccounts = chartOfAccounts;
        this.commerceCompanyInfo = commerceCompanyInfo;
        this.commerceCustomers = commerceCustomers;
        this.commerceDisputes = commerceDisputes;
        this.commerceLocations = commerceLocations;
        this.commerceOrders = commerceOrders;
        this.commercePaymentMethods = commercePaymentMethods;
        this.commercePayments = commercePayments;
        this.commerceProductCategories = commerceProductCategories;
        this.commerceProducts = commerceProducts;
        this.commerceTaxComponents = commerceTaxComponents;
        this.commerceTransactions = commerceTransactions;
        this.company = company;
        this.creditNotes = creditNotes;
        this.customers = customers;
        this.directCosts = directCosts;
        this.directIncomes = directIncomes;
        this.invoices = invoices;
        this.itemReceipts = itemReceipts;
        this.items = items;
        this.journalEntries = journalEntries;
        this.journals = journals;
        this.paymentMethods = paymentMethods;
        this.payments = payments;
        this.profitAndLoss = profitAndLoss;
        this.purchaseOrders = purchaseOrders;
        this.salesOrders = salesOrders;
        this.suppliers = suppliers;
        this.taxRates = taxRates;
        this.trackingCategories = trackingCategories;
        this.transfers = transfers;
    }
    
    public GetDataStatusDataStatuses() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> accountTransactions() {
        return (Optional<DataStatus>) accountTransactions;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> balanceSheet() {
        return (Optional<DataStatus>) balanceSheet;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> bankAccounts() {
        return (Optional<DataStatus>) bankAccounts;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> bankTransactions() {
        return (Optional<DataStatus>) bankTransactions;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> bankingAccountBalances() {
        return (Optional<DataStatus>) bankingAccountBalances;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> bankingAccounts() {
        return (Optional<DataStatus>) bankingAccounts;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> bankingTransactionCategories() {
        return (Optional<DataStatus>) bankingTransactionCategories;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> bankingTransactions() {
        return (Optional<DataStatus>) bankingTransactions;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> billCreditNotes() {
        return (Optional<DataStatus>) billCreditNotes;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> billPayments() {
        return (Optional<DataStatus>) billPayments;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> bills() {
        return (Optional<DataStatus>) bills;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> cashFlowStatement() {
        return (Optional<DataStatus>) cashFlowStatement;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> chartOfAccounts() {
        return (Optional<DataStatus>) chartOfAccounts;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceCompanyInfo() {
        return (Optional<DataStatus>) commerceCompanyInfo;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceCustomers() {
        return (Optional<DataStatus>) commerceCustomers;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceDisputes() {
        return (Optional<DataStatus>) commerceDisputes;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceLocations() {
        return (Optional<DataStatus>) commerceLocations;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceOrders() {
        return (Optional<DataStatus>) commerceOrders;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commercePaymentMethods() {
        return (Optional<DataStatus>) commercePaymentMethods;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commercePayments() {
        return (Optional<DataStatus>) commercePayments;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceProductCategories() {
        return (Optional<DataStatus>) commerceProductCategories;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceProducts() {
        return (Optional<DataStatus>) commerceProducts;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceTaxComponents() {
        return (Optional<DataStatus>) commerceTaxComponents;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> commerceTransactions() {
        return (Optional<DataStatus>) commerceTransactions;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> company() {
        return (Optional<DataStatus>) company;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> creditNotes() {
        return (Optional<DataStatus>) creditNotes;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> customers() {
        return (Optional<DataStatus>) customers;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> directCosts() {
        return (Optional<DataStatus>) directCosts;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> directIncomes() {
        return (Optional<DataStatus>) directIncomes;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> invoices() {
        return (Optional<DataStatus>) invoices;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> itemReceipts() {
        return (Optional<DataStatus>) itemReceipts;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> items() {
        return (Optional<DataStatus>) items;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> journalEntries() {
        return (Optional<DataStatus>) journalEntries;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> journals() {
        return (Optional<DataStatus>) journals;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> paymentMethods() {
        return (Optional<DataStatus>) paymentMethods;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> payments() {
        return (Optional<DataStatus>) payments;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> profitAndLoss() {
        return (Optional<DataStatus>) profitAndLoss;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> purchaseOrders() {
        return (Optional<DataStatus>) purchaseOrders;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> salesOrders() {
        return (Optional<DataStatus>) salesOrders;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> suppliers() {
        return (Optional<DataStatus>) suppliers;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> taxRates() {
        return (Optional<DataStatus>) taxRates;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> trackingCategories() {
        return (Optional<DataStatus>) trackingCategories;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DataStatus> transfers() {
        return (Optional<DataStatus>) transfers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withAccountTransactions(DataStatus accountTransactions) {
        Utils.checkNotNull(accountTransactions, "accountTransactions");
        this.accountTransactions = Optional.ofNullable(accountTransactions);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withAccountTransactions(Optional<? extends DataStatus> accountTransactions) {
        Utils.checkNotNull(accountTransactions, "accountTransactions");
        this.accountTransactions = accountTransactions;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBalanceSheet(DataStatus balanceSheet) {
        Utils.checkNotNull(balanceSheet, "balanceSheet");
        this.balanceSheet = Optional.ofNullable(balanceSheet);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBalanceSheet(Optional<? extends DataStatus> balanceSheet) {
        Utils.checkNotNull(balanceSheet, "balanceSheet");
        this.balanceSheet = balanceSheet;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankAccounts(DataStatus bankAccounts) {
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        this.bankAccounts = Optional.ofNullable(bankAccounts);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankAccounts(Optional<? extends DataStatus> bankAccounts) {
        Utils.checkNotNull(bankAccounts, "bankAccounts");
        this.bankAccounts = bankAccounts;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankTransactions(DataStatus bankTransactions) {
        Utils.checkNotNull(bankTransactions, "bankTransactions");
        this.bankTransactions = Optional.ofNullable(bankTransactions);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankTransactions(Optional<? extends DataStatus> bankTransactions) {
        Utils.checkNotNull(bankTransactions, "bankTransactions");
        this.bankTransactions = bankTransactions;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankingAccountBalances(DataStatus bankingAccountBalances) {
        Utils.checkNotNull(bankingAccountBalances, "bankingAccountBalances");
        this.bankingAccountBalances = Optional.ofNullable(bankingAccountBalances);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankingAccountBalances(Optional<? extends DataStatus> bankingAccountBalances) {
        Utils.checkNotNull(bankingAccountBalances, "bankingAccountBalances");
        this.bankingAccountBalances = bankingAccountBalances;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankingAccounts(DataStatus bankingAccounts) {
        Utils.checkNotNull(bankingAccounts, "bankingAccounts");
        this.bankingAccounts = Optional.ofNullable(bankingAccounts);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankingAccounts(Optional<? extends DataStatus> bankingAccounts) {
        Utils.checkNotNull(bankingAccounts, "bankingAccounts");
        this.bankingAccounts = bankingAccounts;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankingTransactionCategories(DataStatus bankingTransactionCategories) {
        Utils.checkNotNull(bankingTransactionCategories, "bankingTransactionCategories");
        this.bankingTransactionCategories = Optional.ofNullable(bankingTransactionCategories);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankingTransactionCategories(Optional<? extends DataStatus> bankingTransactionCategories) {
        Utils.checkNotNull(bankingTransactionCategories, "bankingTransactionCategories");
        this.bankingTransactionCategories = bankingTransactionCategories;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankingTransactions(DataStatus bankingTransactions) {
        Utils.checkNotNull(bankingTransactions, "bankingTransactions");
        this.bankingTransactions = Optional.ofNullable(bankingTransactions);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBankingTransactions(Optional<? extends DataStatus> bankingTransactions) {
        Utils.checkNotNull(bankingTransactions, "bankingTransactions");
        this.bankingTransactions = bankingTransactions;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBillCreditNotes(DataStatus billCreditNotes) {
        Utils.checkNotNull(billCreditNotes, "billCreditNotes");
        this.billCreditNotes = Optional.ofNullable(billCreditNotes);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBillCreditNotes(Optional<? extends DataStatus> billCreditNotes) {
        Utils.checkNotNull(billCreditNotes, "billCreditNotes");
        this.billCreditNotes = billCreditNotes;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBillPayments(DataStatus billPayments) {
        Utils.checkNotNull(billPayments, "billPayments");
        this.billPayments = Optional.ofNullable(billPayments);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBillPayments(Optional<? extends DataStatus> billPayments) {
        Utils.checkNotNull(billPayments, "billPayments");
        this.billPayments = billPayments;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBills(DataStatus bills) {
        Utils.checkNotNull(bills, "bills");
        this.bills = Optional.ofNullable(bills);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withBills(Optional<? extends DataStatus> bills) {
        Utils.checkNotNull(bills, "bills");
        this.bills = bills;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCashFlowStatement(DataStatus cashFlowStatement) {
        Utils.checkNotNull(cashFlowStatement, "cashFlowStatement");
        this.cashFlowStatement = Optional.ofNullable(cashFlowStatement);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCashFlowStatement(Optional<? extends DataStatus> cashFlowStatement) {
        Utils.checkNotNull(cashFlowStatement, "cashFlowStatement");
        this.cashFlowStatement = cashFlowStatement;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withChartOfAccounts(DataStatus chartOfAccounts) {
        Utils.checkNotNull(chartOfAccounts, "chartOfAccounts");
        this.chartOfAccounts = Optional.ofNullable(chartOfAccounts);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withChartOfAccounts(Optional<? extends DataStatus> chartOfAccounts) {
        Utils.checkNotNull(chartOfAccounts, "chartOfAccounts");
        this.chartOfAccounts = chartOfAccounts;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceCompanyInfo(DataStatus commerceCompanyInfo) {
        Utils.checkNotNull(commerceCompanyInfo, "commerceCompanyInfo");
        this.commerceCompanyInfo = Optional.ofNullable(commerceCompanyInfo);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceCompanyInfo(Optional<? extends DataStatus> commerceCompanyInfo) {
        Utils.checkNotNull(commerceCompanyInfo, "commerceCompanyInfo");
        this.commerceCompanyInfo = commerceCompanyInfo;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceCustomers(DataStatus commerceCustomers) {
        Utils.checkNotNull(commerceCustomers, "commerceCustomers");
        this.commerceCustomers = Optional.ofNullable(commerceCustomers);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceCustomers(Optional<? extends DataStatus> commerceCustomers) {
        Utils.checkNotNull(commerceCustomers, "commerceCustomers");
        this.commerceCustomers = commerceCustomers;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceDisputes(DataStatus commerceDisputes) {
        Utils.checkNotNull(commerceDisputes, "commerceDisputes");
        this.commerceDisputes = Optional.ofNullable(commerceDisputes);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceDisputes(Optional<? extends DataStatus> commerceDisputes) {
        Utils.checkNotNull(commerceDisputes, "commerceDisputes");
        this.commerceDisputes = commerceDisputes;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceLocations(DataStatus commerceLocations) {
        Utils.checkNotNull(commerceLocations, "commerceLocations");
        this.commerceLocations = Optional.ofNullable(commerceLocations);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceLocations(Optional<? extends DataStatus> commerceLocations) {
        Utils.checkNotNull(commerceLocations, "commerceLocations");
        this.commerceLocations = commerceLocations;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceOrders(DataStatus commerceOrders) {
        Utils.checkNotNull(commerceOrders, "commerceOrders");
        this.commerceOrders = Optional.ofNullable(commerceOrders);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceOrders(Optional<? extends DataStatus> commerceOrders) {
        Utils.checkNotNull(commerceOrders, "commerceOrders");
        this.commerceOrders = commerceOrders;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommercePaymentMethods(DataStatus commercePaymentMethods) {
        Utils.checkNotNull(commercePaymentMethods, "commercePaymentMethods");
        this.commercePaymentMethods = Optional.ofNullable(commercePaymentMethods);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommercePaymentMethods(Optional<? extends DataStatus> commercePaymentMethods) {
        Utils.checkNotNull(commercePaymentMethods, "commercePaymentMethods");
        this.commercePaymentMethods = commercePaymentMethods;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommercePayments(DataStatus commercePayments) {
        Utils.checkNotNull(commercePayments, "commercePayments");
        this.commercePayments = Optional.ofNullable(commercePayments);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommercePayments(Optional<? extends DataStatus> commercePayments) {
        Utils.checkNotNull(commercePayments, "commercePayments");
        this.commercePayments = commercePayments;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceProductCategories(DataStatus commerceProductCategories) {
        Utils.checkNotNull(commerceProductCategories, "commerceProductCategories");
        this.commerceProductCategories = Optional.ofNullable(commerceProductCategories);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceProductCategories(Optional<? extends DataStatus> commerceProductCategories) {
        Utils.checkNotNull(commerceProductCategories, "commerceProductCategories");
        this.commerceProductCategories = commerceProductCategories;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceProducts(DataStatus commerceProducts) {
        Utils.checkNotNull(commerceProducts, "commerceProducts");
        this.commerceProducts = Optional.ofNullable(commerceProducts);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceProducts(Optional<? extends DataStatus> commerceProducts) {
        Utils.checkNotNull(commerceProducts, "commerceProducts");
        this.commerceProducts = commerceProducts;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceTaxComponents(DataStatus commerceTaxComponents) {
        Utils.checkNotNull(commerceTaxComponents, "commerceTaxComponents");
        this.commerceTaxComponents = Optional.ofNullable(commerceTaxComponents);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceTaxComponents(Optional<? extends DataStatus> commerceTaxComponents) {
        Utils.checkNotNull(commerceTaxComponents, "commerceTaxComponents");
        this.commerceTaxComponents = commerceTaxComponents;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceTransactions(DataStatus commerceTransactions) {
        Utils.checkNotNull(commerceTransactions, "commerceTransactions");
        this.commerceTransactions = Optional.ofNullable(commerceTransactions);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCommerceTransactions(Optional<? extends DataStatus> commerceTransactions) {
        Utils.checkNotNull(commerceTransactions, "commerceTransactions");
        this.commerceTransactions = commerceTransactions;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCompany(DataStatus company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCompany(Optional<? extends DataStatus> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCreditNotes(DataStatus creditNotes) {
        Utils.checkNotNull(creditNotes, "creditNotes");
        this.creditNotes = Optional.ofNullable(creditNotes);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCreditNotes(Optional<? extends DataStatus> creditNotes) {
        Utils.checkNotNull(creditNotes, "creditNotes");
        this.creditNotes = creditNotes;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCustomers(DataStatus customers) {
        Utils.checkNotNull(customers, "customers");
        this.customers = Optional.ofNullable(customers);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withCustomers(Optional<? extends DataStatus> customers) {
        Utils.checkNotNull(customers, "customers");
        this.customers = customers;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withDirectCosts(DataStatus directCosts) {
        Utils.checkNotNull(directCosts, "directCosts");
        this.directCosts = Optional.ofNullable(directCosts);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withDirectCosts(Optional<? extends DataStatus> directCosts) {
        Utils.checkNotNull(directCosts, "directCosts");
        this.directCosts = directCosts;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withDirectIncomes(DataStatus directIncomes) {
        Utils.checkNotNull(directIncomes, "directIncomes");
        this.directIncomes = Optional.ofNullable(directIncomes);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withDirectIncomes(Optional<? extends DataStatus> directIncomes) {
        Utils.checkNotNull(directIncomes, "directIncomes");
        this.directIncomes = directIncomes;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withInvoices(DataStatus invoices) {
        Utils.checkNotNull(invoices, "invoices");
        this.invoices = Optional.ofNullable(invoices);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withInvoices(Optional<? extends DataStatus> invoices) {
        Utils.checkNotNull(invoices, "invoices");
        this.invoices = invoices;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withItemReceipts(DataStatus itemReceipts) {
        Utils.checkNotNull(itemReceipts, "itemReceipts");
        this.itemReceipts = Optional.ofNullable(itemReceipts);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withItemReceipts(Optional<? extends DataStatus> itemReceipts) {
        Utils.checkNotNull(itemReceipts, "itemReceipts");
        this.itemReceipts = itemReceipts;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withItems(DataStatus items) {
        Utils.checkNotNull(items, "items");
        this.items = Optional.ofNullable(items);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withItems(Optional<? extends DataStatus> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withJournalEntries(DataStatus journalEntries) {
        Utils.checkNotNull(journalEntries, "journalEntries");
        this.journalEntries = Optional.ofNullable(journalEntries);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withJournalEntries(Optional<? extends DataStatus> journalEntries) {
        Utils.checkNotNull(journalEntries, "journalEntries");
        this.journalEntries = journalEntries;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withJournals(DataStatus journals) {
        Utils.checkNotNull(journals, "journals");
        this.journals = Optional.ofNullable(journals);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withJournals(Optional<? extends DataStatus> journals) {
        Utils.checkNotNull(journals, "journals");
        this.journals = journals;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withPaymentMethods(DataStatus paymentMethods) {
        Utils.checkNotNull(paymentMethods, "paymentMethods");
        this.paymentMethods = Optional.ofNullable(paymentMethods);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withPaymentMethods(Optional<? extends DataStatus> paymentMethods) {
        Utils.checkNotNull(paymentMethods, "paymentMethods");
        this.paymentMethods = paymentMethods;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withPayments(DataStatus payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = Optional.ofNullable(payments);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withPayments(Optional<? extends DataStatus> payments) {
        Utils.checkNotNull(payments, "payments");
        this.payments = payments;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withProfitAndLoss(DataStatus profitAndLoss) {
        Utils.checkNotNull(profitAndLoss, "profitAndLoss");
        this.profitAndLoss = Optional.ofNullable(profitAndLoss);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withProfitAndLoss(Optional<? extends DataStatus> profitAndLoss) {
        Utils.checkNotNull(profitAndLoss, "profitAndLoss");
        this.profitAndLoss = profitAndLoss;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withPurchaseOrders(DataStatus purchaseOrders) {
        Utils.checkNotNull(purchaseOrders, "purchaseOrders");
        this.purchaseOrders = Optional.ofNullable(purchaseOrders);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withPurchaseOrders(Optional<? extends DataStatus> purchaseOrders) {
        Utils.checkNotNull(purchaseOrders, "purchaseOrders");
        this.purchaseOrders = purchaseOrders;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withSalesOrders(DataStatus salesOrders) {
        Utils.checkNotNull(salesOrders, "salesOrders");
        this.salesOrders = Optional.ofNullable(salesOrders);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withSalesOrders(Optional<? extends DataStatus> salesOrders) {
        Utils.checkNotNull(salesOrders, "salesOrders");
        this.salesOrders = salesOrders;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withSuppliers(DataStatus suppliers) {
        Utils.checkNotNull(suppliers, "suppliers");
        this.suppliers = Optional.ofNullable(suppliers);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withSuppliers(Optional<? extends DataStatus> suppliers) {
        Utils.checkNotNull(suppliers, "suppliers");
        this.suppliers = suppliers;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withTaxRates(DataStatus taxRates) {
        Utils.checkNotNull(taxRates, "taxRates");
        this.taxRates = Optional.ofNullable(taxRates);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withTaxRates(Optional<? extends DataStatus> taxRates) {
        Utils.checkNotNull(taxRates, "taxRates");
        this.taxRates = taxRates;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withTrackingCategories(DataStatus trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = Optional.ofNullable(trackingCategories);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withTrackingCategories(Optional<? extends DataStatus> trackingCategories) {
        Utils.checkNotNull(trackingCategories, "trackingCategories");
        this.trackingCategories = trackingCategories;
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withTransfers(DataStatus transfers) {
        Utils.checkNotNull(transfers, "transfers");
        this.transfers = Optional.ofNullable(transfers);
        return this;
    }

    /**
     * Describes the state of data in the Codat cache for a company and data type
     */
    public GetDataStatusDataStatuses withTransfers(Optional<? extends DataStatus> transfers) {
        Utils.checkNotNull(transfers, "transfers");
        this.transfers = transfers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDataStatusDataStatuses other = (GetDataStatusDataStatuses) o;
        return 
            Objects.deepEquals(this.accountTransactions, other.accountTransactions) &&
            Objects.deepEquals(this.balanceSheet, other.balanceSheet) &&
            Objects.deepEquals(this.bankAccounts, other.bankAccounts) &&
            Objects.deepEquals(this.bankTransactions, other.bankTransactions) &&
            Objects.deepEquals(this.bankingAccountBalances, other.bankingAccountBalances) &&
            Objects.deepEquals(this.bankingAccounts, other.bankingAccounts) &&
            Objects.deepEquals(this.bankingTransactionCategories, other.bankingTransactionCategories) &&
            Objects.deepEquals(this.bankingTransactions, other.bankingTransactions) &&
            Objects.deepEquals(this.billCreditNotes, other.billCreditNotes) &&
            Objects.deepEquals(this.billPayments, other.billPayments) &&
            Objects.deepEquals(this.bills, other.bills) &&
            Objects.deepEquals(this.cashFlowStatement, other.cashFlowStatement) &&
            Objects.deepEquals(this.chartOfAccounts, other.chartOfAccounts) &&
            Objects.deepEquals(this.commerceCompanyInfo, other.commerceCompanyInfo) &&
            Objects.deepEquals(this.commerceCustomers, other.commerceCustomers) &&
            Objects.deepEquals(this.commerceDisputes, other.commerceDisputes) &&
            Objects.deepEquals(this.commerceLocations, other.commerceLocations) &&
            Objects.deepEquals(this.commerceOrders, other.commerceOrders) &&
            Objects.deepEquals(this.commercePaymentMethods, other.commercePaymentMethods) &&
            Objects.deepEquals(this.commercePayments, other.commercePayments) &&
            Objects.deepEquals(this.commerceProductCategories, other.commerceProductCategories) &&
            Objects.deepEquals(this.commerceProducts, other.commerceProducts) &&
            Objects.deepEquals(this.commerceTaxComponents, other.commerceTaxComponents) &&
            Objects.deepEquals(this.commerceTransactions, other.commerceTransactions) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.creditNotes, other.creditNotes) &&
            Objects.deepEquals(this.customers, other.customers) &&
            Objects.deepEquals(this.directCosts, other.directCosts) &&
            Objects.deepEquals(this.directIncomes, other.directIncomes) &&
            Objects.deepEquals(this.invoices, other.invoices) &&
            Objects.deepEquals(this.itemReceipts, other.itemReceipts) &&
            Objects.deepEquals(this.items, other.items) &&
            Objects.deepEquals(this.journalEntries, other.journalEntries) &&
            Objects.deepEquals(this.journals, other.journals) &&
            Objects.deepEquals(this.paymentMethods, other.paymentMethods) &&
            Objects.deepEquals(this.payments, other.payments) &&
            Objects.deepEquals(this.profitAndLoss, other.profitAndLoss) &&
            Objects.deepEquals(this.purchaseOrders, other.purchaseOrders) &&
            Objects.deepEquals(this.salesOrders, other.salesOrders) &&
            Objects.deepEquals(this.suppliers, other.suppliers) &&
            Objects.deepEquals(this.taxRates, other.taxRates) &&
            Objects.deepEquals(this.trackingCategories, other.trackingCategories) &&
            Objects.deepEquals(this.transfers, other.transfers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountTransactions,
            balanceSheet,
            bankAccounts,
            bankTransactions,
            bankingAccountBalances,
            bankingAccounts,
            bankingTransactionCategories,
            bankingTransactions,
            billCreditNotes,
            billPayments,
            bills,
            cashFlowStatement,
            chartOfAccounts,
            commerceCompanyInfo,
            commerceCustomers,
            commerceDisputes,
            commerceLocations,
            commerceOrders,
            commercePaymentMethods,
            commercePayments,
            commerceProductCategories,
            commerceProducts,
            commerceTaxComponents,
            commerceTransactions,
            company,
            creditNotes,
            customers,
            directCosts,
            directIncomes,
            invoices,
            itemReceipts,
            items,
            journalEntries,
            journals,
            paymentMethods,
            payments,
            profitAndLoss,
            purchaseOrders,
            salesOrders,
            suppliers,
            taxRates,
            trackingCategories,
            transfers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetDataStatusDataStatuses.class,
                "accountTransactions", accountTransactions,
                "balanceSheet", balanceSheet,
                "bankAccounts", bankAccounts,
                "bankTransactions", bankTransactions,
                "bankingAccountBalances", bankingAccountBalances,
                "bankingAccounts", bankingAccounts,
                "bankingTransactionCategories", bankingTransactionCategories,
                "bankingTransactions", bankingTransactions,
                "billCreditNotes", billCreditNotes,
                "billPayments", billPayments,
                "bills", bills,
                "cashFlowStatement", cashFlowStatement,
                "chartOfAccounts", chartOfAccounts,
                "commerceCompanyInfo", commerceCompanyInfo,
                "commerceCustomers", commerceCustomers,
                "commerceDisputes", commerceDisputes,
                "commerceLocations", commerceLocations,
                "commerceOrders", commerceOrders,
                "commercePaymentMethods", commercePaymentMethods,
                "commercePayments", commercePayments,
                "commerceProductCategories", commerceProductCategories,
                "commerceProducts", commerceProducts,
                "commerceTaxComponents", commerceTaxComponents,
                "commerceTransactions", commerceTransactions,
                "company", company,
                "creditNotes", creditNotes,
                "customers", customers,
                "directCosts", directCosts,
                "directIncomes", directIncomes,
                "invoices", invoices,
                "itemReceipts", itemReceipts,
                "items", items,
                "journalEntries", journalEntries,
                "journals", journals,
                "paymentMethods", paymentMethods,
                "payments", payments,
                "profitAndLoss", profitAndLoss,
                "purchaseOrders", purchaseOrders,
                "salesOrders", salesOrders,
                "suppliers", suppliers,
                "taxRates", taxRates,
                "trackingCategories", trackingCategories,
                "transfers", transfers);
    }
    
    public final static class Builder {
 
        private Optional<? extends DataStatus> accountTransactions = Optional.empty();
 
        private Optional<? extends DataStatus> balanceSheet = Optional.empty();
 
        private Optional<? extends DataStatus> bankAccounts = Optional.empty();
 
        private Optional<? extends DataStatus> bankTransactions = Optional.empty();
 
        private Optional<? extends DataStatus> bankingAccountBalances = Optional.empty();
 
        private Optional<? extends DataStatus> bankingAccounts = Optional.empty();
 
        private Optional<? extends DataStatus> bankingTransactionCategories = Optional.empty();
 
        private Optional<? extends DataStatus> bankingTransactions = Optional.empty();
 
        private Optional<? extends DataStatus> billCreditNotes = Optional.empty();
 
        private Optional<? extends DataStatus> billPayments = Optional.empty();
 
        private Optional<? extends DataStatus> bills = Optional.empty();
 
        private Optional<? extends DataStatus> cashFlowStatement = Optional.empty();
 
        private Optional<? extends DataStatus> chartOfAccounts = Optional.empty();
 
        private Optional<? extends DataStatus> commerceCompanyInfo = Optional.empty();
 
        private Optional<? extends DataStatus> commerceCustomers = Optional.empty();
 
        private Optional<? extends DataStatus> commerceDisputes = Optional.empty();
 
        private Optional<? extends DataStatus> commerceLocations = Optional.empty();
 
        private Optional<? extends DataStatus> commerceOrders = Optional.empty();
 
        private Optional<? extends DataStatus> commercePaymentMethods = Optional.empty();
 
        private Optional<? extends DataStatus> commercePayments = Optional.empty();
 
        private Optional<? extends DataStatus> commerceProductCategories = Optional.empty();
 
        private Optional<? extends DataStatus> commerceProducts = Optional.empty();
 
        private Optional<? extends DataStatus> commerceTaxComponents = Optional.empty();
 
        private Optional<? extends DataStatus> commerceTransactions = Optional.empty();
 
        private Optional<? extends DataStatus> company = Optional.empty();
 
        private Optional<? extends DataStatus> creditNotes = Optional.empty();
 
        private Optional<? extends DataStatus> customers = Optional.empty();
 
        private Optional<? extends DataStatus> directCosts = Optional.empty();
 
        private Optional<? extends DataStatus> directIncomes = Optional.empty();
 
        private Optional<? extends DataStatus> invoices = Optional.empty();
 
        private Optional<? extends DataStatus> itemReceipts = Optional.empty();
 
        private Optional<? extends DataStatus> items = Optional.empty();
 
        private Optional<? extends DataStatus> journalEntries = Optional.empty();
 
        private Optional<? extends DataStatus> journals = Optional.empty();
 
        private Optional<? extends DataStatus> paymentMethods = Optional.empty();
 
        private Optional<? extends DataStatus> payments = Optional.empty();
 
        private Optional<? extends DataStatus> profitAndLoss = Optional.empty();
 
        private Optional<? extends DataStatus> purchaseOrders = Optional.empty();
 
        private Optional<? extends DataStatus> salesOrders = Optional.empty();
 
        private Optional<? extends DataStatus> suppliers = Optional.empty();
 
        private Optional<? extends DataStatus> taxRates = Optional.empty();
 
        private Optional<? extends DataStatus> trackingCategories = Optional.empty();
 
        private Optional<? extends DataStatus> transfers = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder accountTransactions(DataStatus accountTransactions) {
            Utils.checkNotNull(accountTransactions, "accountTransactions");
            this.accountTransactions = Optional.ofNullable(accountTransactions);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder accountTransactions(Optional<? extends DataStatus> accountTransactions) {
            Utils.checkNotNull(accountTransactions, "accountTransactions");
            this.accountTransactions = accountTransactions;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder balanceSheet(DataStatus balanceSheet) {
            Utils.checkNotNull(balanceSheet, "balanceSheet");
            this.balanceSheet = Optional.ofNullable(balanceSheet);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder balanceSheet(Optional<? extends DataStatus> balanceSheet) {
            Utils.checkNotNull(balanceSheet, "balanceSheet");
            this.balanceSheet = balanceSheet;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankAccounts(DataStatus bankAccounts) {
            Utils.checkNotNull(bankAccounts, "bankAccounts");
            this.bankAccounts = Optional.ofNullable(bankAccounts);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankAccounts(Optional<? extends DataStatus> bankAccounts) {
            Utils.checkNotNull(bankAccounts, "bankAccounts");
            this.bankAccounts = bankAccounts;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankTransactions(DataStatus bankTransactions) {
            Utils.checkNotNull(bankTransactions, "bankTransactions");
            this.bankTransactions = Optional.ofNullable(bankTransactions);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankTransactions(Optional<? extends DataStatus> bankTransactions) {
            Utils.checkNotNull(bankTransactions, "bankTransactions");
            this.bankTransactions = bankTransactions;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankingAccountBalances(DataStatus bankingAccountBalances) {
            Utils.checkNotNull(bankingAccountBalances, "bankingAccountBalances");
            this.bankingAccountBalances = Optional.ofNullable(bankingAccountBalances);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankingAccountBalances(Optional<? extends DataStatus> bankingAccountBalances) {
            Utils.checkNotNull(bankingAccountBalances, "bankingAccountBalances");
            this.bankingAccountBalances = bankingAccountBalances;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankingAccounts(DataStatus bankingAccounts) {
            Utils.checkNotNull(bankingAccounts, "bankingAccounts");
            this.bankingAccounts = Optional.ofNullable(bankingAccounts);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankingAccounts(Optional<? extends DataStatus> bankingAccounts) {
            Utils.checkNotNull(bankingAccounts, "bankingAccounts");
            this.bankingAccounts = bankingAccounts;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankingTransactionCategories(DataStatus bankingTransactionCategories) {
            Utils.checkNotNull(bankingTransactionCategories, "bankingTransactionCategories");
            this.bankingTransactionCategories = Optional.ofNullable(bankingTransactionCategories);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankingTransactionCategories(Optional<? extends DataStatus> bankingTransactionCategories) {
            Utils.checkNotNull(bankingTransactionCategories, "bankingTransactionCategories");
            this.bankingTransactionCategories = bankingTransactionCategories;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankingTransactions(DataStatus bankingTransactions) {
            Utils.checkNotNull(bankingTransactions, "bankingTransactions");
            this.bankingTransactions = Optional.ofNullable(bankingTransactions);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bankingTransactions(Optional<? extends DataStatus> bankingTransactions) {
            Utils.checkNotNull(bankingTransactions, "bankingTransactions");
            this.bankingTransactions = bankingTransactions;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder billCreditNotes(DataStatus billCreditNotes) {
            Utils.checkNotNull(billCreditNotes, "billCreditNotes");
            this.billCreditNotes = Optional.ofNullable(billCreditNotes);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder billCreditNotes(Optional<? extends DataStatus> billCreditNotes) {
            Utils.checkNotNull(billCreditNotes, "billCreditNotes");
            this.billCreditNotes = billCreditNotes;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder billPayments(DataStatus billPayments) {
            Utils.checkNotNull(billPayments, "billPayments");
            this.billPayments = Optional.ofNullable(billPayments);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder billPayments(Optional<? extends DataStatus> billPayments) {
            Utils.checkNotNull(billPayments, "billPayments");
            this.billPayments = billPayments;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bills(DataStatus bills) {
            Utils.checkNotNull(bills, "bills");
            this.bills = Optional.ofNullable(bills);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder bills(Optional<? extends DataStatus> bills) {
            Utils.checkNotNull(bills, "bills");
            this.bills = bills;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder cashFlowStatement(DataStatus cashFlowStatement) {
            Utils.checkNotNull(cashFlowStatement, "cashFlowStatement");
            this.cashFlowStatement = Optional.ofNullable(cashFlowStatement);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder cashFlowStatement(Optional<? extends DataStatus> cashFlowStatement) {
            Utils.checkNotNull(cashFlowStatement, "cashFlowStatement");
            this.cashFlowStatement = cashFlowStatement;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder chartOfAccounts(DataStatus chartOfAccounts) {
            Utils.checkNotNull(chartOfAccounts, "chartOfAccounts");
            this.chartOfAccounts = Optional.ofNullable(chartOfAccounts);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder chartOfAccounts(Optional<? extends DataStatus> chartOfAccounts) {
            Utils.checkNotNull(chartOfAccounts, "chartOfAccounts");
            this.chartOfAccounts = chartOfAccounts;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceCompanyInfo(DataStatus commerceCompanyInfo) {
            Utils.checkNotNull(commerceCompanyInfo, "commerceCompanyInfo");
            this.commerceCompanyInfo = Optional.ofNullable(commerceCompanyInfo);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceCompanyInfo(Optional<? extends DataStatus> commerceCompanyInfo) {
            Utils.checkNotNull(commerceCompanyInfo, "commerceCompanyInfo");
            this.commerceCompanyInfo = commerceCompanyInfo;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceCustomers(DataStatus commerceCustomers) {
            Utils.checkNotNull(commerceCustomers, "commerceCustomers");
            this.commerceCustomers = Optional.ofNullable(commerceCustomers);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceCustomers(Optional<? extends DataStatus> commerceCustomers) {
            Utils.checkNotNull(commerceCustomers, "commerceCustomers");
            this.commerceCustomers = commerceCustomers;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceDisputes(DataStatus commerceDisputes) {
            Utils.checkNotNull(commerceDisputes, "commerceDisputes");
            this.commerceDisputes = Optional.ofNullable(commerceDisputes);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceDisputes(Optional<? extends DataStatus> commerceDisputes) {
            Utils.checkNotNull(commerceDisputes, "commerceDisputes");
            this.commerceDisputes = commerceDisputes;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceLocations(DataStatus commerceLocations) {
            Utils.checkNotNull(commerceLocations, "commerceLocations");
            this.commerceLocations = Optional.ofNullable(commerceLocations);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceLocations(Optional<? extends DataStatus> commerceLocations) {
            Utils.checkNotNull(commerceLocations, "commerceLocations");
            this.commerceLocations = commerceLocations;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceOrders(DataStatus commerceOrders) {
            Utils.checkNotNull(commerceOrders, "commerceOrders");
            this.commerceOrders = Optional.ofNullable(commerceOrders);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceOrders(Optional<? extends DataStatus> commerceOrders) {
            Utils.checkNotNull(commerceOrders, "commerceOrders");
            this.commerceOrders = commerceOrders;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commercePaymentMethods(DataStatus commercePaymentMethods) {
            Utils.checkNotNull(commercePaymentMethods, "commercePaymentMethods");
            this.commercePaymentMethods = Optional.ofNullable(commercePaymentMethods);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commercePaymentMethods(Optional<? extends DataStatus> commercePaymentMethods) {
            Utils.checkNotNull(commercePaymentMethods, "commercePaymentMethods");
            this.commercePaymentMethods = commercePaymentMethods;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commercePayments(DataStatus commercePayments) {
            Utils.checkNotNull(commercePayments, "commercePayments");
            this.commercePayments = Optional.ofNullable(commercePayments);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commercePayments(Optional<? extends DataStatus> commercePayments) {
            Utils.checkNotNull(commercePayments, "commercePayments");
            this.commercePayments = commercePayments;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceProductCategories(DataStatus commerceProductCategories) {
            Utils.checkNotNull(commerceProductCategories, "commerceProductCategories");
            this.commerceProductCategories = Optional.ofNullable(commerceProductCategories);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceProductCategories(Optional<? extends DataStatus> commerceProductCategories) {
            Utils.checkNotNull(commerceProductCategories, "commerceProductCategories");
            this.commerceProductCategories = commerceProductCategories;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceProducts(DataStatus commerceProducts) {
            Utils.checkNotNull(commerceProducts, "commerceProducts");
            this.commerceProducts = Optional.ofNullable(commerceProducts);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceProducts(Optional<? extends DataStatus> commerceProducts) {
            Utils.checkNotNull(commerceProducts, "commerceProducts");
            this.commerceProducts = commerceProducts;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceTaxComponents(DataStatus commerceTaxComponents) {
            Utils.checkNotNull(commerceTaxComponents, "commerceTaxComponents");
            this.commerceTaxComponents = Optional.ofNullable(commerceTaxComponents);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceTaxComponents(Optional<? extends DataStatus> commerceTaxComponents) {
            Utils.checkNotNull(commerceTaxComponents, "commerceTaxComponents");
            this.commerceTaxComponents = commerceTaxComponents;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceTransactions(DataStatus commerceTransactions) {
            Utils.checkNotNull(commerceTransactions, "commerceTransactions");
            this.commerceTransactions = Optional.ofNullable(commerceTransactions);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder commerceTransactions(Optional<? extends DataStatus> commerceTransactions) {
            Utils.checkNotNull(commerceTransactions, "commerceTransactions");
            this.commerceTransactions = commerceTransactions;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder company(DataStatus company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder company(Optional<? extends DataStatus> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder creditNotes(DataStatus creditNotes) {
            Utils.checkNotNull(creditNotes, "creditNotes");
            this.creditNotes = Optional.ofNullable(creditNotes);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder creditNotes(Optional<? extends DataStatus> creditNotes) {
            Utils.checkNotNull(creditNotes, "creditNotes");
            this.creditNotes = creditNotes;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder customers(DataStatus customers) {
            Utils.checkNotNull(customers, "customers");
            this.customers = Optional.ofNullable(customers);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder customers(Optional<? extends DataStatus> customers) {
            Utils.checkNotNull(customers, "customers");
            this.customers = customers;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder directCosts(DataStatus directCosts) {
            Utils.checkNotNull(directCosts, "directCosts");
            this.directCosts = Optional.ofNullable(directCosts);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder directCosts(Optional<? extends DataStatus> directCosts) {
            Utils.checkNotNull(directCosts, "directCosts");
            this.directCosts = directCosts;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder directIncomes(DataStatus directIncomes) {
            Utils.checkNotNull(directIncomes, "directIncomes");
            this.directIncomes = Optional.ofNullable(directIncomes);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder directIncomes(Optional<? extends DataStatus> directIncomes) {
            Utils.checkNotNull(directIncomes, "directIncomes");
            this.directIncomes = directIncomes;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder invoices(DataStatus invoices) {
            Utils.checkNotNull(invoices, "invoices");
            this.invoices = Optional.ofNullable(invoices);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder invoices(Optional<? extends DataStatus> invoices) {
            Utils.checkNotNull(invoices, "invoices");
            this.invoices = invoices;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder itemReceipts(DataStatus itemReceipts) {
            Utils.checkNotNull(itemReceipts, "itemReceipts");
            this.itemReceipts = Optional.ofNullable(itemReceipts);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder itemReceipts(Optional<? extends DataStatus> itemReceipts) {
            Utils.checkNotNull(itemReceipts, "itemReceipts");
            this.itemReceipts = itemReceipts;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder items(DataStatus items) {
            Utils.checkNotNull(items, "items");
            this.items = Optional.ofNullable(items);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder items(Optional<? extends DataStatus> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder journalEntries(DataStatus journalEntries) {
            Utils.checkNotNull(journalEntries, "journalEntries");
            this.journalEntries = Optional.ofNullable(journalEntries);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder journalEntries(Optional<? extends DataStatus> journalEntries) {
            Utils.checkNotNull(journalEntries, "journalEntries");
            this.journalEntries = journalEntries;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder journals(DataStatus journals) {
            Utils.checkNotNull(journals, "journals");
            this.journals = Optional.ofNullable(journals);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder journals(Optional<? extends DataStatus> journals) {
            Utils.checkNotNull(journals, "journals");
            this.journals = journals;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder paymentMethods(DataStatus paymentMethods) {
            Utils.checkNotNull(paymentMethods, "paymentMethods");
            this.paymentMethods = Optional.ofNullable(paymentMethods);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder paymentMethods(Optional<? extends DataStatus> paymentMethods) {
            Utils.checkNotNull(paymentMethods, "paymentMethods");
            this.paymentMethods = paymentMethods;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder payments(DataStatus payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = Optional.ofNullable(payments);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder payments(Optional<? extends DataStatus> payments) {
            Utils.checkNotNull(payments, "payments");
            this.payments = payments;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder profitAndLoss(DataStatus profitAndLoss) {
            Utils.checkNotNull(profitAndLoss, "profitAndLoss");
            this.profitAndLoss = Optional.ofNullable(profitAndLoss);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder profitAndLoss(Optional<? extends DataStatus> profitAndLoss) {
            Utils.checkNotNull(profitAndLoss, "profitAndLoss");
            this.profitAndLoss = profitAndLoss;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder purchaseOrders(DataStatus purchaseOrders) {
            Utils.checkNotNull(purchaseOrders, "purchaseOrders");
            this.purchaseOrders = Optional.ofNullable(purchaseOrders);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder purchaseOrders(Optional<? extends DataStatus> purchaseOrders) {
            Utils.checkNotNull(purchaseOrders, "purchaseOrders");
            this.purchaseOrders = purchaseOrders;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder salesOrders(DataStatus salesOrders) {
            Utils.checkNotNull(salesOrders, "salesOrders");
            this.salesOrders = Optional.ofNullable(salesOrders);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder salesOrders(Optional<? extends DataStatus> salesOrders) {
            Utils.checkNotNull(salesOrders, "salesOrders");
            this.salesOrders = salesOrders;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder suppliers(DataStatus suppliers) {
            Utils.checkNotNull(suppliers, "suppliers");
            this.suppliers = Optional.ofNullable(suppliers);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder suppliers(Optional<? extends DataStatus> suppliers) {
            Utils.checkNotNull(suppliers, "suppliers");
            this.suppliers = suppliers;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder taxRates(DataStatus taxRates) {
            Utils.checkNotNull(taxRates, "taxRates");
            this.taxRates = Optional.ofNullable(taxRates);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder taxRates(Optional<? extends DataStatus> taxRates) {
            Utils.checkNotNull(taxRates, "taxRates");
            this.taxRates = taxRates;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder trackingCategories(DataStatus trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = Optional.ofNullable(trackingCategories);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder trackingCategories(Optional<? extends DataStatus> trackingCategories) {
            Utils.checkNotNull(trackingCategories, "trackingCategories");
            this.trackingCategories = trackingCategories;
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder transfers(DataStatus transfers) {
            Utils.checkNotNull(transfers, "transfers");
            this.transfers = Optional.ofNullable(transfers);
            return this;
        }

        /**
         * Describes the state of data in the Codat cache for a company and data type
         */
        public Builder transfers(Optional<? extends DataStatus> transfers) {
            Utils.checkNotNull(transfers, "transfers");
            this.transfers = transfers;
            return this;
        }
        
        public GetDataStatusDataStatuses build() {
            return new GetDataStatusDataStatuses(
                accountTransactions,
                balanceSheet,
                bankAccounts,
                bankTransactions,
                bankingAccountBalances,
                bankingAccounts,
                bankingTransactionCategories,
                bankingTransactions,
                billCreditNotes,
                billPayments,
                bills,
                cashFlowStatement,
                chartOfAccounts,
                commerceCompanyInfo,
                commerceCustomers,
                commerceDisputes,
                commerceLocations,
                commerceOrders,
                commercePaymentMethods,
                commercePayments,
                commerceProductCategories,
                commerceProducts,
                commerceTaxComponents,
                commerceTransactions,
                company,
                creditNotes,
                customers,
                directCosts,
                directIncomes,
                invoices,
                itemReceipts,
                items,
                journalEntries,
                journals,
                paymentMethods,
                payments,
                profitAndLoss,
                purchaseOrders,
                salesOrders,
                suppliers,
                taxRates,
                trackingCategories,
                transfers);
        }
    }
}

