/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class Attachment {

    /**
     * Unique ID of company in Codat
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyId")
    private Optional<String> companyId;

    /**
     * Unique identifier of attachment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Unique identifier of transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionId")
    private Optional<String> transactionId;

    @JsonCreator
    public Attachment(
            @JsonProperty("companyId") Optional<String> companyId,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("transactionId") Optional<String> transactionId) {
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(transactionId, "transactionId");
        this.companyId = companyId;
        this.id = id;
        this.transactionId = transactionId;
    }
    
    public Attachment() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique ID of company in Codat
     */
    @JsonIgnore
    public Optional<String> companyId() {
        return companyId;
    }

    /**
     * Unique identifier of attachment
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Unique identifier of transaction
     */
    @JsonIgnore
    public Optional<String> transactionId() {
        return transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique ID of company in Codat
     */
    public Attachment withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }

    /**
     * Unique ID of company in Codat
     */
    public Attachment withCompanyId(Optional<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Unique identifier of attachment
     */
    public Attachment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier of attachment
     */
    public Attachment withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Unique identifier of transaction
     */
    public Attachment withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = Optional.ofNullable(transactionId);
        return this;
    }

    /**
     * Unique identifier of transaction
     */
    public Attachment withTransactionId(Optional<String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Attachment other = (Attachment) o;
        return 
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyId,
            id,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Attachment.class,
                "companyId", companyId,
                "id", id,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private Optional<String> companyId = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> transactionId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique ID of company in Codat
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        /**
         * Unique ID of company in Codat
         */
        public Builder companyId(Optional<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Unique identifier of attachment
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier of attachment
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Unique identifier of transaction
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        /**
         * Unique identifier of transaction
         */
        public Builder transactionId(Optional<String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public Attachment build() {
            return new Attachment(
                companyId,
                id,
                transactionId);
        }
    }
}

