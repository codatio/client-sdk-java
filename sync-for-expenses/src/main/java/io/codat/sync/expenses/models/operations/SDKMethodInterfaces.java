/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.operations;

import io.codat.sync.expenses.models.components.CompanyRequestBody;
import io.codat.sync.expenses.utils.Options;
import java.lang.Exception;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallCreateCompany {
        CreateCompanyResponse create(
            Optional<? extends CompanyRequestBody> request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteCompany {
        DeleteCompanyResponse delete(
            DeleteCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompany {
        GetCompanyResponse get(
            GetCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListCompanies {
        ListCompaniesResponse list(
            ListCompaniesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateCompany {
        UpdateCompanyResponse update(
            UpdateCompanyRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateConnection {
        CreateConnectionResponse create(
            CreateConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreatePartnerExpenseConnection {
        CreatePartnerExpenseConnectionResponse createPartnerExpenseConnection(
            CreatePartnerExpenseConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteConnection {
        DeleteConnectionResponse delete(
            DeleteConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetConnection {
        GetConnectionResponse get(
            GetConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListConnections {
        ListConnectionsResponse list(
            ListConnectionsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUnlinkConnection {
        UnlinkConnectionResponse unlink(
            UnlinkConnectionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateBankAccount {
        CreateBankAccountResponse create(
            CreateBankAccountRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCreateBankAccountsModel {
        GetCreateBankAccountsModelResponse getCreateModel(
            GetCreateBankAccountsModelRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateAccount {
        CreateAccountResponse create(
            CreateAccountRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCreateChartOfAccountsModel {
        GetCreateChartOfAccountsModelResponse getCreateModel(
            GetCreateChartOfAccountsModelRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateCustomer {
        CreateCustomerResponse create(
            CreateCustomerRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCustomer {
        GetCustomerResponse get(
            GetCustomerRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListCustomers {
        ListCustomersResponse list(
            ListCustomersRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateCustomer {
        UpdateCustomerResponse update(
            UpdateCustomerRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateSupplier {
        CreateSupplierResponse create(
            CreateSupplierRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSupplier {
        GetSupplierResponse get(
            GetSupplierRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListSuppliers {
        ListSuppliersResponse list(
            ListSuppliersRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateSupplier {
        UpdateSupplierResponse update(
            UpdateSupplierRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetDataStatus {
        GetDataStatusResponse get(
            GetDataStatusRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPullOperation {
        GetPullOperationResponse getPullOperation(
            GetPullOperationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListPullOperations {
        ListPullOperationsResponse listPullOperations(
            ListPullOperationsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRefreshAllDataTypes {
        RefreshAllDataTypesResponse refreshAllDataTypes(
            RefreshAllDataTypesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallRefreshDataType {
        RefreshDataTypeResponse refreshDataType(
            RefreshDataTypeRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompanyInfo {
        GetCompanyInfoResponse get(
            GetCompanyInfoRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPushOperation {
        GetPushOperationResponse get(
            GetPushOperationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListPushOperations {
        ListPushOperationsResponse list(
            ListPushOperationsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateAdjustmentTransaction {
        CreateAdjustmentTransactionResponse create(
            CreateAdjustmentTransactionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompanyConfiguration {
        GetCompanyConfigurationResponse get(
            GetCompanyConfigurationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallSetCompanyConfiguration {
        SetCompanyConfigurationResponse set(
            SetCompanyConfigurationRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateExpenseTransaction {
        CreateExpenseTransactionResponse create(
            CreateExpenseTransactionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateExpenseTransaction {
        UpdateExpenseTransactionResponse update(
            UpdateExpenseTransactionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetMappingOptions {
        GetMappingOptionsResponse getMappingOptions(
            GetMappingOptionsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateReimbursableExpenseTransaction {
        CreateReimbursableExpenseTransactionResponse create(
            CreateReimbursableExpenseTransactionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdateReimbursableExpenseTransaction {
        UpdateReimbursableExpenseTransactionResponse update(
            UpdateReimbursableExpenseTransactionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSyncById {
        GetSyncByIdResponse get(
            GetSyncByIdRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetLastSuccessfulSync {
        GetLastSuccessfulSyncResponse getLastSuccessfulSync(
            GetLastSuccessfulSyncRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetLatestSync {
        GetLatestSyncResponse getLatestSync(
            GetLatestSyncRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListSyncs {
        ListSyncsResponse list(
            ListSyncsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSyncTransaction {
        GetSyncTransactionResponse get(
            GetSyncTransactionRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallListSyncTransactions {
        ListSyncTransactionsResponse list(
            ListSyncTransactionsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUploadExpenseAttachment {
        UploadExpenseAttachmentResponse upload(
            UploadExpenseAttachmentRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreateTransferTransaction {
        CreateTransferTransactionResponse create(
            CreateTransferTransactionRequest request,
            Optional<Options> options) throws Exception;
    }


}
