/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ExpensesSyncWebhookPayload {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceCompany")
    private Optional<? extends CompanyReference> referenceCompany;

    /**
     * Unique identifier of the sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncId")
    private Optional<String> syncId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactions")
    private Optional<? extends List<Transaction>> transactions;

    @JsonCreator
    public ExpensesSyncWebhookPayload(
            @JsonProperty("referenceCompany") Optional<? extends CompanyReference> referenceCompany,
            @JsonProperty("syncId") Optional<String> syncId,
            @JsonProperty("transactions") Optional<? extends List<Transaction>> transactions) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        Utils.checkNotNull(syncId, "syncId");
        Utils.checkNotNull(transactions, "transactions");
        this.referenceCompany = referenceCompany;
        this.syncId = syncId;
        this.transactions = transactions;
    }
    
    public ExpensesSyncWebhookPayload() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyReference> referenceCompany() {
        return (Optional<CompanyReference>) referenceCompany;
    }

    /**
     * Unique identifier of the sync.
     */
    @JsonIgnore
    public Optional<String> syncId() {
        return syncId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Transaction>> transactions() {
        return (Optional<List<Transaction>>) transactions;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ExpensesSyncWebhookPayload withReferenceCompany(CompanyReference referenceCompany) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.referenceCompany = Optional.ofNullable(referenceCompany);
        return this;
    }

    public ExpensesSyncWebhookPayload withReferenceCompany(Optional<? extends CompanyReference> referenceCompany) {
        Utils.checkNotNull(referenceCompany, "referenceCompany");
        this.referenceCompany = referenceCompany;
        return this;
    }

    /**
     * Unique identifier of the sync.
     */
    public ExpensesSyncWebhookPayload withSyncId(String syncId) {
        Utils.checkNotNull(syncId, "syncId");
        this.syncId = Optional.ofNullable(syncId);
        return this;
    }

    /**
     * Unique identifier of the sync.
     */
    public ExpensesSyncWebhookPayload withSyncId(Optional<String> syncId) {
        Utils.checkNotNull(syncId, "syncId");
        this.syncId = syncId;
        return this;
    }

    public ExpensesSyncWebhookPayload withTransactions(List<Transaction> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = Optional.ofNullable(transactions);
        return this;
    }

    public ExpensesSyncWebhookPayload withTransactions(Optional<? extends List<Transaction>> transactions) {
        Utils.checkNotNull(transactions, "transactions");
        this.transactions = transactions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExpensesSyncWebhookPayload other = (ExpensesSyncWebhookPayload) o;
        return 
            Objects.deepEquals(this.referenceCompany, other.referenceCompany) &&
            Objects.deepEquals(this.syncId, other.syncId) &&
            Objects.deepEquals(this.transactions, other.transactions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            referenceCompany,
            syncId,
            transactions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExpensesSyncWebhookPayload.class,
                "referenceCompany", referenceCompany,
                "syncId", syncId,
                "transactions", transactions);
    }
    
    public final static class Builder {
 
        private Optional<? extends CompanyReference> referenceCompany = Optional.empty();
 
        private Optional<String> syncId = Optional.empty();
 
        private Optional<? extends List<Transaction>> transactions = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder referenceCompany(CompanyReference referenceCompany) {
            Utils.checkNotNull(referenceCompany, "referenceCompany");
            this.referenceCompany = Optional.ofNullable(referenceCompany);
            return this;
        }

        public Builder referenceCompany(Optional<? extends CompanyReference> referenceCompany) {
            Utils.checkNotNull(referenceCompany, "referenceCompany");
            this.referenceCompany = referenceCompany;
            return this;
        }

        /**
         * Unique identifier of the sync.
         */
        public Builder syncId(String syncId) {
            Utils.checkNotNull(syncId, "syncId");
            this.syncId = Optional.ofNullable(syncId);
            return this;
        }

        /**
         * Unique identifier of the sync.
         */
        public Builder syncId(Optional<String> syncId) {
            Utils.checkNotNull(syncId, "syncId");
            this.syncId = syncId;
            return this;
        }

        public Builder transactions(List<Transaction> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = Optional.ofNullable(transactions);
            return this;
        }

        public Builder transactions(Optional<? extends List<Transaction>> transactions) {
            Utils.checkNotNull(transactions, "transactions");
            this.transactions = transactions;
            return this;
        }
        
        public ExpensesSyncWebhookPayload build() {
            return new ExpensesSyncWebhookPayload(
                referenceCompany,
                syncId,
                transactions);
        }
    }
}

