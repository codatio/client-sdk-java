/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class TransferTransactionRequest {

    @JsonProperty("date")
    private String date;

    /**
     * Any private, company notes about the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonProperty("from")
    private From from;

    @JsonProperty("to")
    private To to;

    @JsonCreator
    public TransferTransactionRequest(
            @JsonProperty("date") String date,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("from") From from,
            @JsonProperty("to") To to) {
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(to, "to");
        this.date = date;
        this.description = description;
        this.from = from;
        this.to = to;
    }
    
    public TransferTransactionRequest(
            String date,
            From from,
            To to) {
        this(date, Optional.empty(), from, to);
    }

    @JsonIgnore
    public String date() {
        return date;
    }

    /**
     * Any private, company notes about the transaction.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public From from() {
        return from;
    }

    @JsonIgnore
    public To to() {
        return to;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TransferTransactionRequest withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Any private, company notes about the transaction.
     */
    public TransferTransactionRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Any private, company notes about the transaction.
     */
    public TransferTransactionRequest withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public TransferTransactionRequest withFrom(From from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public TransferTransactionRequest withTo(To to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransferTransactionRequest other = (TransferTransactionRequest) o;
        return 
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.from, other.from) &&
            Objects.deepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            date,
            description,
            from,
            to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransferTransactionRequest.class,
                "date", date,
                "description", description,
                "from", from,
                "to", to);
    }
    
    public final static class Builder {
 
        private String date;
 
        private Optional<String> description = Optional.empty();
 
        private From from;
 
        private To to;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        /**
         * Any private, company notes about the transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Any private, company notes about the transaction.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder from(From from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder to(To to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }
        
        public TransferTransactionRequest build() {
            return new TransferTransactionRequest(
                date,
                description,
                from,
                to);
        }
    }
}

