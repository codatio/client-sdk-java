/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class TrackingCategoryMappingInfo {

    /**
     * Boolean of whether the tracking category has child categories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasChildren")
    private Optional<Boolean> hasChildren;

    /**
     * Unique identifier of the tracking category.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Name of the tracking category as it appears in the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * ID of the parent tracking category
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentId")
    private JsonNullable<String> parentId;

    @JsonCreator
    public TrackingCategoryMappingInfo(
            @JsonProperty("hasChildren") Optional<Boolean> hasChildren,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("parentId") JsonNullable<String> parentId) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(parentId, "parentId");
        this.hasChildren = hasChildren;
        this.id = id;
        this.name = name;
        this.parentId = parentId;
    }
    
    public TrackingCategoryMappingInfo() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Boolean of whether the tracking category has child categories.
     */
    @JsonIgnore
    public Optional<Boolean> hasChildren() {
        return hasChildren;
    }

    /**
     * Unique identifier of the tracking category.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Name of the tracking category as it appears in the accounting software.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * ID of the parent tracking category
     */
    @JsonIgnore
    public JsonNullable<String> parentId() {
        return parentId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Boolean of whether the tracking category has child categories.
     */
    public TrackingCategoryMappingInfo withHasChildren(boolean hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = Optional.ofNullable(hasChildren);
        return this;
    }

    /**
     * Boolean of whether the tracking category has child categories.
     */
    public TrackingCategoryMappingInfo withHasChildren(Optional<Boolean> hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = hasChildren;
        return this;
    }

    /**
     * Unique identifier of the tracking category.
     */
    public TrackingCategoryMappingInfo withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier of the tracking category.
     */
    public TrackingCategoryMappingInfo withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the tracking category as it appears in the accounting software.
     */
    public TrackingCategoryMappingInfo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name of the tracking category as it appears in the accounting software.
     */
    public TrackingCategoryMappingInfo withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * ID of the parent tracking category
     */
    public TrackingCategoryMappingInfo withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = JsonNullable.of(parentId);
        return this;
    }

    /**
     * ID of the parent tracking category
     */
    public TrackingCategoryMappingInfo withParentId(JsonNullable<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TrackingCategoryMappingInfo other = (TrackingCategoryMappingInfo) o;
        return 
            Objects.deepEquals(this.hasChildren, other.hasChildren) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.parentId, other.parentId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            hasChildren,
            id,
            name,
            parentId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TrackingCategoryMappingInfo.class,
                "hasChildren", hasChildren,
                "id", id,
                "name", name,
                "parentId", parentId);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> hasChildren = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private JsonNullable<String> parentId = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Boolean of whether the tracking category has child categories.
         */
        public Builder hasChildren(boolean hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = Optional.ofNullable(hasChildren);
            return this;
        }

        /**
         * Boolean of whether the tracking category has child categories.
         */
        public Builder hasChildren(Optional<Boolean> hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = hasChildren;
            return this;
        }

        /**
         * Unique identifier of the tracking category.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier of the tracking category.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the tracking category as it appears in the accounting software.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name of the tracking category as it appears in the accounting software.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * ID of the parent tracking category
         */
        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = JsonNullable.of(parentId);
            return this;
        }

        /**
         * ID of the parent tracking category
         */
        public Builder parentId(JsonNullable<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }
        
        public TrackingCategoryMappingInfo build() {
            return new TrackingCategoryMappingInfo(
                hasChildren,
                id,
                name,
                parentId);
        }
    }
}

