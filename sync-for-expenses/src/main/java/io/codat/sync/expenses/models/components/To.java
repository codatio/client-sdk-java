/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.math.BigDecimal;
import java.util.Objects;


public class To {

    /**
     * Reference of the account you are transferring money to.
     */
    @JsonProperty("accountRef")
    private TransferTransactionRequestAccountReference accountRef;

    /**
     * Amount that has been transferred to the account in the native currency of the account.
     */
    @JsonProperty("amount")
    private BigDecimal amount;

    @JsonCreator
    public To(
            @JsonProperty("accountRef") TransferTransactionRequestAccountReference accountRef,
            @JsonProperty("amount") BigDecimal amount) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(amount, "amount");
        this.accountRef = accountRef;
        this.amount = amount;
    }

    /**
     * Reference of the account you are transferring money to.
     */
    @JsonIgnore
    public TransferTransactionRequestAccountReference accountRef() {
        return accountRef;
    }

    /**
     * Amount that has been transferred to the account in the native currency of the account.
     */
    @JsonIgnore
    public BigDecimal amount() {
        return amount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Reference of the account you are transferring money to.
     */
    public To withAccountRef(TransferTransactionRequestAccountReference accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

        /**
         * Amount that has been transferred to the account in the native currency of the account.
         */
    public To withAmount(double amount) {
        this.amount = BigDecimal.valueOf(amount);
        return this;
    }

    /**
     * Amount that has been transferred to the account in the native currency of the account.
     */
    public To withAmount(BigDecimal amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        To other = (To) o;
        return 
            Objects.deepEquals(this.accountRef, other.accountRef) &&
            Objects.deepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountRef,
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(To.class,
                "accountRef", accountRef,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private TransferTransactionRequestAccountReference accountRef;
 
        private BigDecimal amount;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Reference of the account you are transferring money to.
         */
        public Builder accountRef(TransferTransactionRequestAccountReference accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * Amount that has been transferred to the account in the native currency of the account.
         */
        public Builder amount(double amount) {
            this.amount = BigDecimal.valueOf(amount);
            return this;
        }

        /**
         * Amount that has been transferred to the account in the native currency of the account.
         */
        public Builder amount(BigDecimal amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public To build() {
            return new To(
                accountRef,
                amount);
        }
    }
}

