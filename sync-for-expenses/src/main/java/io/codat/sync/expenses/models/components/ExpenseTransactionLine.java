/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class ExpenseTransactionLine {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountRef")
    private Optional<? extends RecordRef> accountRef;

    /**
     * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceTo")
    private JsonNullable<? extends InvoiceTo> invoiceTo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemRef")
    private JsonNullable<? extends ItemRef> itemRef;

    /**
     * Amount of the line, exclusive of tax.
     */
    @JsonProperty("netAmount")
    private BigDecimal netAmount;

    /**
     * Amount of tax for the line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxAmount")
    private Optional<? extends BigDecimal> taxAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxRateRef")
    private Optional<? extends RecordRef> taxRateRef;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingRefs")
    private JsonNullable<? extends List<TrackingRef>> trackingRefs;

    @JsonCreator
    public ExpenseTransactionLine(
            @JsonProperty("accountRef") Optional<? extends RecordRef> accountRef,
            @JsonProperty("invoiceTo") JsonNullable<? extends InvoiceTo> invoiceTo,
            @JsonProperty("itemRef") JsonNullable<? extends ItemRef> itemRef,
            @JsonProperty("netAmount") BigDecimal netAmount,
            @JsonProperty("taxAmount") Optional<? extends BigDecimal> taxAmount,
            @JsonProperty("taxRateRef") Optional<? extends RecordRef> taxRateRef,
            @JsonProperty("trackingRefs") JsonNullable<? extends List<TrackingRef>> trackingRefs) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(invoiceTo, "invoiceTo");
        Utils.checkNotNull(itemRef, "itemRef");
        Utils.checkNotNull(netAmount, "netAmount");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        Utils.checkNotNull(trackingRefs, "trackingRefs");
        this.accountRef = accountRef;
        this.invoiceTo = invoiceTo;
        this.itemRef = itemRef;
        this.netAmount = netAmount;
        this.taxAmount = taxAmount;
        this.taxRateRef = taxRateRef;
        this.trackingRefs = trackingRefs;
    }
    
    public ExpenseTransactionLine(
            BigDecimal netAmount) {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), netAmount, Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RecordRef> accountRef() {
        return (Optional<RecordRef>) accountRef;
    }

    /**
     * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceTo> invoiceTo() {
        return (JsonNullable<InvoiceTo>) invoiceTo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ItemRef> itemRef() {
        return (JsonNullable<ItemRef>) itemRef;
    }

    /**
     * Amount of the line, exclusive of tax.
     */
    @JsonIgnore
    public BigDecimal netAmount() {
        return netAmount;
    }

    /**
     * Amount of tax for the line.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BigDecimal> taxAmount() {
        return (Optional<BigDecimal>) taxAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RecordRef> taxRateRef() {
        return (Optional<RecordRef>) taxRateRef;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TrackingRef>> trackingRefs() {
        return (JsonNullable<List<TrackingRef>>) trackingRefs;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ExpenseTransactionLine withAccountRef(RecordRef accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = Optional.ofNullable(accountRef);
        return this;
    }

    public ExpenseTransactionLine withAccountRef(Optional<? extends RecordRef> accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

    /**
     * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
     */
    public ExpenseTransactionLine withInvoiceTo(InvoiceTo invoiceTo) {
        Utils.checkNotNull(invoiceTo, "invoiceTo");
        this.invoiceTo = JsonNullable.of(invoiceTo);
        return this;
    }

    /**
     * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
     */
    public ExpenseTransactionLine withInvoiceTo(JsonNullable<? extends InvoiceTo> invoiceTo) {
        Utils.checkNotNull(invoiceTo, "invoiceTo");
        this.invoiceTo = invoiceTo;
        return this;
    }

    public ExpenseTransactionLine withItemRef(ItemRef itemRef) {
        Utils.checkNotNull(itemRef, "itemRef");
        this.itemRef = JsonNullable.of(itemRef);
        return this;
    }

    public ExpenseTransactionLine withItemRef(JsonNullable<? extends ItemRef> itemRef) {
        Utils.checkNotNull(itemRef, "itemRef");
        this.itemRef = itemRef;
        return this;
    }

        /**
         * Amount of the line, exclusive of tax.
         */
    public ExpenseTransactionLine withNetAmount(double netAmount) {
        this.netAmount = BigDecimal.valueOf(netAmount);
        return this;
    }

    /**
     * Amount of the line, exclusive of tax.
     */
    public ExpenseTransactionLine withNetAmount(BigDecimal netAmount) {
        Utils.checkNotNull(netAmount, "netAmount");
        this.netAmount = netAmount;
        return this;
    }

    /**
     * Amount of tax for the line.
     */
    public ExpenseTransactionLine withTaxAmount(BigDecimal taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = Optional.ofNullable(taxAmount);
        return this;
    }

        /**
         * Amount of tax for the line.
         */
    public ExpenseTransactionLine withTaxAmount(double taxAmount) {
        this.taxAmount = Optional.of(BigDecimal.valueOf(taxAmount));
        return this;
    }

    /**
     * Amount of tax for the line.
     */
    public ExpenseTransactionLine withTaxAmount(Optional<? extends BigDecimal> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    public ExpenseTransactionLine withTaxRateRef(RecordRef taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = Optional.ofNullable(taxRateRef);
        return this;
    }

    public ExpenseTransactionLine withTaxRateRef(Optional<? extends RecordRef> taxRateRef) {
        Utils.checkNotNull(taxRateRef, "taxRateRef");
        this.taxRateRef = taxRateRef;
        return this;
    }

    public ExpenseTransactionLine withTrackingRefs(List<TrackingRef> trackingRefs) {
        Utils.checkNotNull(trackingRefs, "trackingRefs");
        this.trackingRefs = JsonNullable.of(trackingRefs);
        return this;
    }

    public ExpenseTransactionLine withTrackingRefs(JsonNullable<? extends List<TrackingRef>> trackingRefs) {
        Utils.checkNotNull(trackingRefs, "trackingRefs");
        this.trackingRefs = trackingRefs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExpenseTransactionLine other = (ExpenseTransactionLine) o;
        return 
            Objects.deepEquals(this.accountRef, other.accountRef) &&
            Objects.deepEquals(this.invoiceTo, other.invoiceTo) &&
            Objects.deepEquals(this.itemRef, other.itemRef) &&
            Objects.deepEquals(this.netAmount, other.netAmount) &&
            Objects.deepEquals(this.taxAmount, other.taxAmount) &&
            Objects.deepEquals(this.taxRateRef, other.taxRateRef) &&
            Objects.deepEquals(this.trackingRefs, other.trackingRefs);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountRef,
            invoiceTo,
            itemRef,
            netAmount,
            taxAmount,
            taxRateRef,
            trackingRefs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExpenseTransactionLine.class,
                "accountRef", accountRef,
                "invoiceTo", invoiceTo,
                "itemRef", itemRef,
                "netAmount", netAmount,
                "taxAmount", taxAmount,
                "taxRateRef", taxRateRef,
                "trackingRefs", trackingRefs);
    }
    
    public final static class Builder {
 
        private Optional<? extends RecordRef> accountRef = Optional.empty();
 
        private JsonNullable<? extends InvoiceTo> invoiceTo = JsonNullable.undefined();
 
        private JsonNullable<? extends ItemRef> itemRef = JsonNullable.undefined();
 
        private BigDecimal netAmount;
 
        private Optional<? extends BigDecimal> taxAmount = Optional.empty();
 
        private Optional<? extends RecordRef> taxRateRef = Optional.empty();
 
        private JsonNullable<? extends List<TrackingRef>> trackingRefs = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountRef(RecordRef accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = Optional.ofNullable(accountRef);
            return this;
        }

        public Builder accountRef(Optional<? extends RecordRef> accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
         */
        public Builder invoiceTo(InvoiceTo invoiceTo) {
            Utils.checkNotNull(invoiceTo, "invoiceTo");
            this.invoiceTo = JsonNullable.of(invoiceTo);
            return this;
        }

        /**
         * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
         */
        public Builder invoiceTo(JsonNullable<? extends InvoiceTo> invoiceTo) {
            Utils.checkNotNull(invoiceTo, "invoiceTo");
            this.invoiceTo = invoiceTo;
            return this;
        }

        public Builder itemRef(ItemRef itemRef) {
            Utils.checkNotNull(itemRef, "itemRef");
            this.itemRef = JsonNullable.of(itemRef);
            return this;
        }

        public Builder itemRef(JsonNullable<? extends ItemRef> itemRef) {
            Utils.checkNotNull(itemRef, "itemRef");
            this.itemRef = itemRef;
            return this;
        }

        /**
         * Amount of the line, exclusive of tax.
         */
        public Builder netAmount(double netAmount) {
            this.netAmount = BigDecimal.valueOf(netAmount);
            return this;
        }

        /**
         * Amount of the line, exclusive of tax.
         */
        public Builder netAmount(BigDecimal netAmount) {
            Utils.checkNotNull(netAmount, "netAmount");
            this.netAmount = netAmount;
            return this;
        }

        /**
         * Amount of tax for the line.
         */
        public Builder taxAmount(BigDecimal taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        /**
         * Amount of tax for the line.
         */
        public Builder taxAmount(double taxAmount) {
            this.taxAmount = Optional.of(BigDecimal.valueOf(taxAmount));
            return this;
        }

        /**
         * Amount of tax for the line.
         */
        public Builder taxAmount(Optional<? extends BigDecimal> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        public Builder taxRateRef(RecordRef taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = Optional.ofNullable(taxRateRef);
            return this;
        }

        public Builder taxRateRef(Optional<? extends RecordRef> taxRateRef) {
            Utils.checkNotNull(taxRateRef, "taxRateRef");
            this.taxRateRef = taxRateRef;
            return this;
        }

        public Builder trackingRefs(List<TrackingRef> trackingRefs) {
            Utils.checkNotNull(trackingRefs, "trackingRefs");
            this.trackingRefs = JsonNullable.of(trackingRefs);
            return this;
        }

        public Builder trackingRefs(JsonNullable<? extends List<TrackingRef>> trackingRefs) {
            Utils.checkNotNull(trackingRefs, "trackingRefs");
            this.trackingRefs = trackingRefs;
            return this;
        }
        
        public ExpenseTransactionLine build() {
            return new ExpenseTransactionLine(
                accountRef,
                invoiceTo,
                itemRef,
                netAmount,
                taxAmount,
                taxRateRef,
                trackingRefs);
        }
    }
}

