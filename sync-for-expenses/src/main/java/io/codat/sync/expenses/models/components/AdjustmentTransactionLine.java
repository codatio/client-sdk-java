/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class AdjustmentTransactionLine {

    @JsonProperty("accountRef")
    private RecordRef accountRef;

    /**
     * Amount of the line. A positive line represents a debit; a negative line represents a credit.
     */
    @JsonProperty("amount")
    private BigDecimal amount;

    /**
     * Any private, company notes about the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoiceTo")
    private JsonNullable<? extends InvoiceTo> invoiceTo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trackingRefs")
    private JsonNullable<? extends List<TrackingRefAdjustmentTransaction>> trackingRefs;

    @JsonCreator
    public AdjustmentTransactionLine(
            @JsonProperty("accountRef") RecordRef accountRef,
            @JsonProperty("amount") BigDecimal amount,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("invoiceTo") JsonNullable<? extends InvoiceTo> invoiceTo,
            @JsonProperty("trackingRefs") JsonNullable<? extends List<TrackingRefAdjustmentTransaction>> trackingRefs) {
        Utils.checkNotNull(accountRef, "accountRef");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(invoiceTo, "invoiceTo");
        Utils.checkNotNull(trackingRefs, "trackingRefs");
        this.accountRef = accountRef;
        this.amount = amount;
        this.description = description;
        this.invoiceTo = invoiceTo;
        this.trackingRefs = trackingRefs;
    }
    
    public AdjustmentTransactionLine(
            RecordRef accountRef,
            BigDecimal amount) {
        this(accountRef, amount, Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public RecordRef accountRef() {
        return accountRef;
    }

    /**
     * Amount of the line. A positive line represents a debit; a negative line represents a credit.
     */
    @JsonIgnore
    public BigDecimal amount() {
        return amount;
    }

    /**
     * Any private, company notes about the transaction.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<InvoiceTo> invoiceTo() {
        return (JsonNullable<InvoiceTo>) invoiceTo;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<TrackingRefAdjustmentTransaction>> trackingRefs() {
        return (JsonNullable<List<TrackingRefAdjustmentTransaction>>) trackingRefs;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AdjustmentTransactionLine withAccountRef(RecordRef accountRef) {
        Utils.checkNotNull(accountRef, "accountRef");
        this.accountRef = accountRef;
        return this;
    }

        /**
         * Amount of the line. A positive line represents a debit; a negative line represents a credit.
         */
    public AdjustmentTransactionLine withAmount(double amount) {
        this.amount = BigDecimal.valueOf(amount);
        return this;
    }

    /**
     * Amount of the line. A positive line represents a debit; a negative line represents a credit.
     */
    public AdjustmentTransactionLine withAmount(BigDecimal amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * Any private, company notes about the transaction.
     */
    public AdjustmentTransactionLine withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Any private, company notes about the transaction.
     */
    public AdjustmentTransactionLine withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
     */
    public AdjustmentTransactionLine withInvoiceTo(InvoiceTo invoiceTo) {
        Utils.checkNotNull(invoiceTo, "invoiceTo");
        this.invoiceTo = JsonNullable.of(invoiceTo);
        return this;
    }

    /**
     * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
     */
    public AdjustmentTransactionLine withInvoiceTo(JsonNullable<? extends InvoiceTo> invoiceTo) {
        Utils.checkNotNull(invoiceTo, "invoiceTo");
        this.invoiceTo = invoiceTo;
        return this;
    }

    public AdjustmentTransactionLine withTrackingRefs(List<TrackingRefAdjustmentTransaction> trackingRefs) {
        Utils.checkNotNull(trackingRefs, "trackingRefs");
        this.trackingRefs = JsonNullable.of(trackingRefs);
        return this;
    }

    public AdjustmentTransactionLine withTrackingRefs(JsonNullable<? extends List<TrackingRefAdjustmentTransaction>> trackingRefs) {
        Utils.checkNotNull(trackingRefs, "trackingRefs");
        this.trackingRefs = trackingRefs;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdjustmentTransactionLine other = (AdjustmentTransactionLine) o;
        return 
            Objects.deepEquals(this.accountRef, other.accountRef) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.invoiceTo, other.invoiceTo) &&
            Objects.deepEquals(this.trackingRefs, other.trackingRefs);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountRef,
            amount,
            description,
            invoiceTo,
            trackingRefs);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AdjustmentTransactionLine.class,
                "accountRef", accountRef,
                "amount", amount,
                "description", description,
                "invoiceTo", invoiceTo,
                "trackingRefs", trackingRefs);
    }
    
    public final static class Builder {
 
        private RecordRef accountRef;
 
        private BigDecimal amount;
 
        private Optional<String> description = Optional.empty();
 
        private JsonNullable<? extends InvoiceTo> invoiceTo = JsonNullable.undefined();
 
        private JsonNullable<? extends List<TrackingRefAdjustmentTransaction>> trackingRefs = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountRef(RecordRef accountRef) {
            Utils.checkNotNull(accountRef, "accountRef");
            this.accountRef = accountRef;
            return this;
        }

        /**
         * Amount of the line. A positive line represents a debit; a negative line represents a credit.
         */
        public Builder amount(double amount) {
            this.amount = BigDecimal.valueOf(amount);
            return this;
        }

        /**
         * Amount of the line. A positive line represents a debit; a negative line represents a credit.
         */
        public Builder amount(BigDecimal amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * Any private, company notes about the transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Any private, company notes about the transaction.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
         */
        public Builder invoiceTo(InvoiceTo invoiceTo) {
            Utils.checkNotNull(invoiceTo, "invoiceTo");
            this.invoiceTo = JsonNullable.of(invoiceTo);
            return this;
        }

        /**
         * Unique identifier for the customer billed for the transaction. The `invoiceTo` object is currently supported only for QuickBooks Online and QuickBooks Desktop.
         */
        public Builder invoiceTo(JsonNullable<? extends InvoiceTo> invoiceTo) {
            Utils.checkNotNull(invoiceTo, "invoiceTo");
            this.invoiceTo = invoiceTo;
            return this;
        }

        public Builder trackingRefs(List<TrackingRefAdjustmentTransaction> trackingRefs) {
            Utils.checkNotNull(trackingRefs, "trackingRefs");
            this.trackingRefs = JsonNullable.of(trackingRefs);
            return this;
        }

        public Builder trackingRefs(JsonNullable<? extends List<TrackingRefAdjustmentTransaction>> trackingRefs) {
            Utils.checkNotNull(trackingRefs, "trackingRefs");
            this.trackingRefs = trackingRefs;
            return this;
        }
        
        public AdjustmentTransactionLine build() {
            return new AdjustmentTransactionLine(
                accountRef,
                amount,
                description,
                invoiceTo,
                trackingRefs);
        }
    }
}

