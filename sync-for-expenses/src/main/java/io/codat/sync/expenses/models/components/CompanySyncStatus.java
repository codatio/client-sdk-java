/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class CompanySyncStatus {

    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companyId")
    private JsonNullable<String> companyId;

    /**
     * Boolean of whether the sync resulted in data being pushed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataPushed")
    private Optional<Boolean> dataPushed;

    /**
     * Error message of the sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    private JsonNullable<String> errorMessage;

    /**
     * Exception message of the sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncExceptionMessage")
    private JsonNullable<String> syncExceptionMessage;

    /**
     * Unique identifier of the sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncId")
    private JsonNullable<String> syncId;

    /**
     * Text status of the sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncStatus")
    private JsonNullable<String> syncStatus;

    /**
     * Status code of the sync.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncStatusCode")
    private Optional<Integer> syncStatusCode;

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("syncUtc")
    private Optional<String> syncUtc;

    @JsonCreator
    public CompanySyncStatus(
            @JsonProperty("companyId") JsonNullable<String> companyId,
            @JsonProperty("dataPushed") Optional<Boolean> dataPushed,
            @JsonProperty("errorMessage") JsonNullable<String> errorMessage,
            @JsonProperty("syncExceptionMessage") JsonNullable<String> syncExceptionMessage,
            @JsonProperty("syncId") JsonNullable<String> syncId,
            @JsonProperty("syncStatus") JsonNullable<String> syncStatus,
            @JsonProperty("syncStatusCode") Optional<Integer> syncStatusCode,
            @JsonProperty("syncUtc") Optional<String> syncUtc) {
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(dataPushed, "dataPushed");
        Utils.checkNotNull(errorMessage, "errorMessage");
        Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
        Utils.checkNotNull(syncId, "syncId");
        Utils.checkNotNull(syncStatus, "syncStatus");
        Utils.checkNotNull(syncStatusCode, "syncStatusCode");
        Utils.checkNotNull(syncUtc, "syncUtc");
        this.companyId = companyId;
        this.dataPushed = dataPushed;
        this.errorMessage = errorMessage;
        this.syncExceptionMessage = syncExceptionMessage;
        this.syncId = syncId;
        this.syncStatus = syncStatus;
        this.syncStatusCode = syncStatusCode;
        this.syncUtc = syncUtc;
    }
    
    public CompanySyncStatus() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    @JsonIgnore
    public JsonNullable<String> companyId() {
        return companyId;
    }

    /**
     * Boolean of whether the sync resulted in data being pushed.
     */
    @JsonIgnore
    public Optional<Boolean> dataPushed() {
        return dataPushed;
    }

    /**
     * Error message of the sync.
     */
    @JsonIgnore
    public JsonNullable<String> errorMessage() {
        return errorMessage;
    }

    /**
     * Exception message of the sync.
     */
    @JsonIgnore
    public JsonNullable<String> syncExceptionMessage() {
        return syncExceptionMessage;
    }

    /**
     * Unique identifier of the sync.
     */
    @JsonIgnore
    public JsonNullable<String> syncId() {
        return syncId;
    }

    /**
     * Text status of the sync.
     */
    @JsonIgnore
    public JsonNullable<String> syncStatus() {
        return syncStatus;
    }

    /**
     * Status code of the sync.
     */
    @JsonIgnore
    public Optional<Integer> syncStatusCode() {
        return syncStatusCode;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    @JsonIgnore
    public Optional<String> syncUtc() {
        return syncUtc;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    public CompanySyncStatus withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = JsonNullable.of(companyId);
        return this;
    }

    /**
     * Unique identifier for your SMB in Codat.
     */
    public CompanySyncStatus withCompanyId(JsonNullable<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Boolean of whether the sync resulted in data being pushed.
     */
    public CompanySyncStatus withDataPushed(boolean dataPushed) {
        Utils.checkNotNull(dataPushed, "dataPushed");
        this.dataPushed = Optional.ofNullable(dataPushed);
        return this;
    }

    /**
     * Boolean of whether the sync resulted in data being pushed.
     */
    public CompanySyncStatus withDataPushed(Optional<Boolean> dataPushed) {
        Utils.checkNotNull(dataPushed, "dataPushed");
        this.dataPushed = dataPushed;
        return this;
    }

    /**
     * Error message of the sync.
     */
    public CompanySyncStatus withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = JsonNullable.of(errorMessage);
        return this;
    }

    /**
     * Error message of the sync.
     */
    public CompanySyncStatus withErrorMessage(JsonNullable<String> errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Exception message of the sync.
     */
    public CompanySyncStatus withSyncExceptionMessage(String syncExceptionMessage) {
        Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
        this.syncExceptionMessage = JsonNullable.of(syncExceptionMessage);
        return this;
    }

    /**
     * Exception message of the sync.
     */
    public CompanySyncStatus withSyncExceptionMessage(JsonNullable<String> syncExceptionMessage) {
        Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
        this.syncExceptionMessage = syncExceptionMessage;
        return this;
    }

    /**
     * Unique identifier of the sync.
     */
    public CompanySyncStatus withSyncId(String syncId) {
        Utils.checkNotNull(syncId, "syncId");
        this.syncId = JsonNullable.of(syncId);
        return this;
    }

    /**
     * Unique identifier of the sync.
     */
    public CompanySyncStatus withSyncId(JsonNullable<String> syncId) {
        Utils.checkNotNull(syncId, "syncId");
        this.syncId = syncId;
        return this;
    }

    /**
     * Text status of the sync.
     */
    public CompanySyncStatus withSyncStatus(String syncStatus) {
        Utils.checkNotNull(syncStatus, "syncStatus");
        this.syncStatus = JsonNullable.of(syncStatus);
        return this;
    }

    /**
     * Text status of the sync.
     */
    public CompanySyncStatus withSyncStatus(JsonNullable<String> syncStatus) {
        Utils.checkNotNull(syncStatus, "syncStatus");
        this.syncStatus = syncStatus;
        return this;
    }

    /**
     * Status code of the sync.
     */
    public CompanySyncStatus withSyncStatusCode(int syncStatusCode) {
        Utils.checkNotNull(syncStatusCode, "syncStatusCode");
        this.syncStatusCode = Optional.ofNullable(syncStatusCode);
        return this;
    }

    /**
     * Status code of the sync.
     */
    public CompanySyncStatus withSyncStatusCode(Optional<Integer> syncStatusCode) {
        Utils.checkNotNull(syncStatusCode, "syncStatusCode");
        this.syncStatusCode = syncStatusCode;
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public CompanySyncStatus withSyncUtc(String syncUtc) {
        Utils.checkNotNull(syncUtc, "syncUtc");
        this.syncUtc = Optional.ofNullable(syncUtc);
        return this;
    }

    /**
     * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * &gt; Time zones
     * &gt; 
     * &gt; Not all dates from Codat will contain information about time zones.  
     * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     */
    public CompanySyncStatus withSyncUtc(Optional<String> syncUtc) {
        Utils.checkNotNull(syncUtc, "syncUtc");
        this.syncUtc = syncUtc;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanySyncStatus other = (CompanySyncStatus) o;
        return 
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.dataPushed, other.dataPushed) &&
            Objects.deepEquals(this.errorMessage, other.errorMessage) &&
            Objects.deepEquals(this.syncExceptionMessage, other.syncExceptionMessage) &&
            Objects.deepEquals(this.syncId, other.syncId) &&
            Objects.deepEquals(this.syncStatus, other.syncStatus) &&
            Objects.deepEquals(this.syncStatusCode, other.syncStatusCode) &&
            Objects.deepEquals(this.syncUtc, other.syncUtc);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyId,
            dataPushed,
            errorMessage,
            syncExceptionMessage,
            syncId,
            syncStatus,
            syncStatusCode,
            syncUtc);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanySyncStatus.class,
                "companyId", companyId,
                "dataPushed", dataPushed,
                "errorMessage", errorMessage,
                "syncExceptionMessage", syncExceptionMessage,
                "syncId", syncId,
                "syncStatus", syncStatus,
                "syncStatusCode", syncStatusCode,
                "syncUtc", syncUtc);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> companyId = JsonNullable.undefined();
 
        private Optional<Boolean> dataPushed = Optional.empty();
 
        private JsonNullable<String> errorMessage = JsonNullable.undefined();
 
        private JsonNullable<String> syncExceptionMessage = JsonNullable.undefined();
 
        private JsonNullable<String> syncId = JsonNullable.undefined();
 
        private JsonNullable<String> syncStatus = JsonNullable.undefined();
 
        private Optional<Integer> syncStatusCode = Optional.empty();
 
        private Optional<String> syncUtc = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for your SMB in Codat.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = JsonNullable.of(companyId);
            return this;
        }

        /**
         * Unique identifier for your SMB in Codat.
         */
        public Builder companyId(JsonNullable<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Boolean of whether the sync resulted in data being pushed.
         */
        public Builder dataPushed(boolean dataPushed) {
            Utils.checkNotNull(dataPushed, "dataPushed");
            this.dataPushed = Optional.ofNullable(dataPushed);
            return this;
        }

        /**
         * Boolean of whether the sync resulted in data being pushed.
         */
        public Builder dataPushed(Optional<Boolean> dataPushed) {
            Utils.checkNotNull(dataPushed, "dataPushed");
            this.dataPushed = dataPushed;
            return this;
        }

        /**
         * Error message of the sync.
         */
        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = JsonNullable.of(errorMessage);
            return this;
        }

        /**
         * Error message of the sync.
         */
        public Builder errorMessage(JsonNullable<String> errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }

        /**
         * Exception message of the sync.
         */
        public Builder syncExceptionMessage(String syncExceptionMessage) {
            Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
            this.syncExceptionMessage = JsonNullable.of(syncExceptionMessage);
            return this;
        }

        /**
         * Exception message of the sync.
         */
        public Builder syncExceptionMessage(JsonNullable<String> syncExceptionMessage) {
            Utils.checkNotNull(syncExceptionMessage, "syncExceptionMessage");
            this.syncExceptionMessage = syncExceptionMessage;
            return this;
        }

        /**
         * Unique identifier of the sync.
         */
        public Builder syncId(String syncId) {
            Utils.checkNotNull(syncId, "syncId");
            this.syncId = JsonNullable.of(syncId);
            return this;
        }

        /**
         * Unique identifier of the sync.
         */
        public Builder syncId(JsonNullable<String> syncId) {
            Utils.checkNotNull(syncId, "syncId");
            this.syncId = syncId;
            return this;
        }

        /**
         * Text status of the sync.
         */
        public Builder syncStatus(String syncStatus) {
            Utils.checkNotNull(syncStatus, "syncStatus");
            this.syncStatus = JsonNullable.of(syncStatus);
            return this;
        }

        /**
         * Text status of the sync.
         */
        public Builder syncStatus(JsonNullable<String> syncStatus) {
            Utils.checkNotNull(syncStatus, "syncStatus");
            this.syncStatus = syncStatus;
            return this;
        }

        /**
         * Status code of the sync.
         */
        public Builder syncStatusCode(int syncStatusCode) {
            Utils.checkNotNull(syncStatusCode, "syncStatusCode");
            this.syncStatusCode = Optional.ofNullable(syncStatusCode);
            return this;
        }

        /**
         * Status code of the sync.
         */
        public Builder syncStatusCode(Optional<Integer> syncStatusCode) {
            Utils.checkNotNull(syncStatusCode, "syncStatusCode");
            this.syncStatusCode = syncStatusCode;
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder syncUtc(String syncUtc) {
            Utils.checkNotNull(syncUtc, "syncUtc");
            this.syncUtc = Optional.ofNullable(syncUtc);
            return this;
        }

        /**
         * In Codat's data model, dates and times are represented using the &lt;a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank"&gt;ISO 8601 standard&lt;/a&gt;. Date and time fields are formatted as strings; for example:
         * 
         * ```
         * 2020-10-08T22:40:50Z
         * 2021-01-01T00:00:00
         * ```
         * 
         * 
         * 
         * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
         * 
         * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
         * - Unqualified local time: `2021-11-15T01:00:00`
         * - UTC time offsets: `2021-11-15T01:00:00-05:00`
         * 
         * &gt; Time zones
         * &gt; 
         * &gt; Not all dates from Codat will contain information about time zones.  
         * &gt; Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
         */
        public Builder syncUtc(Optional<String> syncUtc) {
            Utils.checkNotNull(syncUtc, "syncUtc");
            this.syncUtc = syncUtc;
            return this;
        }
        
        public CompanySyncStatus build() {
            return new CompanySyncStatus(
                companyId,
                dataPushed,
                errorMessage,
                syncExceptionMessage,
                syncId,
                syncStatus,
                syncStatusCode,
                syncUtc);
        }
    }
}

