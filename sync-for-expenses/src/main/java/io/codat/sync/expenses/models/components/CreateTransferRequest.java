/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.expenses.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateTransferRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private Optional<? extends String> date;

    /**
     * Any private, company notes about the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<? extends TransferDetails> from;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    private Optional<? extends TransferDetails> to;

    public CreateTransferRequest(
            @JsonProperty("date") Optional<? extends String> date,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("from") Optional<? extends TransferDetails> from,
            @JsonProperty("to") Optional<? extends TransferDetails> to) {
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(to, "to");
        this.date = date;
        this.description = description;
        this.from = from;
        this.to = to;
    }

    public Optional<? extends String> date() {
        return date;
    }

    /**
     * Any private, company notes about the transaction.
     */
    public Optional<? extends String> description() {
        return description;
    }

    public Optional<? extends TransferDetails> from() {
        return from;
    }

    public Optional<? extends TransferDetails> to() {
        return to;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateTransferRequest withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    public CreateTransferRequest withDate(Optional<? extends String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    /**
     * Any private, company notes about the transaction.
     */
    public CreateTransferRequest withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Any private, company notes about the transaction.
     */
    public CreateTransferRequest withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public CreateTransferRequest withFrom(TransferDetails from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    public CreateTransferRequest withFrom(Optional<? extends TransferDetails> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public CreateTransferRequest withTo(TransferDetails to) {
        Utils.checkNotNull(to, "to");
        this.to = Optional.ofNullable(to);
        return this;
    }

    public CreateTransferRequest withTo(Optional<? extends TransferDetails> to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateTransferRequest other = (CreateTransferRequest) o;
        return 
            java.util.Objects.deepEquals(this.date, other.date) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.from, other.from) &&
            java.util.Objects.deepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            date,
            description,
            from,
            to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateTransferRequest.class,
                "date", date,
                "description", description,
                "from", from,
                "to", to);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> date = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends TransferDetails> from = Optional.empty();
 
        private Optional<? extends TransferDetails> to = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        public Builder date(Optional<? extends String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        /**
         * Any private, company notes about the transaction.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Any private, company notes about the transaction.
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder from(TransferDetails from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<? extends TransferDetails> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder to(TransferDetails to) {
            Utils.checkNotNull(to, "to");
            this.to = Optional.ofNullable(to);
            return this;
        }

        public Builder to(Optional<? extends TransferDetails> to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }
        
        public CreateTransferRequest build() {
            return new CreateTransferRequest(
                date,
                description,
                from,
                to);
        }
    }
}

