/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.expenses.utils.SpeakeasyMetadata;
import io.codat.sync.expenses.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateReimbursableExpenseTransactionRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends io.codat.sync.expenses.models.components.CreateReimbursableExpenseRequest> createReimbursableExpenseRequest;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    public CreateReimbursableExpenseTransactionRequest(
            Optional<? extends io.codat.sync.expenses.models.components.CreateReimbursableExpenseRequest> createReimbursableExpenseRequest,
            String companyId) {
        Utils.checkNotNull(createReimbursableExpenseRequest, "createReimbursableExpenseRequest");
        Utils.checkNotNull(companyId, "companyId");
        this.createReimbursableExpenseRequest = createReimbursableExpenseRequest;
        this.companyId = companyId;
    }

    public Optional<? extends io.codat.sync.expenses.models.components.CreateReimbursableExpenseRequest> createReimbursableExpenseRequest() {
        return createReimbursableExpenseRequest;
    }

    /**
     * Unique identifier for a company.
     */
    public String companyId() {
        return companyId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateReimbursableExpenseTransactionRequest withCreateReimbursableExpenseRequest(io.codat.sync.expenses.models.components.CreateReimbursableExpenseRequest createReimbursableExpenseRequest) {
        Utils.checkNotNull(createReimbursableExpenseRequest, "createReimbursableExpenseRequest");
        this.createReimbursableExpenseRequest = Optional.ofNullable(createReimbursableExpenseRequest);
        return this;
    }

    public CreateReimbursableExpenseTransactionRequest withCreateReimbursableExpenseRequest(Optional<? extends io.codat.sync.expenses.models.components.CreateReimbursableExpenseRequest> createReimbursableExpenseRequest) {
        Utils.checkNotNull(createReimbursableExpenseRequest, "createReimbursableExpenseRequest");
        this.createReimbursableExpenseRequest = createReimbursableExpenseRequest;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public CreateReimbursableExpenseTransactionRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateReimbursableExpenseTransactionRequest other = (CreateReimbursableExpenseTransactionRequest) o;
        return 
            java.util.Objects.deepEquals(this.createReimbursableExpenseRequest, other.createReimbursableExpenseRequest) &&
            java.util.Objects.deepEquals(this.companyId, other.companyId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            createReimbursableExpenseRequest,
            companyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateReimbursableExpenseTransactionRequest.class,
                "createReimbursableExpenseRequest", createReimbursableExpenseRequest,
                "companyId", companyId);
    }
    
    public final static class Builder {
 
        private Optional<? extends io.codat.sync.expenses.models.components.CreateReimbursableExpenseRequest> createReimbursableExpenseRequest = Optional.empty();
 
        private String companyId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createReimbursableExpenseRequest(io.codat.sync.expenses.models.components.CreateReimbursableExpenseRequest createReimbursableExpenseRequest) {
            Utils.checkNotNull(createReimbursableExpenseRequest, "createReimbursableExpenseRequest");
            this.createReimbursableExpenseRequest = Optional.ofNullable(createReimbursableExpenseRequest);
            return this;
        }

        public Builder createReimbursableExpenseRequest(Optional<? extends io.codat.sync.expenses.models.components.CreateReimbursableExpenseRequest> createReimbursableExpenseRequest) {
            Utils.checkNotNull(createReimbursableExpenseRequest, "createReimbursableExpenseRequest");
            this.createReimbursableExpenseRequest = createReimbursableExpenseRequest;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }
        
        public CreateReimbursableExpenseTransactionRequest build() {
            return new CreateReimbursableExpenseTransactionRequest(
                createReimbursableExpenseRequest,
                companyId);
        }
    }
}

