/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.expenses.utils.LazySingletonValue;
import io.codat.sync.expenses.utils.SpeakeasyMetadata;
import io.codat.sync.expenses.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateCustomerRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private JsonNullable<? extends io.codat.sync.expenses.models.components.Customer> customer;

    /**
     * Allow a sync upon push completion.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=allowSyncOnPushComplete")
    private Optional<? extends Boolean> allowSyncOnPushComplete;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    /**
     * Unique identifier for a connection.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connectionId")
    private String connectionId;

    /**
     * Unique identifier for a customer.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=customerId")
    private String customerId;

    /**
     * When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=forceUpdate")
    private Optional<? extends Boolean> forceUpdate;

    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timeoutInMinutes")
    private Optional<? extends Integer> timeoutInMinutes;

    public UpdateCustomerRequest(
            JsonNullable<? extends io.codat.sync.expenses.models.components.Customer> customer,
            Optional<? extends Boolean> allowSyncOnPushComplete,
            String companyId,
            String connectionId,
            String customerId,
            Optional<? extends Boolean> forceUpdate,
            Optional<? extends Integer> timeoutInMinutes) {
        Utils.checkNotNull(customer, "customer");
        Utils.checkNotNull(allowSyncOnPushComplete, "allowSyncOnPushComplete");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(forceUpdate, "forceUpdate");
        Utils.checkNotNull(timeoutInMinutes, "timeoutInMinutes");
        this.customer = customer;
        this.allowSyncOnPushComplete = allowSyncOnPushComplete;
        this.companyId = companyId;
        this.connectionId = connectionId;
        this.customerId = customerId;
        this.forceUpdate = forceUpdate;
        this.timeoutInMinutes = timeoutInMinutes;
    }

    public JsonNullable<? extends io.codat.sync.expenses.models.components.Customer> customer() {
        return customer;
    }

    /**
     * Allow a sync upon push completion.
     */
    public Optional<? extends Boolean> allowSyncOnPushComplete() {
        return allowSyncOnPushComplete;
    }

    /**
     * Unique identifier for a company.
     */
    public String companyId() {
        return companyId;
    }

    /**
     * Unique identifier for a connection.
     */
    public String connectionId() {
        return connectionId;
    }

    /**
     * Unique identifier for a customer.
     */
    public String customerId() {
        return customerId;
    }

    /**
     * When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
     */
    public Optional<? extends Boolean> forceUpdate() {
        return forceUpdate;
    }

    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    public Optional<? extends Integer> timeoutInMinutes() {
        return timeoutInMinutes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateCustomerRequest withCustomer(io.codat.sync.expenses.models.components.Customer customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = JsonNullable.of(customer);
        return this;
    }

    public UpdateCustomerRequest withCustomer(JsonNullable<? extends io.codat.sync.expenses.models.components.Customer> customer) {
        Utils.checkNotNull(customer, "customer");
        this.customer = customer;
        return this;
    }

    /**
     * Allow a sync upon push completion.
     */
    public UpdateCustomerRequest withAllowSyncOnPushComplete(boolean allowSyncOnPushComplete) {
        Utils.checkNotNull(allowSyncOnPushComplete, "allowSyncOnPushComplete");
        this.allowSyncOnPushComplete = Optional.ofNullable(allowSyncOnPushComplete);
        return this;
    }

    /**
     * Allow a sync upon push completion.
     */
    public UpdateCustomerRequest withAllowSyncOnPushComplete(Optional<? extends Boolean> allowSyncOnPushComplete) {
        Utils.checkNotNull(allowSyncOnPushComplete, "allowSyncOnPushComplete");
        this.allowSyncOnPushComplete = allowSyncOnPushComplete;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public UpdateCustomerRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    /**
     * Unique identifier for a connection.
     */
    public UpdateCustomerRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Unique identifier for a customer.
     */
    public UpdateCustomerRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
     */
    public UpdateCustomerRequest withForceUpdate(boolean forceUpdate) {
        Utils.checkNotNull(forceUpdate, "forceUpdate");
        this.forceUpdate = Optional.ofNullable(forceUpdate);
        return this;
    }

    /**
     * When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
     */
    public UpdateCustomerRequest withForceUpdate(Optional<? extends Boolean> forceUpdate) {
        Utils.checkNotNull(forceUpdate, "forceUpdate");
        this.forceUpdate = forceUpdate;
        return this;
    }

    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    public UpdateCustomerRequest withTimeoutInMinutes(int timeoutInMinutes) {
        Utils.checkNotNull(timeoutInMinutes, "timeoutInMinutes");
        this.timeoutInMinutes = Optional.ofNullable(timeoutInMinutes);
        return this;
    }

    /**
     * Time limit for the push operation to complete before it is timed out.
     */
    public UpdateCustomerRequest withTimeoutInMinutes(Optional<? extends Integer> timeoutInMinutes) {
        Utils.checkNotNull(timeoutInMinutes, "timeoutInMinutes");
        this.timeoutInMinutes = timeoutInMinutes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateCustomerRequest other = (UpdateCustomerRequest) o;
        return 
            java.util.Objects.deepEquals(this.customer, other.customer) &&
            java.util.Objects.deepEquals(this.allowSyncOnPushComplete, other.allowSyncOnPushComplete) &&
            java.util.Objects.deepEquals(this.companyId, other.companyId) &&
            java.util.Objects.deepEquals(this.connectionId, other.connectionId) &&
            java.util.Objects.deepEquals(this.customerId, other.customerId) &&
            java.util.Objects.deepEquals(this.forceUpdate, other.forceUpdate) &&
            java.util.Objects.deepEquals(this.timeoutInMinutes, other.timeoutInMinutes);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            customer,
            allowSyncOnPushComplete,
            companyId,
            connectionId,
            customerId,
            forceUpdate,
            timeoutInMinutes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateCustomerRequest.class,
                "customer", customer,
                "allowSyncOnPushComplete", allowSyncOnPushComplete,
                "companyId", companyId,
                "connectionId", connectionId,
                "customerId", customerId,
                "forceUpdate", forceUpdate,
                "timeoutInMinutes", timeoutInMinutes);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends io.codat.sync.expenses.models.components.Customer> customer = JsonNullable.undefined();
 
        private Optional<? extends Boolean> allowSyncOnPushComplete;
 
        private String companyId;
 
        private String connectionId;
 
        private String customerId;
 
        private Optional<? extends Boolean> forceUpdate;
 
        private Optional<? extends Integer> timeoutInMinutes = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder customer(io.codat.sync.expenses.models.components.Customer customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = JsonNullable.of(customer);
            return this;
        }

        public Builder customer(JsonNullable<? extends io.codat.sync.expenses.models.components.Customer> customer) {
            Utils.checkNotNull(customer, "customer");
            this.customer = customer;
            return this;
        }

        /**
         * Allow a sync upon push completion.
         */
        public Builder allowSyncOnPushComplete(boolean allowSyncOnPushComplete) {
            Utils.checkNotNull(allowSyncOnPushComplete, "allowSyncOnPushComplete");
            this.allowSyncOnPushComplete = Optional.ofNullable(allowSyncOnPushComplete);
            return this;
        }

        /**
         * Allow a sync upon push completion.
         */
        public Builder allowSyncOnPushComplete(Optional<? extends Boolean> allowSyncOnPushComplete) {
            Utils.checkNotNull(allowSyncOnPushComplete, "allowSyncOnPushComplete");
            this.allowSyncOnPushComplete = allowSyncOnPushComplete;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        /**
         * Unique identifier for a connection.
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * Unique identifier for a customer.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        /**
         * When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
         */
        public Builder forceUpdate(boolean forceUpdate) {
            Utils.checkNotNull(forceUpdate, "forceUpdate");
            this.forceUpdate = Optional.ofNullable(forceUpdate);
            return this;
        }

        /**
         * When updating data in the destination platform Codat checks the `sourceModifiedDate` against the `lastupdated` date from the accounting platform, if they're different Codat will return an error suggesting you should initiate another pull of the data. If this is set to `true` then the update will override this check.
         */
        public Builder forceUpdate(Optional<? extends Boolean> forceUpdate) {
            Utils.checkNotNull(forceUpdate, "forceUpdate");
            this.forceUpdate = forceUpdate;
            return this;
        }

        /**
         * Time limit for the push operation to complete before it is timed out.
         */
        public Builder timeoutInMinutes(int timeoutInMinutes) {
            Utils.checkNotNull(timeoutInMinutes, "timeoutInMinutes");
            this.timeoutInMinutes = Optional.ofNullable(timeoutInMinutes);
            return this;
        }

        /**
         * Time limit for the push operation to complete before it is timed out.
         */
        public Builder timeoutInMinutes(Optional<? extends Integer> timeoutInMinutes) {
            Utils.checkNotNull(timeoutInMinutes, "timeoutInMinutes");
            this.timeoutInMinutes = timeoutInMinutes;
            return this;
        }
        
        public UpdateCustomerRequest build() {
            if (allowSyncOnPushComplete == null) {
                allowSyncOnPushComplete = _SINGLETON_VALUE_AllowSyncOnPushComplete.value();
            }
            if (forceUpdate == null) {
                forceUpdate = _SINGLETON_VALUE_ForceUpdate.value();
            }
            return new UpdateCustomerRequest(
                customer,
                allowSyncOnPushComplete,
                companyId,
                connectionId,
                customerId,
                forceUpdate,
                timeoutInMinutes);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_AllowSyncOnPushComplete =
                new LazySingletonValue<>(
                        "allowSyncOnPushComplete",
                        "true",
                        new TypeReference<Optional<? extends Boolean>>() {});

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_ForceUpdate =
                new LazySingletonValue<>(
                        "forceUpdate",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

