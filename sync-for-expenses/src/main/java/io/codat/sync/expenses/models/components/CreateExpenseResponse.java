/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.expenses.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateExpenseResponse {

    /**
     * Unique id of dataset created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("datasetId")
    private Optional<? extends String> datasetId;

    public CreateExpenseResponse(
            @JsonProperty("datasetId") Optional<? extends String> datasetId) {
        Utils.checkNotNull(datasetId, "datasetId");
        this.datasetId = datasetId;
    }

    /**
     * Unique id of dataset created
     */
    public Optional<? extends String> datasetId() {
        return datasetId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique id of dataset created
     */
    public CreateExpenseResponse withDatasetId(String datasetId) {
        Utils.checkNotNull(datasetId, "datasetId");
        this.datasetId = Optional.ofNullable(datasetId);
        return this;
    }

    /**
     * Unique id of dataset created
     */
    public CreateExpenseResponse withDatasetId(Optional<? extends String> datasetId) {
        Utils.checkNotNull(datasetId, "datasetId");
        this.datasetId = datasetId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateExpenseResponse other = (CreateExpenseResponse) o;
        return 
            java.util.Objects.deepEquals(this.datasetId, other.datasetId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            datasetId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateExpenseResponse.class,
                "datasetId", datasetId);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> datasetId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique id of dataset created
         */
        public Builder datasetId(String datasetId) {
            Utils.checkNotNull(datasetId, "datasetId");
            this.datasetId = Optional.ofNullable(datasetId);
            return this;
        }

        /**
         * Unique id of dataset created
         */
        public Builder datasetId(Optional<? extends String> datasetId) {
            Utils.checkNotNull(datasetId, "datasetId");
            this.datasetId = datasetId;
            return this;
        }
        
        public CreateExpenseResponse build() {
            return new CreateExpenseResponse(
                datasetId);
        }
    }
}

