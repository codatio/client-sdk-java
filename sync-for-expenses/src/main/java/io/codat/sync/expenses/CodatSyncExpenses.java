/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.expenses;

import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.expenses.models.operations.SDKMethodInterfaces.*;
import io.codat.sync.expenses.utils.HTTPClient;
import io.codat.sync.expenses.utils.RetryConfig;
import io.codat.sync.expenses.utils.SpeakeasyHTTPClient;
import io.codat.sync.expenses.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Sync for Expenses: The API for Sync for Expenses.
 * 
 * Sync for Expenses is an API and a set of supporting tools. It has been built to
 * enable corporate card and expense management platforms to provide high-quality
 * integrations with multiple accounting platforms through a standardized API.
 * 
 * [Read more...](https://docs.codat.io/sync-for-expenses/overview)
 * 
 * [See our OpenAPI spec](https://github.com/codatio/oas)
 * 
 * Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Expenses](https://docs.codat.io/sync-for-expenses-v1-api#/).
 */
public class CodatSyncExpenses {
    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        "https://api.codat.io",
    };

    /**
     * Create and manage your Codat companies.
     */
    private final Companies companies;

    /**
     * Create and manage partner expense connection.
     */
    private final Connections connections;

    /**
     * Accounts
     */
    private final Accounts accounts;

    /**
     * Customers
     */
    private final Customers customers;

    /**
     * Suppliers
     */
    private final Suppliers suppliers;

    /**
     * Asynchronously retrieve data from an integration to refresh data in Codat.
     */
    private final ManageData manageData;

    /**
     * Access create, update and delete operations made to an SMB's data connection.
     */
    private final PushOperations pushOperations;

    /**
     * Manage mapping options and sync configuration.
     */
    private final Configuration configuration;

    /**
     * Create expense transactions.
     */
    private final Expenses expenses;

    /**
     * Create reimbursable expense transactions.
     */
    private final Reimbursements reimbursements;

    /**
     * Trigger and monitor expense syncs to accounting software.
     */
    private final Sync sync;

    /**
     * Retrieve the status of transactions within a sync.
     */
    private final TransactionStatus transactionStatus;

    /**
     * Upload attachmens to expenses, transfers and reimbursable expense transactions.
     */
    private final Attachments attachments;

    /**
     * Create transfer transactions.
     */
    private final Transfers transfers;

    /**
     * Create and manage your Codat companies.
     */
    public Companies companies() {
        return companies;
    }

    /**
     * Create and manage partner expense connection.
     */
    public Connections connections() {
        return connections;
    }

    /**
     * Accounts
     */
    public Accounts accounts() {
        return accounts;
    }

    /**
     * Customers
     */
    public Customers customers() {
        return customers;
    }

    /**
     * Suppliers
     */
    public Suppliers suppliers() {
        return suppliers;
    }

    /**
     * Asynchronously retrieve data from an integration to refresh data in Codat.
     */
    public ManageData manageData() {
        return manageData;
    }

    /**
     * Access create, update and delete operations made to an SMB's data connection.
     */
    public PushOperations pushOperations() {
        return pushOperations;
    }

    /**
     * Manage mapping options and sync configuration.
     */
    public Configuration configuration() {
        return configuration;
    }

    /**
     * Create expense transactions.
     */
    public Expenses expenses() {
        return expenses;
    }

    /**
     * Create reimbursable expense transactions.
     */
    public Reimbursements reimbursements() {
        return reimbursements;
    }

    /**
     * Trigger and monitor expense syncs to accounting software.
     */
    public Sync sync() {
        return sync;
    }

    /**
     * Retrieve the status of transactions within a sync.
     */
    public TransactionStatus transactionStatus() {
        return transactionStatus;
    }

    /**
     * Upload attachmens to expenses, transfers and reimbursable expense transactions.
     */
    public Attachments attachments() {
        return attachments;
    }

    /**
     * Create transfer transactions.
     */
    public Transfers transfers() {
        return transfers;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param authHeader The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder authHeader(String authHeader) {
            this.sdkConfiguration.securitySource = SecuritySource.of(io.codat.sync.expenses.models.components.Security.builder()
              .authHeader(authHeader)
              .build());
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, java.util.Map<String, String> params) {
            this.sdkConfiguration.serverUrl = io.codat.sync.expenses.utils.Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public CodatSyncExpenses build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	    if (sdkConfiguration.securitySource == null) {
	    	sdkConfiguration.securitySource = SecuritySource.of(null);
	    }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new CodatSyncExpenses(sdkConfiguration);
        }
    }

    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private CodatSyncExpenses(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.companies = new Companies(sdkConfiguration);
        this.connections = new Connections(sdkConfiguration);
        this.accounts = new Accounts(sdkConfiguration);
        this.customers = new Customers(sdkConfiguration);
        this.suppliers = new Suppliers(sdkConfiguration);
        this.manageData = new ManageData(sdkConfiguration);
        this.pushOperations = new PushOperations(sdkConfiguration);
        this.configuration = new Configuration(sdkConfiguration);
        this.expenses = new Expenses(sdkConfiguration);
        this.reimbursements = new Reimbursements(sdkConfiguration);
        this.sync = new Sync(sdkConfiguration);
        this.transactionStatus = new TransactionStatus(sdkConfiguration);
        this.attachments = new Attachments(sdkConfiguration);
        this.transfers = new Transfers(sdkConfiguration);
    }











































}
