/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses;

import io.codat.sync.expenses.models.operations.SDKMethodInterfaces.*;
import io.codat.sync.expenses.utils.HTTPClient;
import io.codat.sync.expenses.utils.RetryConfig;
import io.codat.sync.expenses.utils.SpeakeasyHTTPClient;
import io.codat.sync.expenses.utils.Utils;
import java.lang.String;
import java.util.Map;
import java.util.Optional;

/**
 * Sync for Expenses: The API for Sync for Expenses.
 * 
 * Sync for Expenses is an API and a set of supporting tools. It has been built to
 * enable corporate card and expense management platforms to provide high-quality
 * integrations with multiple accounting software through a standardized API.
 * 
 * [Explore product](https://docs.codat.io/sync-for-expenses/overview) | [See our OpenAPI spec](https://github.com/codatio/oas)
 * 
 * Not seeing the endpoints you're expecting? We've [reorganized our products](https://docs.codat.io/updates/230901-new-products), and you may be using a [different version of Sync for Expenses](https://docs.codat.io/sync-for-expenses-v1-api#/).
 * 
 * ---
 * &lt;!-- Start Codat Tags Table --&gt;
 * ## Endpoints
 * 
 * | Endpoints | Description |
 * | :- |:- |
 * | Companies | Create and manage your SMB users' companies. |
 * | Connections | Create new and manage existing data connections for a company. |
 * | Configuration | View and manage mapping configuration and defaults for expense transactions. |
 * | Sync | Monitor the status of data syncs. |
 * | Expenses | Create and update transactions that represent your customers' spend. |
 * | Transfers | Create and update transactions that represent the movement of your customers' money. |
 * | Reimbursements | Create and update transactions that represent your customers' repayable spend. |
 * | Attachments | Attach receipts to a transaction for a complete audit trail. |
 * | Transaction status | Monitor the status of individual transactions in data syncs. |
 * | Manage data | Control and monitor the retrieval of data from an integration. |
 * | Push operations | View historic push operations. |
 * | Accounts | Create accounts and view account schemas. |
 * | Customers | Get, create, and update customers. |
 * | Suppliers | Get, create, and update suppliers. |
 * &lt;!-- End Codat Tags Table --&gt;
 */
public class CodatSyncExpenses {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        "https://api.codat.io",
    };

    /**
     * Create and manage your SMB users' companies.
     */
    private final Companies companies;

    /**
     * Create new and manage existing data connections for a company.
     */
    private final Connections connections;

    /**
     * Create bank accounts and view create bank account options.
     */
    private final BankAccounts bankAccounts;

    /**
     * Create accounts and view create account options.
     */
    private final Accounts accounts;

    /**
     * Get, create, and update customers.
     */
    private final Customers customers;

    /**
     * Get, create, and update suppliers.
     */
    private final Suppliers suppliers;

    /**
     * Control and monitor the retrieval of data from an integration.
     */
    private final ManageData manageData;

    /**
     * View the company information of your customers' linked accounting software.
     */
    private final CompanyInfo companyInfo;

    /**
     * View historic push operations.
     */
    private final PushOperations pushOperations;

    /**
     * Create transactions that represent your adjustments to your customers' spend.
     */
    private final Adjustments adjustments;

    /**
     * View and manage mapping configuration and defaults for expense transactions.
     */
    private final Configuration configuration;

    /**
     * Create and update transactions that represent your customers' spend.
     */
    private final Expenses expenses;

    /**
     * Get accounts, trackingCategories and taxRates that can be used in your create and update requests.
     */
    private final MappingOptions mappingOptions;

    /**
     * Create and update transactions that represent your customers' repayable spend.
     */
    private final Reimbursements reimbursements;

    /**
     * Monitor the status of data syncs.
     */
    private final Sync sync;

    /**
     * Monitor the status of individual transactions in data syncs.
     */
    private final TransactionStatus transactionStatus;

    /**
     * Attach receipts to a transaction for a complete audit trail.
     */
    private final Attachments attachments;

    /**
     * Create and update transactions that represent the movement of your customers' money.
     */
    private final Transfers transfers;

    /**
     * Create and manage your SMB users' companies.
     */
    public Companies companies() {
        return companies;
    }

    /**
     * Create new and manage existing data connections for a company.
     */
    public Connections connections() {
        return connections;
    }

    /**
     * Create bank accounts and view create bank account options.
     */
    public BankAccounts bankAccounts() {
        return bankAccounts;
    }

    /**
     * Create accounts and view create account options.
     */
    public Accounts accounts() {
        return accounts;
    }

    /**
     * Get, create, and update customers.
     */
    public Customers customers() {
        return customers;
    }

    /**
     * Get, create, and update suppliers.
     */
    public Suppliers suppliers() {
        return suppliers;
    }

    /**
     * Control and monitor the retrieval of data from an integration.
     */
    public ManageData manageData() {
        return manageData;
    }

    /**
     * View the company information of your customers' linked accounting software.
     */
    public CompanyInfo companyInfo() {
        return companyInfo;
    }

    /**
     * View historic push operations.
     */
    public PushOperations pushOperations() {
        return pushOperations;
    }

    /**
     * Create transactions that represent your adjustments to your customers' spend.
     */
    public Adjustments adjustments() {
        return adjustments;
    }

    /**
     * View and manage mapping configuration and defaults for expense transactions.
     */
    public Configuration configuration() {
        return configuration;
    }

    /**
     * Create and update transactions that represent your customers' spend.
     */
    public Expenses expenses() {
        return expenses;
    }

    /**
     * Get accounts, trackingCategories and taxRates that can be used in your create and update requests.
     */
    public MappingOptions mappingOptions() {
        return mappingOptions;
    }

    /**
     * Create and update transactions that represent your customers' repayable spend.
     */
    public Reimbursements reimbursements() {
        return reimbursements;
    }

    /**
     * Monitor the status of data syncs.
     */
    public Sync sync() {
        return sync;
    }

    /**
     * Monitor the status of individual transactions in data syncs.
     */
    public TransactionStatus transactionStatus() {
        return transactionStatus;
    }

    /**
     * Attach receipts to a transaction for a complete audit trail.
     */
    public Attachments attachments() {
        return attachments;
    }

    /**
     * Create and update transactions that represent the movement of your customers' money.
     */
    public Transfers transfers() {
        return transfers;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param authHeader The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder authHeader(String authHeader) {
            this.sdkConfiguration.securitySource = SecuritySource.of(io.codat.sync.expenses.models.components.Security.builder()
              .authHeader(authHeader)
              .build());
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.sdkConfiguration.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.serverIdx = serverIdx;
            this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        // Visible for testing, will be accessed via reflection
        void _hooks(io.codat.sync.expenses.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);    
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public CodatSyncExpenses build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS[0];
                sdkConfiguration.serverIdx = 0;
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new CodatSyncExpenses(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private CodatSyncExpenses(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.companies = new Companies(sdkConfiguration);
        this.connections = new Connections(sdkConfiguration);
        this.bankAccounts = new BankAccounts(sdkConfiguration);
        this.accounts = new Accounts(sdkConfiguration);
        this.customers = new Customers(sdkConfiguration);
        this.suppliers = new Suppliers(sdkConfiguration);
        this.manageData = new ManageData(sdkConfiguration);
        this.companyInfo = new CompanyInfo(sdkConfiguration);
        this.pushOperations = new PushOperations(sdkConfiguration);
        this.adjustments = new Adjustments(sdkConfiguration);
        this.configuration = new Configuration(sdkConfiguration);
        this.expenses = new Expenses(sdkConfiguration);
        this.mappingOptions = new MappingOptions(sdkConfiguration);
        this.reimbursements = new Reimbursements(sdkConfiguration);
        this.sync = new Sync(sdkConfiguration);
        this.transactionStatus = new TransactionStatus(sdkConfiguration);
        this.attachments = new Attachments(sdkConfiguration);
        this.transfers = new Transfers(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
