/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.expenses.utils.LazySingletonValue;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class ExpenseContactRef {

    /**
     * Identifier of supplier or customer.
     */
    @JsonProperty("id")
    private String id;

    /**
     * The type of contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends Type> type;

    @JsonCreator
    public ExpenseContactRef(
            @JsonProperty("id") String id,
            @JsonProperty("type") Optional<? extends Type> type) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        this.id = id;
        this.type = type;
    }
    
    public ExpenseContactRef(
            String id) {
        this(id, Optional.empty());
    }

    /**
     * Identifier of supplier or customer.
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * The type of contact.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Type> type() {
        return (Optional<Type>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Identifier of supplier or customer.
     */
    public ExpenseContactRef withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The type of contact.
     */
    public ExpenseContactRef withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of contact.
     */
    public ExpenseContactRef withType(Optional<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExpenseContactRef other = (ExpenseContactRef) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExpenseContactRef.class,
                "id", id,
                "type", type);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<? extends Type> type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Identifier of supplier or customer.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The type of contact.
         */
        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of contact.
         */
        public Builder type(Optional<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public ExpenseContactRef build() {
            if (type == null) {
                type = _SINGLETON_VALUE_Type.value();
            }            return new ExpenseContactRef(
                id,
                type);
        }

        private static final LazySingletonValue<Optional<? extends Type>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"Supplier\"",
                        new TypeReference<Optional<? extends Type>>() {});
    }
}

