/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync.expenses.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Transaction {

    /**
     * Error message for failed transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    private JsonNullable<String> errorMessage;

    /**
     * Unique identifier of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Status of transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TransactionDefinitionsStatus> status;

    @JsonCreator
    public Transaction(
            @JsonProperty("errorMessage") JsonNullable<String> errorMessage,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("status") Optional<? extends TransactionDefinitionsStatus> status) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(status, "status");
        this.errorMessage = errorMessage;
        this.id = id;
        this.status = status;
    }
    
    public Transaction() {
        this(JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * Error message for failed transaction.
     */
    @JsonIgnore
    public JsonNullable<String> errorMessage() {
        return errorMessage;
    }

    /**
     * Unique identifier of the transaction.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Status of transaction.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TransactionDefinitionsStatus> status() {
        return (Optional<TransactionDefinitionsStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Error message for failed transaction.
     */
    public Transaction withErrorMessage(String errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = JsonNullable.of(errorMessage);
        return this;
    }

    /**
     * Error message for failed transaction.
     */
    public Transaction withErrorMessage(JsonNullable<String> errorMessage) {
        Utils.checkNotNull(errorMessage, "errorMessage");
        this.errorMessage = errorMessage;
        return this;
    }

    /**
     * Unique identifier of the transaction.
     */
    public Transaction withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique identifier of the transaction.
     */
    public Transaction withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Status of transaction.
     */
    public Transaction withStatus(TransactionDefinitionsStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of transaction.
     */
    public Transaction withStatus(Optional<? extends TransactionDefinitionsStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transaction other = (Transaction) o;
        return 
            Objects.deepEquals(this.errorMessage, other.errorMessage) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            errorMessage,
            id,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Transaction.class,
                "errorMessage", errorMessage,
                "id", id,
                "status", status);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> errorMessage = JsonNullable.undefined();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends TransactionDefinitionsStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Error message for failed transaction.
         */
        public Builder errorMessage(String errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = JsonNullable.of(errorMessage);
            return this;
        }

        /**
         * Error message for failed transaction.
         */
        public Builder errorMessage(JsonNullable<String> errorMessage) {
            Utils.checkNotNull(errorMessage, "errorMessage");
            this.errorMessage = errorMessage;
            return this;
        }

        /**
         * Unique identifier of the transaction.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique identifier of the transaction.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Status of transaction.
         */
        public Builder status(TransactionDefinitionsStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of transaction.
         */
        public Builder status(Optional<? extends TransactionDefinitionsStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public Transaction build() {
            return new Transaction(
                errorMessage,
                id,
                status);
        }
    }
}

