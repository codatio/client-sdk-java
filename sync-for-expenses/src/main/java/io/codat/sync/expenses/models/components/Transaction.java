/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync.expenses.models.components;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync.expenses.utils.LazySingletonValue;
import io.codat.sync.expenses.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapitools.jackson.nullable.JsonNullable;


public class Transaction {

    /**
     * Type of transaction that has been processed e.g. Expense or Bank Feed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integrationType")
    private JsonNullable<? extends IntegrationType> integrationType;

    /**
     * Metadata such as validation errors or the resulting record created in the accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private JsonNullable<? extends String> message;

    /**
     * Status of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private JsonNullable<? extends TransactionStatus> status;

    /**
     * Your unique idenfier of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionId")
    private JsonNullable<? extends String> transactionId;

    public Transaction(
            @JsonProperty("integrationType") JsonNullable<? extends IntegrationType> integrationType,
            @JsonProperty("message") JsonNullable<? extends String> message,
            @JsonProperty("status") JsonNullable<? extends TransactionStatus> status,
            @JsonProperty("transactionId") JsonNullable<? extends String> transactionId) {
        Utils.checkNotNull(integrationType, "integrationType");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(transactionId, "transactionId");
        this.integrationType = integrationType;
        this.message = message;
        this.status = status;
        this.transactionId = transactionId;
    }

    /**
     * Type of transaction that has been processed e.g. Expense or Bank Feed.
     */
    public JsonNullable<? extends IntegrationType> integrationType() {
        return integrationType;
    }

    /**
     * Metadata such as validation errors or the resulting record created in the accounting software.
     */
    public JsonNullable<? extends String> message() {
        return message;
    }

    /**
     * Status of the transaction.
     */
    public JsonNullable<? extends TransactionStatus> status() {
        return status;
    }

    /**
     * Your unique idenfier of the transaction.
     */
    public JsonNullable<? extends String> transactionId() {
        return transactionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Type of transaction that has been processed e.g. Expense or Bank Feed.
     */
    public Transaction withIntegrationType(IntegrationType integrationType) {
        Utils.checkNotNull(integrationType, "integrationType");
        this.integrationType = JsonNullable.of(integrationType);
        return this;
    }

    /**
     * Type of transaction that has been processed e.g. Expense or Bank Feed.
     */
    public Transaction withIntegrationType(JsonNullable<? extends IntegrationType> integrationType) {
        Utils.checkNotNull(integrationType, "integrationType");
        this.integrationType = integrationType;
        return this;
    }

    /**
     * Metadata such as validation errors or the resulting record created in the accounting software.
     */
    public Transaction withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = JsonNullable.of(message);
        return this;
    }

    /**
     * Metadata such as validation errors or the resulting record created in the accounting software.
     */
    public Transaction withMessage(JsonNullable<? extends String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * Status of the transaction.
     */
    public Transaction withStatus(TransactionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = JsonNullable.of(status);
        return this;
    }

    /**
     * Status of the transaction.
     */
    public Transaction withStatus(JsonNullable<? extends TransactionStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Your unique idenfier of the transaction.
     */
    public Transaction withTransactionId(String transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = JsonNullable.of(transactionId);
        return this;
    }

    /**
     * Your unique idenfier of the transaction.
     */
    public Transaction withTransactionId(JsonNullable<? extends String> transactionId) {
        Utils.checkNotNull(transactionId, "transactionId");
        this.transactionId = transactionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Transaction other = (Transaction) o;
        return 
            java.util.Objects.deepEquals(this.integrationType, other.integrationType) &&
            java.util.Objects.deepEquals(this.message, other.message) &&
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.transactionId, other.transactionId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            integrationType,
            message,
            status,
            transactionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Transaction.class,
                "integrationType", integrationType,
                "message", message,
                "status", status,
                "transactionId", transactionId);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends IntegrationType> integrationType;
 
        private JsonNullable<? extends String> message = JsonNullable.undefined();
 
        private JsonNullable<? extends TransactionStatus> status = JsonNullable.undefined();
 
        private JsonNullable<? extends String> transactionId = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of transaction that has been processed e.g. Expense or Bank Feed.
         */
        public Builder integrationType(IntegrationType integrationType) {
            Utils.checkNotNull(integrationType, "integrationType");
            this.integrationType = JsonNullable.of(integrationType);
            return this;
        }

        /**
         * Type of transaction that has been processed e.g. Expense or Bank Feed.
         */
        public Builder integrationType(JsonNullable<? extends IntegrationType> integrationType) {
            Utils.checkNotNull(integrationType, "integrationType");
            this.integrationType = integrationType;
            return this;
        }

        /**
         * Metadata such as validation errors or the resulting record created in the accounting software.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = JsonNullable.of(message);
            return this;
        }

        /**
         * Metadata such as validation errors or the resulting record created in the accounting software.
         */
        public Builder message(JsonNullable<? extends String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * Status of the transaction.
         */
        public Builder status(TransactionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = JsonNullable.of(status);
            return this;
        }

        /**
         * Status of the transaction.
         */
        public Builder status(JsonNullable<? extends TransactionStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Your unique idenfier of the transaction.
         */
        public Builder transactionId(String transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = JsonNullable.of(transactionId);
            return this;
        }

        /**
         * Your unique idenfier of the transaction.
         */
        public Builder transactionId(JsonNullable<? extends String> transactionId) {
            Utils.checkNotNull(transactionId, "transactionId");
            this.transactionId = transactionId;
            return this;
        }
        
        public Transaction build() {
            if (integrationType == null) {
                integrationType = _SINGLETON_VALUE_IntegrationType.value();
            }
            return new Transaction(
                integrationType,
                message,
                status,
                transactionId);
        }

        private static final LazySingletonValue<JsonNullable<? extends IntegrationType>> _SINGLETON_VALUE_IntegrationType =
                new LazySingletonValue<>(
                        "integrationType",
                        "\"expenses\"",
                        new TypeReference<JsonNullable<? extends IntegrationType>>() {});
    }
}

