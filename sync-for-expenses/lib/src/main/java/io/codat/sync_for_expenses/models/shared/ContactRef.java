/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync_for_expenses.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import io.codat.sync_for_expenses.utils.LazySingletonValue;
import io.codat.sync_for_expenses.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class ContactRef {

    /**
     * Identifier of supplier or customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * The type of contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends Type> type;

    public ContactRef(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("type") Optional<? extends Type> type) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        this.id = id;
        this.type = type;
    }

    /**
     * Identifier of supplier or customer.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * The type of contact.
     */
    public Optional<? extends Type> type() {
        return type;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Identifier of supplier or customer.
     */
    public ContactRef withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }
    
    /**
     * Identifier of supplier or customer.
     */
    public ContactRef withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The type of contact.
     */
    public ContactRef withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }
    
    /**
     * The type of contact.
     */
    public ContactRef withType(Optional<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContactRef other = (ContactRef) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContactRef.class,
                "id", id,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Type> type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Identifier of supplier or customer.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }
        
        /**
         * Identifier of supplier or customer.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The type of contact.
         */
        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }
        
        /**
         * The type of contact.
         */
        public Builder type(Optional<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }        
        
        public ContactRef build() {
            if (type == null) {
                type = _SINGLETON_VALUE_Type.value();
            }
            return new ContactRef(
                id,
                type);
        }

        private static final LazySingletonValue<Optional<? extends Type>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"Supplier\"",
                        new TypeReference<Optional<? extends Type>>() {});
    }
}

