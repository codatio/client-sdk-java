/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync_for_expenses.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync_for_expenses.utils.Utils;
import java.io.InputStream;
import org.openapitools.jackson.nullable.JsonNullable;


public class AccountMappingInfo {

    /**
     * Type of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountType")
    private JsonNullable<? extends AccountMappingInfoAccountType> accountType;

    /**
     * Currency of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private JsonNullable<? extends String> currency;

    /**
     * Unique identifier of account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private JsonNullable<? extends String> id;

    /**
     * Name of the account as it appears in the companies accounting software.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    /**
     * Supported transaction types for the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validTransactionTypes")
    private JsonNullable<? extends java.util.List<ValidTransactionTypes>> validTransactionTypes;

    public AccountMappingInfo(
            @JsonProperty("accountType") JsonNullable<? extends AccountMappingInfoAccountType> accountType,
            @JsonProperty("currency") JsonNullable<? extends String> currency,
            @JsonProperty("id") JsonNullable<? extends String> id,
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("validTransactionTypes") JsonNullable<? extends java.util.List<ValidTransactionTypes>> validTransactionTypes) {
        Utils.checkNotNull(accountType, "accountType");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(validTransactionTypes, "validTransactionTypes");
        this.accountType = accountType;
        this.currency = currency;
        this.id = id;
        this.name = name;
        this.validTransactionTypes = validTransactionTypes;
    }

    /**
     * Type of the account.
     */
    public JsonNullable<? extends AccountMappingInfoAccountType> accountType() {
        return accountType;
    }

    /**
     * Currency of the account.
     */
    public JsonNullable<? extends String> currency() {
        return currency;
    }

    /**
     * Unique identifier of account.
     */
    public JsonNullable<? extends String> id() {
        return id;
    }

    /**
     * Name of the account as it appears in the companies accounting software.
     */
    public JsonNullable<? extends String> name() {
        return name;
    }

    /**
     * Supported transaction types for the account.
     */
    public JsonNullable<? extends java.util.List<ValidTransactionTypes>> validTransactionTypes() {
        return validTransactionTypes;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Type of the account.
     */
    public AccountMappingInfo withAccountType(AccountMappingInfoAccountType accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = JsonNullable.of(accountType);
        return this;
    }

    /**
     * Type of the account.
     */
    public AccountMappingInfo withAccountType(JsonNullable<? extends AccountMappingInfoAccountType> accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }

    /**
     * Currency of the account.
     */
    public AccountMappingInfo withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = JsonNullable.of(currency);
        return this;
    }

    /**
     * Currency of the account.
     */
    public AccountMappingInfo withCurrency(JsonNullable<? extends String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    /**
     * Unique identifier of account.
     */
    public AccountMappingInfo withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = JsonNullable.of(id);
        return this;
    }

    /**
     * Unique identifier of account.
     */
    public AccountMappingInfo withId(JsonNullable<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Name of the account as it appears in the companies accounting software.
     */
    public AccountMappingInfo withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * Name of the account as it appears in the companies accounting software.
     */
    public AccountMappingInfo withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Supported transaction types for the account.
     */
    public AccountMappingInfo withValidTransactionTypes(java.util.List<ValidTransactionTypes> validTransactionTypes) {
        Utils.checkNotNull(validTransactionTypes, "validTransactionTypes");
        this.validTransactionTypes = JsonNullable.of(validTransactionTypes);
        return this;
    }

    /**
     * Supported transaction types for the account.
     */
    public AccountMappingInfo withValidTransactionTypes(JsonNullable<? extends java.util.List<ValidTransactionTypes>> validTransactionTypes) {
        Utils.checkNotNull(validTransactionTypes, "validTransactionTypes");
        this.validTransactionTypes = validTransactionTypes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountMappingInfo other = (AccountMappingInfo) o;
        return 
            java.util.Objects.deepEquals(this.accountType, other.accountType) &&
            java.util.Objects.deepEquals(this.currency, other.currency) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.validTransactionTypes, other.validTransactionTypes);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accountType,
            currency,
            id,
            name,
            validTransactionTypes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountMappingInfo.class,
                "accountType", accountType,
                "currency", currency,
                "id", id,
                "name", name,
                "validTransactionTypes", validTransactionTypes);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends AccountMappingInfoAccountType> accountType = JsonNullable.undefined();
 
        private JsonNullable<? extends String> currency = JsonNullable.undefined();
 
        private JsonNullable<? extends String> id = JsonNullable.undefined();
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends java.util.List<ValidTransactionTypes>> validTransactionTypes = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Type of the account.
         */
        public Builder accountType(AccountMappingInfoAccountType accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = JsonNullable.of(accountType);
            return this;
        }

        /**
         * Type of the account.
         */
        public Builder accountType(JsonNullable<? extends AccountMappingInfoAccountType> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }

        /**
         * Currency of the account.
         */
        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = JsonNullable.of(currency);
            return this;
        }

        /**
         * Currency of the account.
         */
        public Builder currency(JsonNullable<? extends String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        /**
         * Unique identifier of account.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = JsonNullable.of(id);
            return this;
        }

        /**
         * Unique identifier of account.
         */
        public Builder id(JsonNullable<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Name of the account as it appears in the companies accounting software.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * Name of the account as it appears in the companies accounting software.
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Supported transaction types for the account.
         */
        public Builder validTransactionTypes(java.util.List<ValidTransactionTypes> validTransactionTypes) {
            Utils.checkNotNull(validTransactionTypes, "validTransactionTypes");
            this.validTransactionTypes = JsonNullable.of(validTransactionTypes);
            return this;
        }

        /**
         * Supported transaction types for the account.
         */
        public Builder validTransactionTypes(JsonNullable<? extends java.util.List<ValidTransactionTypes>> validTransactionTypes) {
            Utils.checkNotNull(validTransactionTypes, "validTransactionTypes");
            this.validTransactionTypes = validTransactionTypes;
            return this;
        }        
        
        public AccountMappingInfo build() {
            return new AccountMappingInfo(
                accountType,
                currency,
                id,
                name,
                validTransactionTypes);
        }
    }
}

