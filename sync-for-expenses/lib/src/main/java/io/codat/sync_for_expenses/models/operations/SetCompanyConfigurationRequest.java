/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync_for_expenses.models.operations;

import io.codat.sync_for_expenses.utils.SpeakeasyMetadata;
import io.codat.sync_for_expenses.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class SetCompanyConfigurationRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends io.codat.sync_for_expenses.models.shared.CompanyConfiguration> companyConfiguration;

    /**
     * Unique identifier for a company.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=companyId")
    private String companyId;

    public SetCompanyConfigurationRequest(
            Optional<? extends io.codat.sync_for_expenses.models.shared.CompanyConfiguration> companyConfiguration,
            String companyId) {
        Utils.checkNotNull(companyConfiguration, "companyConfiguration");
        Utils.checkNotNull(companyId, "companyId");
        this.companyConfiguration = companyConfiguration;
        this.companyId = companyId;
    }

    public Optional<? extends io.codat.sync_for_expenses.models.shared.CompanyConfiguration> companyConfiguration() {
        return companyConfiguration;
    }

    /**
     * Unique identifier for a company.
     */
    public String companyId() {
        return companyId;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public SetCompanyConfigurationRequest withCompanyConfiguration(io.codat.sync_for_expenses.models.shared.CompanyConfiguration companyConfiguration) {
        Utils.checkNotNull(companyConfiguration, "companyConfiguration");
        this.companyConfiguration = Optional.ofNullable(companyConfiguration);
        return this;
    }
    
    public SetCompanyConfigurationRequest withCompanyConfiguration(Optional<? extends io.codat.sync_for_expenses.models.shared.CompanyConfiguration> companyConfiguration) {
        Utils.checkNotNull(companyConfiguration, "companyConfiguration");
        this.companyConfiguration = companyConfiguration;
        return this;
    }

    /**
     * Unique identifier for a company.
     */
    public SetCompanyConfigurationRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SetCompanyConfigurationRequest other = (SetCompanyConfigurationRequest) o;
        return 
            java.util.Objects.deepEquals(this.companyConfiguration, other.companyConfiguration) &&
            java.util.Objects.deepEquals(this.companyId, other.companyId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            companyConfiguration,
            companyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SetCompanyConfigurationRequest.class,
                "companyConfiguration", companyConfiguration,
                "companyId", companyId);
    }
    
    public final static class Builder {
 
        private Optional<? extends io.codat.sync_for_expenses.models.shared.CompanyConfiguration> companyConfiguration = Optional.empty();
 
        private String companyId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder companyConfiguration(io.codat.sync_for_expenses.models.shared.CompanyConfiguration companyConfiguration) {
            Utils.checkNotNull(companyConfiguration, "companyConfiguration");
            this.companyConfiguration = Optional.ofNullable(companyConfiguration);
            return this;
        }
        
        public Builder companyConfiguration(Optional<? extends io.codat.sync_for_expenses.models.shared.CompanyConfiguration> companyConfiguration) {
            Utils.checkNotNull(companyConfiguration, "companyConfiguration");
            this.companyConfiguration = companyConfiguration;
            return this;
        }

        /**
         * Unique identifier for a company.
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }        
        
        public SetCompanyConfigurationRequest build() {
            return new SetCompanyConfigurationRequest(
                companyConfiguration,
                companyId);
        }
    }
}

