/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package io.codat.sync_for_expenses.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.codat.sync_for_expenses.utils.Utils;
import java.io.InputStream;
import java.util.Optional;


public class ErrorMessage {

    /**
     * `True` if the error occurred transiently and can be retried.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canBeRetried")
    private Optional<? extends String> canBeRetried;

    /**
     * Unique identifier used to propagate to all downstream services and determine the source of the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correlationId")
    private Optional<? extends String> correlationId;

    /**
     * Machine readable error code used to automate processes based on the code returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detailedErrorCode")
    private Optional<? extends Long> detailedErrorCode;

    /**
     * A brief description of the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<? extends String> error;

    /**
     * Codat's service the returned the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    private Optional<? extends String> service;

    /**
     * The HTTP status code returned by the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusCode")
    private Optional<? extends Long> statusCode;

    public ErrorMessage(
            @JsonProperty("canBeRetried") Optional<? extends String> canBeRetried,
            @JsonProperty("correlationId") Optional<? extends String> correlationId,
            @JsonProperty("detailedErrorCode") Optional<? extends Long> detailedErrorCode,
            @JsonProperty("error") Optional<? extends String> error,
            @JsonProperty("service") Optional<? extends String> service,
            @JsonProperty("statusCode") Optional<? extends Long> statusCode) {
        Utils.checkNotNull(canBeRetried, "canBeRetried");
        Utils.checkNotNull(correlationId, "correlationId");
        Utils.checkNotNull(detailedErrorCode, "detailedErrorCode");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(service, "service");
        Utils.checkNotNull(statusCode, "statusCode");
        this.canBeRetried = canBeRetried;
        this.correlationId = correlationId;
        this.detailedErrorCode = detailedErrorCode;
        this.error = error;
        this.service = service;
        this.statusCode = statusCode;
    }

    /**
     * `True` if the error occurred transiently and can be retried.
     */
    public Optional<? extends String> canBeRetried() {
        return canBeRetried;
    }

    /**
     * Unique identifier used to propagate to all downstream services and determine the source of the error.
     */
    public Optional<? extends String> correlationId() {
        return correlationId;
    }

    /**
     * Machine readable error code used to automate processes based on the code returned.
     */
    public Optional<? extends Long> detailedErrorCode() {
        return detailedErrorCode;
    }

    /**
     * A brief description of the error.
     */
    public Optional<? extends String> error() {
        return error;
    }

    /**
     * Codat's service the returned the error.
     */
    public Optional<? extends String> service() {
        return service;
    }

    /**
     * The HTTP status code returned by the error.
     */
    public Optional<? extends Long> statusCode() {
        return statusCode;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    /**
     * `True` if the error occurred transiently and can be retried.
     */
    public ErrorMessage withCanBeRetried(String canBeRetried) {
        Utils.checkNotNull(canBeRetried, "canBeRetried");
        this.canBeRetried = Optional.ofNullable(canBeRetried);
        return this;
    }
    
    /**
     * `True` if the error occurred transiently and can be retried.
     */
    public ErrorMessage withCanBeRetried(Optional<? extends String> canBeRetried) {
        Utils.checkNotNull(canBeRetried, "canBeRetried");
        this.canBeRetried = canBeRetried;
        return this;
    }

    /**
     * Unique identifier used to propagate to all downstream services and determine the source of the error.
     */
    public ErrorMessage withCorrelationId(String correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = Optional.ofNullable(correlationId);
        return this;
    }
    
    /**
     * Unique identifier used to propagate to all downstream services and determine the source of the error.
     */
    public ErrorMessage withCorrelationId(Optional<? extends String> correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Machine readable error code used to automate processes based on the code returned.
     */
    public ErrorMessage withDetailedErrorCode(long detailedErrorCode) {
        Utils.checkNotNull(detailedErrorCode, "detailedErrorCode");
        this.detailedErrorCode = Optional.ofNullable(detailedErrorCode);
        return this;
    }
    
    /**
     * Machine readable error code used to automate processes based on the code returned.
     */
    public ErrorMessage withDetailedErrorCode(Optional<? extends Long> detailedErrorCode) {
        Utils.checkNotNull(detailedErrorCode, "detailedErrorCode");
        this.detailedErrorCode = detailedErrorCode;
        return this;
    }

    /**
     * A brief description of the error.
     */
    public ErrorMessage withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }
    
    /**
     * A brief description of the error.
     */
    public ErrorMessage withError(Optional<? extends String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * Codat's service the returned the error.
     */
    public ErrorMessage withService(String service) {
        Utils.checkNotNull(service, "service");
        this.service = Optional.ofNullable(service);
        return this;
    }
    
    /**
     * Codat's service the returned the error.
     */
    public ErrorMessage withService(Optional<? extends String> service) {
        Utils.checkNotNull(service, "service");
        this.service = service;
        return this;
    }

    /**
     * The HTTP status code returned by the error.
     */
    public ErrorMessage withStatusCode(long statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = Optional.ofNullable(statusCode);
        return this;
    }
    
    /**
     * The HTTP status code returned by the error.
     */
    public ErrorMessage withStatusCode(Optional<? extends Long> statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ErrorMessage other = (ErrorMessage) o;
        return 
            java.util.Objects.deepEquals(this.canBeRetried, other.canBeRetried) &&
            java.util.Objects.deepEquals(this.correlationId, other.correlationId) &&
            java.util.Objects.deepEquals(this.detailedErrorCode, other.detailedErrorCode) &&
            java.util.Objects.deepEquals(this.error, other.error) &&
            java.util.Objects.deepEquals(this.service, other.service) &&
            java.util.Objects.deepEquals(this.statusCode, other.statusCode);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            canBeRetried,
            correlationId,
            detailedErrorCode,
            error,
            service,
            statusCode);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ErrorMessage.class,
                "canBeRetried", canBeRetried,
                "correlationId", correlationId,
                "detailedErrorCode", detailedErrorCode,
                "error", error,
                "service", service,
                "statusCode", statusCode);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> canBeRetried = Optional.empty();
 
        private Optional<? extends String> correlationId = Optional.empty();
 
        private Optional<? extends Long> detailedErrorCode = Optional.empty();
 
        private Optional<? extends String> error = Optional.empty();
 
        private Optional<? extends String> service = Optional.empty();
 
        private Optional<? extends Long> statusCode = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * `True` if the error occurred transiently and can be retried.
         */
        public Builder canBeRetried(String canBeRetried) {
            Utils.checkNotNull(canBeRetried, "canBeRetried");
            this.canBeRetried = Optional.ofNullable(canBeRetried);
            return this;
        }
        
        /**
         * `True` if the error occurred transiently and can be retried.
         */
        public Builder canBeRetried(Optional<? extends String> canBeRetried) {
            Utils.checkNotNull(canBeRetried, "canBeRetried");
            this.canBeRetried = canBeRetried;
            return this;
        }

        /**
         * Unique identifier used to propagate to all downstream services and determine the source of the error.
         */
        public Builder correlationId(String correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = Optional.ofNullable(correlationId);
            return this;
        }
        
        /**
         * Unique identifier used to propagate to all downstream services and determine the source of the error.
         */
        public Builder correlationId(Optional<? extends String> correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = correlationId;
            return this;
        }

        /**
         * Machine readable error code used to automate processes based on the code returned.
         */
        public Builder detailedErrorCode(long detailedErrorCode) {
            Utils.checkNotNull(detailedErrorCode, "detailedErrorCode");
            this.detailedErrorCode = Optional.ofNullable(detailedErrorCode);
            return this;
        }
        
        /**
         * Machine readable error code used to automate processes based on the code returned.
         */
        public Builder detailedErrorCode(Optional<? extends Long> detailedErrorCode) {
            Utils.checkNotNull(detailedErrorCode, "detailedErrorCode");
            this.detailedErrorCode = detailedErrorCode;
            return this;
        }

        /**
         * A brief description of the error.
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }
        
        /**
         * A brief description of the error.
         */
        public Builder error(Optional<? extends String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * Codat's service the returned the error.
         */
        public Builder service(String service) {
            Utils.checkNotNull(service, "service");
            this.service = Optional.ofNullable(service);
            return this;
        }
        
        /**
         * Codat's service the returned the error.
         */
        public Builder service(Optional<? extends String> service) {
            Utils.checkNotNull(service, "service");
            this.service = service;
            return this;
        }

        /**
         * The HTTP status code returned by the error.
         */
        public Builder statusCode(long statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = Optional.ofNullable(statusCode);
            return this;
        }
        
        /**
         * The HTTP status code returned by the error.
         */
        public Builder statusCode(Optional<? extends Long> statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }        
        
        public ErrorMessage build() {
            return new ErrorMessage(
                canBeRetried,
                correlationId,
                detailedErrorCode,
                error,
                service,
                statusCode);
        }
    }
}

